{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar assert = require('assert');\n\nvar bl = require('bl');\n\nvar streams = require('./lib/streams');\n\nvar buildDecode = require('./lib/decoder');\n\nvar buildEncode = require('./lib/encoder');\n\nfunction msgpack(options) {\n  var encodingTypes = [];\n  var decodingTypes = [];\n  options = options || {\n    forceFloat64: false,\n    compatibilityMode: false,\n    disableTimestampEncoding: false // if true, skips encoding Dates using the msgpack timestamp ext format (-1)\n\n  };\n\n  function registerEncoder(check, encode) {\n    assert(check, 'must have an encode function');\n    assert(encode, 'must have an encode function');\n    encodingTypes.push({\n      check: check,\n      encode: encode\n    });\n    return this;\n  }\n\n  function registerDecoder(type, decode) {\n    assert(type >= 0, 'must have a non-negative type');\n    assert(decode, 'must have a decode function');\n    decodingTypes.push({\n      type: type,\n      decode: decode\n    });\n    return this;\n  }\n\n  function register(type, constructor, encode, decode) {\n    assert(constructor, 'must have a constructor');\n    assert(encode, 'must have an encode function');\n    assert(type >= 0, 'must have a non-negative type');\n    assert(decode, 'must have a decode function');\n\n    function check(obj) {\n      return obj instanceof constructor;\n    }\n\n    function reEncode(obj) {\n      var buf = bl();\n      var header = Buffer.allocUnsafe(1);\n      header.writeInt8(type, 0);\n      buf.append(header);\n      buf.append(encode(obj));\n      return buf;\n    }\n\n    this.registerEncoder(check, reEncode);\n    this.registerDecoder(type, decode);\n    return this;\n  }\n\n  return {\n    encode: buildEncode(encodingTypes, options.forceFloat64, options.compatibilityMode, options.disableTimestampEncoding),\n    decode: buildDecode(decodingTypes),\n    register: register,\n    registerEncoder: registerEncoder,\n    registerDecoder: registerDecoder,\n    encoder: streams.encoder,\n    decoder: streams.decoder,\n    // needed for levelup support\n    buffer: true,\n    type: 'msgpack5',\n    IncompleteBufferError: buildDecode.IncompleteBufferError\n  };\n}\n\nmodule.exports = msgpack;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChipChapProject/chipchap/node_modules/msgpack5/index.js"],"names":["Buffer","require","assert","bl","streams","buildDecode","buildEncode","msgpack","options","encodingTypes","decodingTypes","forceFloat64","compatibilityMode","disableTimestampEncoding","registerEncoder","check","encode","push","registerDecoder","type","decode","register","constructor","obj","reEncode","buf","header","allocUnsafe","writeInt8","append","encoder","decoder","buffer","IncompleteBufferError","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar Buffer = require('safe-buffer').Buffer\nvar assert = require('assert')\nvar bl = require('bl')\nvar streams = require('./lib/streams')\nvar buildDecode = require('./lib/decoder')\nvar buildEncode = require('./lib/encoder')\n\nfunction msgpack (options) {\n  var encodingTypes = []\n  var decodingTypes = []\n\n  options = options || {\n    forceFloat64: false,\n    compatibilityMode: false,\n    disableTimestampEncoding: false // if true, skips encoding Dates using the msgpack timestamp ext format (-1)\n  }\n\n  function registerEncoder (check, encode) {\n    assert(check, 'must have an encode function')\n    assert(encode, 'must have an encode function')\n\n    encodingTypes.push({\n      check: check, encode: encode\n    })\n\n    return this\n  }\n\n  function registerDecoder (type, decode) {\n    assert(type >= 0, 'must have a non-negative type')\n    assert(decode, 'must have a decode function')\n\n    decodingTypes.push({\n      type: type, decode: decode\n    })\n\n    return this\n  }\n\n  function register (type, constructor, encode, decode) {\n    assert(constructor, 'must have a constructor')\n    assert(encode, 'must have an encode function')\n    assert(type >= 0, 'must have a non-negative type')\n    assert(decode, 'must have a decode function')\n\n    function check (obj) {\n      return (obj instanceof constructor)\n    }\n\n    function reEncode (obj) {\n      var buf = bl()\n      var header = Buffer.allocUnsafe(1)\n\n      header.writeInt8(type, 0)\n\n      buf.append(header)\n      buf.append(encode(obj))\n\n      return buf\n    }\n\n    this.registerEncoder(check, reEncode)\n    this.registerDecoder(type, decode)\n\n    return this\n  }\n\n  return {\n    encode: buildEncode(encodingTypes, options.forceFloat64, options.compatibilityMode, options.disableTimestampEncoding),\n    decode: buildDecode(decodingTypes),\n    register: register,\n    registerEncoder: registerEncoder,\n    registerDecoder: registerDecoder,\n    encoder: streams.encoder,\n    decoder: streams.decoder,\n    // needed for levelup support\n    buffer: true,\n    type: 'msgpack5',\n    IncompleteBufferError: buildDecode.IncompleteBufferError\n  }\n}\n\nmodule.exports = msgpack\n"]},"metadata":{},"sourceType":"script"}