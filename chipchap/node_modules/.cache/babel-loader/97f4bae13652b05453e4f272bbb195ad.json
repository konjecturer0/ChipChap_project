{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\nvar when = require('when');\n\nvar util = require('../util.js');\n\nvar log = require('../log.js');\n\nvar serializer = require('../serializer.js');\n\nfunction Factory(options) {\n  var self = this;\n  util.assert(options.url !== undefined, \"options.url missing\");\n  util.assert(typeof options.url === \"string\", \"options.url must be a string\");\n  self._options = options;\n}\n\n;\nFactory.prototype.type = \"longpoll\";\n\nFactory.prototype.create = function () {\n  var self = this;\n  log.debug(\"longpoll.Factory.create\"); // the WAMP transport we create\n\n  var transport = {}; // these will get defined further below\n\n  transport.protocol = undefined;\n  transport.serializer = new serializer.JSONSerializer();\n  transport.send = undefined;\n  transport.close = undefined; // these will get overridden by the WAMP session using this transport\n\n  transport.onmessage = function () {};\n\n  transport.onopen = function () {};\n\n  transport.onclose = function () {};\n\n  transport.info = {\n    type: 'longpoll',\n    url: null,\n    protocol: 'wamp.2.json'\n  };\n\n  transport._run = function () {\n    var session_info = null;\n    var send_buffer = [];\n    var is_closing = false;\n    var txseq = 0;\n    var rxseq = 0;\n    var options = {\n      'protocols': ['wamp.2.json']\n    };\n    var request_timeout = self._options.request_timeout || 12000; // timeout here > than the 10s default in Crossbar.io\n\n    util.http_post(self._options.url + '/open', JSON.stringify(options), request_timeout).then(function (payload) {\n      session_info = JSON.parse(payload);\n      var base_url = self._options.url + '/' + session_info.transport;\n      transport.info.url = base_url;\n      log.debug(\"longpoll.Transport: open\", session_info);\n\n      transport.close = function (code, reason) {\n        if (is_closing) {\n          throw \"transport is already closing\";\n        }\n\n        is_closing = true;\n        util.http_post(base_url + '/close', null, request_timeout).then(function () {\n          log.debug(\"longpoll.Transport: transport closed\");\n          var details = {\n            code: 1000,\n            reason: \"transport closed\",\n            wasClean: true\n          };\n          transport.onclose(details);\n        }, function (err) {\n          log.debug(\"longpoll.Transport: could not close transport\", err.code, err.text);\n        });\n      };\n\n      transport.send = function (msg) {\n        if (is_closing) {\n          throw \"transport is closing or closed already\";\n        }\n\n        txseq += 1;\n        log.debug(\"longpoll.Transport: sending message ...\", msg);\n        var payload = JSON.stringify(msg);\n        util.http_post(base_url + '/send', payload, request_timeout).then(function () {\n          // ok, message sent\n          log.debug(\"longpoll.Transport: message sent\");\n        }, function (err) {\n          log.debug(\"longpoll.Transport: could not send message\", err.code, err.text);\n          is_closing = true;\n          var details = {\n            code: 1001,\n            reason: \"transport send failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n            wasClean: false\n          };\n          transport.onclose(details);\n        });\n      };\n\n      function receive() {\n        rxseq += 1;\n        log.debug(\"longpoll.Transport: polling for message ...\");\n        util.http_post(base_url + '/receive', null, request_timeout).then(function (payload) {\n          if (payload) {\n            var msg = JSON.parse(payload);\n            log.debug(\"longpoll.Transport: message received\", msg);\n            transport.onmessage(msg);\n          }\n\n          if (!is_closing) {\n            receive();\n          }\n        }, function (err) {\n          log.debug(\"longpoll.Transport: could not receive message\", err.code, err.text);\n          is_closing = true;\n          var details = {\n            code: 1001,\n            reason: \"transport receive failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n            wasClean: false\n          };\n          transport.onclose(details);\n        });\n      }\n\n      receive();\n      transport.onopen();\n    }, function (err) {\n      log.debug(\"longpoll.Transport: could not open transport\", err.code, err.text);\n      is_closing = true;\n      var details = {\n        code: 1001,\n        reason: \"transport open failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n        wasClean: false\n      };\n      transport.onclose(details);\n    });\n  };\n\n  transport._run();\n\n  return transport;\n};\n\nexports.Factory = Factory;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/autobahn/lib/transport/longpoll.js"],"names":["when","require","util","log","serializer","Factory","options","self","assert","url","undefined","_options","prototype","type","create","debug","transport","protocol","JSONSerializer","send","close","onmessage","onopen","onclose","info","_run","session_info","send_buffer","is_closing","txseq","rxseq","request_timeout","http_post","JSON","stringify","then","payload","parse","base_url","code","reason","details","wasClean","err","text","msg","receive","exports"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar when = require('when');\nvar util = require('../util.js');\nvar log = require('../log.js');\nvar serializer = require('../serializer.js');\n\n\nfunction Factory (options) {\n   var self = this;\n\n   util.assert(options.url !== undefined, \"options.url missing\");\n   util.assert(typeof options.url === \"string\", \"options.url must be a string\");\n\n   self._options = options;\n};\n\n\nFactory.prototype.type = \"longpoll\";\n\n\nFactory.prototype.create = function () {\n\n   var self = this;\n\n   log.debug(\"longpoll.Factory.create\");\n\n   // the WAMP transport we create\n   var transport = {};\n\n   // these will get defined further below\n   transport.protocol = undefined;\n   transport.serializer = new serializer.JSONSerializer();\n   transport.send = undefined;\n   transport.close = undefined;\n\n   // these will get overridden by the WAMP session using this transport\n   transport.onmessage = function () {};\n   transport.onopen = function () {};\n   transport.onclose = function () {};\n\n   transport.info = {\n      type: 'longpoll',\n      url: null,\n      protocol: 'wamp.2.json'\n   };\n\n   transport._run = function () {\n\n      var session_info = null;\n      var send_buffer = [];\n      var is_closing = false;\n\n      var txseq = 0;\n      var rxseq = 0;\n\n      var options = {'protocols': ['wamp.2.json']};\n      var request_timeout = self._options.request_timeout || 12000; // timeout here > than the 10s default in Crossbar.io\n\n      util.http_post(self._options.url + '/open', JSON.stringify(options), request_timeout).then(\n\n         function (payload) {\n\n            session_info = JSON.parse(payload);\n            var base_url = self._options.url + '/' + session_info.transport;\n\n            transport.info.url = base_url;\n\n            log.debug(\"longpoll.Transport: open\", session_info);\n\n            transport.close = function (code, reason) {\n\n               if (is_closing) {\n                  throw \"transport is already closing\";\n               }\n\n               is_closing = true;\n\n               util.http_post(base_url + '/close', null, request_timeout).then(\n\n                  function () {\n                     log.debug(\"longpoll.Transport: transport closed\");\n                     var details = {\n                        code: 1000,\n                        reason: \"transport closed\",\n                        wasClean: true\n                     }\n                     transport.onclose(details);\n                  },\n\n                  function (err) {\n                     log.debug(\"longpoll.Transport: could not close transport\", err.code, err.text);\n                  }\n               );\n            }\n\n            transport.send = function (msg) {\n\n               if (is_closing) {\n                  throw \"transport is closing or closed already\";\n               }\n\n               txseq += 1;\n\n               log.debug(\"longpoll.Transport: sending message ...\", msg);\n\n               var payload = JSON.stringify(msg);\n\n               util.http_post(base_url + '/send', payload, request_timeout).then(\n\n                  function () {\n                     // ok, message sent\n                     log.debug(\"longpoll.Transport: message sent\");\n                  },\n\n                  function (err) {\n                     log.debug(\"longpoll.Transport: could not send message\", err.code, err.text);\n\n                     is_closing = true;\n                     var details = {\n                        code: 1001,\n                        reason: \"transport send failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n                        wasClean: false\n                     }\n                     transport.onclose(details);\n                  }\n               );\n            };\n\n            function receive() {\n\n               rxseq += 1;\n\n               log.debug(\"longpoll.Transport: polling for message ...\");\n\n               util.http_post(base_url + '/receive', null, request_timeout).then(\n\n                  function (payload) {\n\n                     if (payload) {\n\n                        var msg = JSON.parse(payload);\n\n                        log.debug(\"longpoll.Transport: message received\", msg);\n\n                        transport.onmessage(msg);\n                     }\n\n                     if (!is_closing) {\n                        receive();\n                     }\n                  },\n\n                  function (err) {\n                     log.debug(\"longpoll.Transport: could not receive message\", err.code, err.text);\n\n                     is_closing = true;\n                     var details = {\n                        code: 1001,\n                        reason: \"transport receive failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n                        wasClean: false\n                     }\n                     transport.onclose(details);\n                  }\n               );\n            }\n\n            receive();\n\n            transport.onopen();\n         },\n\n         function (err) {\n            log.debug(\"longpoll.Transport: could not open transport\", err.code, err.text);\n\n            is_closing = true;\n            var details = {\n               code: 1001,\n               reason: \"transport open failure (HTTP/POST status \" + err.code + \" - '\" + err.text + \"')\",\n               wasClean: false\n            }\n            transport.onclose(details);\n         }\n      );\n   }\n\n   transport._run();\n\n   return transport;\n};\n\n\nexports.Factory = Factory;\n"]},"metadata":{},"sourceType":"script"}