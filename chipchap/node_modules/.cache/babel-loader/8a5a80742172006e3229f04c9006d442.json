{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n// require('assert') would be nice .. but it does not\n// work with Google Closure after Browserify\nvar when = require('when');\n\nvar when_fn = require(\"when/function\");\n\nvar log = require('./log.js');\n\nvar util = require('./util.js'); // IE fallback (http://afuchs.tumblr.com/post/23550124774/date-now-in-ie8)\n\n\nDate.now = Date.now || function () {\n  return +new Date();\n}; // WAMP \"Advanced Profile\" support in AutobahnJS per role\n//\n\n\nvar WAMP_FEATURES = {\n  caller: {\n    features: {\n      caller_identification: true,\n      //call_timeout: true,\n      call_canceling: true,\n      progressive_call_results: true\n    }\n  },\n  callee: {\n    features: {\n      caller_identification: true,\n      //call_trustlevels: true,\n      pattern_based_registration: true,\n      shared_registration: true,\n      //call_timeout: true,\n      //call_canceling: true,\n      progressive_call_results: true,\n      registration_revocation: true\n    }\n  },\n  publisher: {\n    features: {\n      publisher_identification: true,\n      subscriber_blackwhite_listing: true,\n      publisher_exclusion: true\n    }\n  },\n  subscriber: {\n    features: {\n      publisher_identification: true,\n      //publication_trustlevels: true,\n      pattern_based_subscription: true,\n      subscription_revocation: true //event_history: true,\n\n    }\n  }\n};\n\nvar Invocation = function (procedure, progress, caller, caller_authid, caller_authrole) {\n  var self = this;\n  self.procedure = procedure;\n  self.progress = progress;\n  self.caller = caller;\n  self.caller_authid = caller_authid;\n  self.caller_authrole = caller_authrole;\n};\n\nvar Event = function (publication, topic, publisher, publisher_authid, publisher_authrole, retained, forward_for) {\n  var self = this;\n  self.publication = publication;\n  self.topic = topic;\n  self.publisher = publisher;\n  self.publisher_authid = publisher_authid;\n  self.publisher_authrole = publisher_authrole;\n  self.retained = retained;\n  self.forward_for = forward_for;\n};\n\nvar Result = function (args, kwargs) {\n  var self = this;\n  self.args = args || [];\n  self.kwargs = kwargs || {};\n};\n\nvar Error = function (error, args, kwargs) {\n  var self = this;\n  self.error = error;\n  self.args = args || [];\n  self.kwargs = kwargs || {};\n};\n\nvar Subscription = function (topic, handler, options, session, id) {\n  var self = this;\n  self.topic = topic;\n  self.handler = handler;\n  self.options = options || {};\n  self.session = session;\n  self.id = id;\n  self.active = true; // this will fire when the handler is unsubscribed\n\n  self._on_unsubscribe = session._defer();\n\n  if (self._on_unsubscribe.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    self.on_unsubscribe = self._on_unsubscribe.promise;\n  } else {\n    self.on_unsubscribe = self._on_unsubscribe;\n  }\n};\n\nSubscription.prototype.unsubscribe = function () {\n  var self = this;\n  return self.session.unsubscribe(self);\n};\n\nvar Registration = function (procedure, endpoint, options, session, id) {\n  var self = this;\n  self.procedure = procedure;\n  self.endpoint = endpoint;\n  self.options = options || {};\n  self.session = session;\n  self.id = id;\n  self.active = true; // this will fire when the endpoint is unregistered\n\n  self._on_unregister = session._defer();\n\n  if (self._on_unregister.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    self.on_unregister = self._on_unregister.promise;\n  } else {\n    self.on_unregister = self._on_unregister;\n  }\n};\n\nRegistration.prototype.unregister = function () {\n  var self = this;\n  return self.session.unregister(self);\n};\n\nvar Publication = function (id) {\n  var self = this;\n  self.id = id;\n};\n\nvar MSG_TYPE = {\n  HELLO: 1,\n  WELCOME: 2,\n  ABORT: 3,\n  CHALLENGE: 4,\n  AUTHENTICATE: 5,\n  GOODBYE: 6,\n  HEARTBEAT: 7,\n  ERROR: 8,\n  PUBLISH: 16,\n  PUBLISHED: 17,\n  SUBSCRIBE: 32,\n  SUBSCRIBED: 33,\n  UNSUBSCRIBE: 34,\n  UNSUBSCRIBED: 35,\n  EVENT: 36,\n  CALL: 48,\n  CANCEL: 49,\n  RESULT: 50,\n  REGISTER: 64,\n  REGISTERED: 65,\n  UNREGISTER: 66,\n  UNREGISTERED: 67,\n  INVOCATION: 68,\n  INTERRUPT: 69,\n  YIELD: 70\n};\n\nvar Session = function (socket, defer, onchallenge, on_user_error, on_internal_error) {\n  var self = this; // the transport connection (WebSocket object)\n\n  self._socket = socket; // the Deferred factory to use\n\n  self._defer = defer; // the WAMP authentication challenge handler\n\n  self._onchallenge = onchallenge; // custom error handlers\n\n  self._on_user_error = on_user_error;\n  self._on_internal_error = on_internal_error; // the WAMP session ID\n\n  self._id = null; // the WAMP realm joined\n\n  self._realm = null; // the WAMP features in use\n\n  self._features = null; // closing state\n\n  self._goodbye_sent = false;\n  self._transport_is_closing = false; // outstanding requests;\n\n  self._publish_reqs = {};\n  self._subscribe_reqs = {};\n  self._unsubscribe_reqs = {};\n  self._call_reqs = {};\n  self._register_reqs = {};\n  self._unregister_reqs = {}; // subscriptions in place;\n\n  self._subscriptions = {}; // registrations in place;\n\n  self._registrations = {}; // incoming invocations;\n\n  self._invocations = {}; // prefix shortcuts for URIs\n\n  self._prefixes = {}; // the defaults for 'disclose_me'\n\n  self._caller_disclose_me = false;\n  self._publisher_disclose_me = false;\n\n  self._send_wamp = function (msg) {\n    log.debug(msg); // forward WAMP message to be sent to WAMP transport\n\n    self._socket.send(msg);\n  };\n\n  self._protocol_violation = function (reason) {\n    self._socket.close(3002, \"protocol violation: \" + reason);\n\n    util.handle_error(self._on_internal_error, Error(\"failing transport due to protocol violation: \" + reason));\n  };\n\n  self._MESSAGE_MAP = {};\n  self._MESSAGE_MAP[MSG_TYPE.ERROR] = {};\n  var next_req_id = 0;\n\n  self._new_request_id = function () {\n    if (next_req_id < 9007199254740992) {\n      next_req_id += 1;\n    } else {\n      next_req_id = 1;\n    }\n\n    return next_req_id;\n  };\n\n  self._process_SUBSCRIBED = function (msg) {\n    //\n    // process SUBSCRIBED reply to SUBSCRIBE\n    //\n    var request = msg[1];\n    var subscription = msg[2];\n\n    if (request in self._subscribe_reqs) {\n      var r = self._subscribe_reqs[request];\n      var d = r[0];\n      var topic = r[1];\n      var handler = r[2];\n      var options = r[3];\n\n      if (!(subscription in self._subscriptions)) {\n        self._subscriptions[subscription] = [];\n      }\n\n      var sub = new Subscription(topic, handler, options, self, subscription);\n\n      self._subscriptions[subscription].push(sub);\n\n      d.resolve(sub);\n      delete self._subscribe_reqs[request];\n    } else {\n      self._protocol_violation(\"SUBSCRIBED received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.SUBSCRIBED] = self._process_SUBSCRIBED;\n\n  self._process_SUBSCRIBE_ERROR = function (msg) {\n    //\n    // process ERROR reply to SUBSCRIBE\n    //\n    var request = msg[2];\n\n    if (request in self._subscribe_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._subscribe_reqs[request];\n      var d = r[0];\n      d.reject(error);\n      delete self._subscribe_reqs[request];\n    } else {\n      self._protocol_violation(\"SUBSCRIBE-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.SUBSCRIBE] = self._process_SUBSCRIBE_ERROR;\n\n  self._process_UNSUBSCRIBED = function (msg) {\n    //\n    // process UNSUBSCRIBED reply to UNSUBSCRIBE\n    //\n    var request = msg[1];\n\n    if (request in self._unsubscribe_reqs) {\n      var r = self._unsubscribe_reqs[request];\n      var d = r[0];\n      var subscription_id = r[1];\n\n      if (subscription_id in self._subscriptions) {\n        var subs = self._subscriptions[subscription_id]; // the following should actually be NOP, since UNSUBSCRIBE was\n        // only sent when subs got empty\n\n        for (var i = 0; i < subs.length; ++i) {\n          subs[i].active = false;\n\n          subs[i]._on_unsubscribe.resolve();\n        }\n\n        delete self._subscriptions[subscription_id];\n      }\n\n      d.resolve(true);\n      delete self._unsubscribe_reqs[request];\n    } else {\n      if (request === 0) {\n        // router actively revoked our subscription\n        //\n        var details = msg[2];\n        var subscription_id = details.subscription;\n        var reason = details.reason;\n\n        if (subscription_id in self._subscriptions) {\n          var subs = self._subscriptions[subscription_id];\n\n          for (var i = 0; i < subs.length; ++i) {\n            subs[i].active = false;\n\n            subs[i]._on_unsubscribe.resolve(reason);\n          }\n\n          delete self._subscriptions[subscription_id];\n        } else {\n          self._protocol_violation(\"non-voluntary UNSUBSCRIBED received for non-existing subscription ID \" + subscription_id);\n        }\n      } else {\n        self._protocol_violation(\"UNSUBSCRIBED received for non-pending request ID \" + request);\n      }\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.UNSUBSCRIBED] = self._process_UNSUBSCRIBED;\n\n  self._process_UNSUBSCRIBE_ERROR = function (msg) {\n    //\n    // process ERROR reply to UNSUBSCRIBE\n    //\n    var request = msg[2];\n\n    if (request in self._unsubscribe_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._unsubscribe_reqs[request];\n      var d = r[0];\n      var subscription = r[1];\n      d.reject(error);\n      delete self._unsubscribe_reqs[request];\n    } else {\n      self._protocol_violation(\"UNSUBSCRIBE-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNSUBSCRIBE] = self._process_UNSUBSCRIBE_ERROR;\n\n  self._process_PUBLISHED = function (msg) {\n    //\n    // process PUBLISHED reply to PUBLISH\n    //\n    var request = msg[1];\n    var publication = msg[2];\n\n    if (request in self._publish_reqs) {\n      var r = self._publish_reqs[request];\n      var d = r[0];\n      var options = r[1];\n      var pub = new Publication(publication);\n      d.resolve(pub);\n      delete self._publish_reqs[request];\n    } else {\n      self._protocol_violation(\"PUBLISHED received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.PUBLISHED] = self._process_PUBLISHED;\n\n  self._process_PUBLISH_ERROR = function (msg) {\n    //\n    // process ERROR reply to PUBLISH\n    //\n    var request = msg[2];\n\n    if (request in self._publish_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._publish_reqs[request];\n      var d = r[0];\n      var options = r[1];\n      d.reject(error);\n      delete self._publish_reqs[request];\n    } else {\n      self._protocol_violation(\"PUBLISH-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.PUBLISH] = self._process_PUBLISH_ERROR;\n\n  self._process_EVENT = function (msg) {\n    //\n    // process EVENT message\n    //\n    // [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentsKw|dict]\n    var subscription = msg[1];\n\n    if (subscription in self._subscriptions) {\n      var publication = msg[2];\n      var details = msg[3];\n      var args = msg[4] || [];\n      var kwargs = msg[5] || {};\n      var subs = self._subscriptions[subscription]; // we want to provide the subscription topic to the handler, and may need to get this\n      // from one of the subscription handler objects attached to the subscription\n      // since for non-pattern subscriptions this is not sent over the wire\n\n      var ed = new Event(publication, details.topic || subs[0] && subs[0].topic, details.publisher, details.publisher_authid, details.publisher_authrole, details.retained || false, details.forward_for);\n\n      for (var i = 0; i < subs.length; ++i) {\n        var sub = subs[i];\n\n        try {\n          sub.handler(args, kwargs, ed, sub);\n        } catch (e) {\n          util.handle_error(self._on_user_error, e, \"Exception raised in event handler:\");\n        }\n      }\n    } else {\n      self._protocol_violation(\"EVENT received for non-subscribed subscription ID \" + subscription);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.EVENT] = self._process_EVENT;\n\n  self._process_REGISTERED = function (msg) {\n    //\n    // process REGISTERED reply to REGISTER\n    //\n    var request = msg[1];\n    var registration = msg[2];\n\n    if (request in self._register_reqs) {\n      var r = self._register_reqs[request];\n      var d = r[0];\n      var procedure = r[1];\n      var endpoint = r[2];\n      var options = r[3];\n      var reg = new Registration(procedure, endpoint, options, self, registration);\n      self._registrations[registration] = reg;\n      d.resolve(reg);\n      delete self._register_reqs[request];\n    } else {\n      self._protocol_violation(\"REGISTERED received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.REGISTERED] = self._process_REGISTERED;\n\n  self._process_REGISTER_ERROR = function (msg) {\n    //\n    // process ERROR reply to REGISTER\n    //\n    var request = msg[2];\n\n    if (request in self._register_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._register_reqs[request];\n      var d = r[0];\n      d.reject(error);\n      delete self._register_reqs[request];\n    } else {\n      self._protocol_violation(\"REGISTER-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.REGISTER] = self._process_REGISTER_ERROR;\n\n  self._process_UNREGISTERED = function (msg) {\n    //\n    // process UNREGISTERED reply to UNREGISTER\n    //\n    var request = msg[1];\n\n    if (request in self._unregister_reqs) {\n      var r = self._unregister_reqs[request];\n      var d = r[0];\n      var registration = r[1];\n\n      if (registration.id in self._registrations) {\n        delete self._registrations[registration.id];\n      }\n\n      registration.active = false;\n      d.resolve();\n      delete self._unregister_reqs[request];\n    } else {\n      if (request === 0) {\n        // the router actively revoked our registration\n        //\n        var details = msg[2];\n        var registration_id = details.registration;\n        var reason = details.reason;\n\n        if (registration_id in self._registrations) {\n          var registration = self._registrations[registration_id];\n          registration.active = false;\n\n          registration._on_unregister.resolve(reason);\n\n          delete self._registrations[registration_id];\n        } else {\n          self._protocol_violation(\"non-voluntary UNREGISTERED received for non-existing registration ID \" + registration_id);\n        }\n      } else {\n        self._protocol_violation(\"UNREGISTERED received for non-pending request ID \" + request);\n      }\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.UNREGISTERED] = self._process_UNREGISTERED;\n\n  self._process_UNREGISTER_ERROR = function (msg) {\n    //\n    // process ERROR reply to UNREGISTER\n    //\n    var request = msg[2];\n\n    if (request in self._unregister_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._unregister_reqs[request];\n      var d = r[0];\n      var registration = r[1];\n      d.reject(error);\n      delete self._unregister_reqs[request];\n    } else {\n      self._protocol_violation(\"UNREGISTER-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNREGISTER] = self._process_UNREGISTER_ERROR;\n\n  self._process_RESULT = function (msg) {\n    //\n    // process RESULT reply to CALL\n    //\n    var request = msg[1];\n\n    if (request in self._call_reqs) {\n      var details = msg[2];\n      var args = msg[3] || [];\n      var kwargs = msg[4] || {}; // maybe wrap complex result:\n\n      var result = null;\n\n      if (args.length > 1 || Object.keys(kwargs).length > 0) {\n        // wrap complex result is more than 1 positional result OR\n        // non-empty keyword result\n        result = new Result(args, kwargs);\n      } else if (args.length > 0) {\n        // single positional result\n        result = args[0];\n      }\n\n      var r = self._call_reqs[request];\n      var d = r[0];\n      var options = r[1];\n\n      if (details.progress) {\n        if (options && options.receive_progress) {\n          d.notify(result);\n        }\n      } else {\n        d.resolve(result);\n        delete self._call_reqs[request];\n      }\n    } else {\n      self._protocol_violation(\"CALL-RESULT received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.RESULT] = self._process_RESULT;\n\n  self._process_CALL_ERROR = function (msg) {\n    //\n    // process ERROR reply to CALL\n    //\n    var request = msg[2];\n\n    if (request in self._call_reqs) {\n      var details = msg[3];\n      var error = new Error(msg[4], msg[5], msg[6]);\n      var r = self._call_reqs[request];\n      var d = r[0];\n      var options = r[1];\n      d.reject(error);\n      delete self._call_reqs[request];\n    } else {\n      self._protocol_violation(\"CALL-ERROR received for non-pending request ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.CALL] = self._process_CALL_ERROR;\n\n  self._process_INVOCATION = function (msg) {\n    //\n    // process INVOCATION message\n    //\n    // [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n    //\n    var request = msg[1];\n    var registration = msg[2];\n    var details = msg[3]; // receive_progress\n    // timeout\n    // caller\n\n    if (registration in self._registrations) {\n      var reg = self._registrations[registration];\n      var args = msg[4] || [];\n      var kwargs = msg[5] || {}; // create progress function for invocation\n      //\n\n      var progress = null;\n\n      if (details.receive_progress) {\n        progress = function (args, kwargs) {\n          var progress_msg = [MSG_TYPE.YIELD, request, {\n            progress: true\n          }];\n          args = args || [];\n          kwargs = kwargs || {};\n          var kwargs_len = Object.keys(kwargs).length;\n\n          if (args.length || kwargs_len) {\n            progress_msg.push(args);\n\n            if (kwargs_len) {\n              progress_msg.push(kwargs);\n            }\n          }\n\n          self._send_wamp(progress_msg);\n        };\n      } // we want to provide the regitration procedure to the handler and may\n      // need to get this from the registration object attached to the registration\n      // since for non-pattern registrations this is not sent over the wire\n\n\n      var cd = new Invocation(details.procedure || reg.procedure, progress, details.caller, details.caller_authid, details.caller_authrole); // We use the following whenjs call wrapper, which automatically\n      // wraps a plain, non-promise value in a (immediately resolved) promise\n      //\n      // See: https://github.com/cujojs/when/blob/master/docs/api.md#fncall\n      //\n\n      when_fn.call(reg.endpoint, args, kwargs, cd).then(function (res) {\n        // construct YIELD message\n        // FIXME: Options\n        //\n        var reply = [MSG_TYPE.YIELD, request, {}];\n\n        if (res instanceof Result) {\n          var kwargs_len = Object.keys(res.kwargs).length;\n\n          if (res.args.length || kwargs_len) {\n            reply.push(res.args);\n\n            if (kwargs_len) {\n              reply.push(res.kwargs);\n            }\n          }\n        } else {\n          reply.push([res]);\n        } // send WAMP message\n        //\n\n\n        self._send_wamp(reply);\n      }, function (err) {\n        // construct ERROR message\n        // [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri, Arguments|list, ArgumentsKw|dict]\n        var reply = [MSG_TYPE.ERROR, MSG_TYPE.INVOCATION, request, {}];\n\n        if (err instanceof Error) {\n          reply.push(err.error);\n          var kwargs_len = Object.keys(err.kwargs).length;\n\n          if (err.args.length || kwargs_len) {\n            reply.push(err.args);\n\n            if (kwargs_len) {\n              reply.push(err.kwargs);\n            }\n          }\n        } else {\n          reply.push('wamp.error.runtime_error');\n          reply.push([err]);\n        } // send WAMP message\n        //\n\n\n        self._send_wamp(reply);\n\n        util.handle_error(self._on_user_error, err, \"Exception raised in invocation handler:\");\n      });\n    } else {\n      self._protocol_violation(\"INVOCATION received for non-registered registration ID \" + request);\n    }\n  };\n\n  self._MESSAGE_MAP[MSG_TYPE.INVOCATION] = self._process_INVOCATION; // callback fired by WAMP transport on receiving a WAMP message\n  //\n\n  self._socket.onmessage = function (msg) {\n    var msg_type = msg[0]; // WAMP session not yet open\n    //\n\n    if (!self._id) {\n      // the first message must be WELCOME, ABORT or CHALLENGE ..\n      //\n      if (msg_type === MSG_TYPE.WELCOME) {\n        self._id = msg[1]; // determine actual set of advanced features that can be used\n        //\n\n        var rf = msg[2];\n        self._features = {};\n\n        if (rf.roles.broker) {\n          // \"Basic Profile\" is mandatory\n          self._features.subscriber = {};\n          self._features.publisher = {}; // fill in features that both peers support\n\n          if (rf.roles.broker.features) {\n            for (var att in WAMP_FEATURES.publisher.features) {\n              self._features.publisher[att] = WAMP_FEATURES.publisher.features[att] && rf.roles.broker.features[att];\n            }\n\n            for (var att in WAMP_FEATURES.subscriber.features) {\n              self._features.subscriber[att] = WAMP_FEATURES.subscriber.features[att] && rf.roles.broker.features[att];\n            }\n          }\n        }\n\n        if (rf.roles.dealer) {\n          // \"Basic Profile\" is mandatory\n          self._features.caller = {};\n          self._features.callee = {}; // fill in features that both peers support\n\n          if (rf.roles.dealer.features) {\n            for (var att in WAMP_FEATURES.caller.features) {\n              self._features.caller[att] = WAMP_FEATURES.caller.features[att] && rf.roles.dealer.features[att];\n            }\n\n            for (var att in WAMP_FEATURES.callee.features) {\n              self._features.callee[att] = WAMP_FEATURES.callee.features[att] && rf.roles.dealer.features[att];\n            }\n          }\n        }\n\n        if (self.onjoin) {\n          self.onjoin(msg[2]);\n        }\n      } else if (msg_type === MSG_TYPE.ABORT) {\n        var details = msg[1];\n        var reason = msg[2];\n\n        if (self.onleave) {\n          self.onleave(reason, details);\n        }\n      } else if (msg_type === MSG_TYPE.CHALLENGE) {\n        if (self._onchallenge) {\n          var method = msg[1];\n          var extra = msg[2];\n          when_fn.call(self._onchallenge, self, method, extra).then(function (signature) {\n            if (typeof signature === \"string\") {\n              var msg = [MSG_TYPE.AUTHENTICATE, signature, {}];\n            } else if (typeof signature === \"object\") {\n              var signatureString = signature[0];\n              var authExtra = signature[1];\n              var msg = [MSG_TYPE.AUTHENTICATE, signatureString, authExtra];\n            }\n\n            self._send_wamp(msg);\n          }, function (err) {\n            util.handle_error(self._on_user_error, err, \"onchallenge() raised: \");\n            var msg = [MSG_TYPE.ABORT, {\n              message: \"sorry, I cannot authenticate (onchallenge handler raised an exception)\"\n            }, \"wamp.error.cannot_authenticate\"];\n\n            self._send_wamp(msg);\n\n            self._socket.close(3000);\n          });\n        } else {\n          util.handle_error(self._on_internal_error, Error(\"received WAMP challenge, but no onchallenge() handler set\"));\n          var msg = [MSG_TYPE.ABORT, {\n            message: \"sorry, I cannot authenticate (no onchallenge handler set)\"\n          }, \"wamp.error.cannot_authenticate\"];\n\n          self._send_wamp(msg);\n\n          self._socket.close(3000);\n        }\n      } else {\n        self._protocol_violation(\"unexpected message type \" + msg_type);\n      } // WAMP session is open\n      //\n\n    } else {\n      if (msg_type === MSG_TYPE.GOODBYE) {\n        if (!self._goodbye_sent) {\n          var reply = [MSG_TYPE.GOODBYE, {}, \"wamp.error.goodbye_and_out\"];\n\n          self._send_wamp(reply);\n        }\n\n        self._id = null;\n        self._realm = null;\n        self._features = null;\n        var details = msg[1];\n        var reason = msg[2];\n\n        if (self.onleave) {\n          self.onleave(reason, details);\n        }\n      } else {\n        if (msg_type === MSG_TYPE.ERROR) {\n          var request_type = msg[1];\n\n          if (request_type in self._MESSAGE_MAP[MSG_TYPE.ERROR]) {\n            self._MESSAGE_MAP[msg_type][request_type](msg);\n          } else {\n            self._protocol_violation(\"unexpected ERROR message with request_type \" + request_type);\n          }\n        } else {\n          if (msg_type in self._MESSAGE_MAP) {\n            self._MESSAGE_MAP[msg_type](msg);\n          } else {\n            self._protocol_violation(\"unexpected message type \" + msg_type);\n          }\n        }\n      }\n    }\n  }; // session object constructed .. track creation time\n  //\n\n\n  if ('performance' in global && 'now' in performance) {\n    self._created = performance.now();\n  } else {\n    self._created = Date.now();\n  }\n};\n\nObject.defineProperty(Session.prototype, \"defer\", {\n  get: function () {\n    return this._defer;\n  }\n});\nObject.defineProperty(Session.prototype, \"id\", {\n  get: function () {\n    return this._id;\n  }\n});\nObject.defineProperty(Session.prototype, \"realm\", {\n  get: function () {\n    return this._realm;\n  }\n});\nObject.defineProperty(Session.prototype, \"isOpen\", {\n  get: function () {\n    return this.id !== null;\n  }\n});\nObject.defineProperty(Session.prototype, \"features\", {\n  get: function () {\n    return this._features;\n  }\n});\nObject.defineProperty(Session.prototype, \"caller_disclose_me\", {\n  get: function () {\n    return this._caller_disclose_me;\n  },\n  set: function (newValue) {\n    this._caller_disclose_me = newValue;\n  }\n});\nObject.defineProperty(Session.prototype, \"publisher_disclose_me\", {\n  get: function () {\n    return this._publisher_disclose_me;\n  },\n  set: function (newValue) {\n    this._publisher_disclose_me = newValue;\n  }\n});\nObject.defineProperty(Session.prototype, \"subscriptions\", {\n  get: function () {\n    var keys = Object.keys(this._subscriptions);\n    var vals = [];\n\n    for (var i = 0; i < keys.length; ++i) {\n      vals.push(this._subscriptions[keys[i]]);\n    }\n\n    return vals;\n  }\n});\nObject.defineProperty(Session.prototype, \"registrations\", {\n  get: function () {\n    var keys = Object.keys(this._registrations);\n    var vals = [];\n\n    for (var i = 0; i < keys.length; ++i) {\n      vals.push(this._registrations[keys[i]]);\n    }\n\n    return vals;\n  }\n});\n\nSession.prototype.log = function () {\n  var self = this;\n\n  if ('console' in global) {\n    var header = null;\n\n    if (self._id && self._created) {\n      var now = null;\n\n      if ('performance' in global && 'now' in performance) {\n        now = performance.now() - self._created;\n      } else {\n        now = Date.now() - self._created;\n      }\n\n      header = \"WAMP session \" + self._id + \" on '\" + self._realm + \"' at \" + Math.round(now * 1000) / 1000 + \" ms\";\n    } else {\n      header = \"WAMP session\";\n    }\n\n    if ('group' in console) {\n      console.group(header);\n\n      for (var i = 0; i < arguments.length; i += 1) {\n        console.log(arguments[i]);\n      }\n\n      console.groupEnd();\n    } else {\n      var items = [header + \": \"];\n\n      for (var i = 0; i < arguments.length; i += 1) {\n        items.push(arguments[i]);\n      }\n\n      console.log.apply(console, items);\n    }\n  }\n};\n\nSession.prototype.join = function (realm, authmethods, authid, authextra) {\n  util.assert(!realm || typeof realm === 'string', \"Session.join: <realm> must be a string\");\n  util.assert(!authmethods || Array.isArray(authmethods), \"Session.join: <authmethods> must be an array []\");\n  util.assert(!authid || typeof authid === 'string', \"Session.join: <authid> must be a string\");\n  var self = this;\n\n  if (self.isOpen) {\n    throw \"session already open\";\n  }\n\n  self._goodbye_sent = false;\n  self._realm = realm;\n  var details = {};\n  details.roles = WAMP_FEATURES;\n\n  if (authmethods) {\n    details.authmethods = authmethods;\n  }\n\n  if (authid) {\n    details.authid = authid;\n  }\n\n  if (authextra) {\n    details.authextra = authextra;\n  }\n\n  var msg = [MSG_TYPE.HELLO, realm, details];\n\n  self._send_wamp(msg);\n};\n\nSession.prototype.leave = function (reason, message) {\n  util.assert(!reason || typeof reason === 'string', \"Session.leave: <reason> must be a string\");\n  util.assert(!message || typeof message === 'string', \"Session.leave: <message> must be a string\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  }\n\n  if (!reason) {\n    reason = \"wamp.close.normal\";\n  }\n\n  var details = {};\n\n  if (message) {\n    details.message = message;\n  }\n\n  var msg = [MSG_TYPE.GOODBYE, details, reason];\n\n  self._send_wamp(msg);\n\n  self._goodbye_sent = true;\n};\n\nSession.prototype.call = function (procedure, args, kwargs, options) {\n  util.assert(typeof procedure === 'string', \"Session.call: <procedure> must be a string\");\n  util.assert(!args || Array.isArray(args), \"Session.call: <args> must be an array []\");\n  util.assert(!kwargs || util.is_object(kwargs), \"Session.call: <kwargs> must be an object {}\");\n  util.assert(!options || util.is_object(options), \"Session.call: <options> must be an object {}\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  }\n\n  options = options || {}; // only set option if user hasn't set a value and global option is \"on\"\n\n  if (options.disclose_me === undefined && self._caller_disclose_me) {\n    options.disclose_me = true;\n  } // create and remember new CALL request\n  //\n\n\n  var d = self._defer();\n\n  var request = self._new_request_id();\n\n  self._call_reqs[request] = [d, options]; // construct CALL message\n  //\n\n  var msg = [MSG_TYPE.CALL, request, options, self.resolve(procedure)];\n\n  if (args) {\n    msg.push(args);\n\n    if (kwargs) {\n      msg.push(kwargs);\n    }\n  } else if (kwargs) {\n    msg.push([]);\n    msg.push(kwargs);\n  } // send WAMP message\n  //\n\n\n  self._send_wamp(msg);\n\n  var userPromise;\n\n  if (d.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    userPromise = d.promise;\n  } else {\n    userPromise = d;\n  }\n\n  userPromise.cancel = function (cancelOptions) {\n    // Cancel the call\n    //\n    var cancelMsg = [MSG_TYPE.CANCEL, request, cancelOptions || {}];\n\n    self._send_wamp(cancelMsg);\n\n    if (request in self._call_reqs && (!cancelOptions || !cancelOptions.mode || cancelOptions.mode !== \"kill\")) {\n      // When the mode is not 'kill' it will never receive a call result.\n      // So when the request was still in the list, reject and remove it.\n      var cancelledDefer = self._call_reqs[request][0];\n      cancelledDefer.reject(new Error(\"Cancelled\"));\n      delete self._call_reqs[request];\n    }\n  };\n\n  return userPromise;\n};\n\nSession.prototype.publish = function (topic, args, kwargs, options) {\n  util.assert(typeof topic === 'string', \"Session.publish: <topic> must be a string\");\n  util.assert(!args || Array.isArray(args), \"Session.publish: <args> must be an array []\");\n  util.assert(!kwargs || util.is_object(kwargs), \"Session.publish: <kwargs> must be an object {}\");\n  util.assert(!options || util.is_object(options), \"Session.publish: <options> must be an object {}\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  }\n\n  options = options || {}; // only set option if user hasn't set a value and global option is \"on\"\n\n  if (options.disclose_me === undefined && self._publisher_disclose_me) {\n    options.disclose_me = true;\n  } // create and remember new PUBLISH request\n  //\n\n\n  var d = null;\n\n  var request = self._new_request_id();\n\n  if (options.acknowledge) {\n    d = self._defer();\n    self._publish_reqs[request] = [d, options];\n  } // construct PUBLISH message\n  //\n\n\n  var msg = [MSG_TYPE.PUBLISH, request, options, self.resolve(topic)];\n\n  if (args) {\n    msg.push(args);\n\n    if (kwargs) {\n      msg.push(kwargs);\n    }\n  } else if (kwargs) {\n    msg.push([]);\n    msg.push(kwargs);\n  } // send WAMP message\n  //\n\n\n  self._send_wamp(msg);\n\n  if (d) {\n    if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      return d.promise;\n    } else {\n      return d;\n    }\n  }\n};\n\nSession.prototype.subscribe = function (topic, handler, options) {\n  util.assert(typeof topic === 'string', \"Session.subscribe: <topic> must be a string\");\n  util.assert(typeof handler === 'function', \"Session.subscribe: <handler> must be a function\");\n  util.assert(!options || util.is_object(options), \"Session.subscribe: <options> must be an object {}\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  } // create an remember new SUBSCRIBE request\n  //\n\n\n  var request = self._new_request_id();\n\n  var d = self._defer();\n\n  self._subscribe_reqs[request] = [d, topic, handler, options]; // construct SUBSCRIBE message\n  //\n\n  var msg = [MSG_TYPE.SUBSCRIBE, request];\n\n  if (options) {\n    msg.push(options);\n  } else {\n    msg.push({});\n  }\n\n  msg.push(self.resolve(topic)); // send WAMP message\n  //\n\n  self._send_wamp(msg);\n\n  if (d.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    return d.promise;\n  } else {\n    return d;\n  }\n};\n\nSession.prototype.register = function (procedure, endpoint, options) {\n  util.assert(typeof procedure === 'string', \"Session.register: <procedure> must be a string\");\n  util.assert(typeof endpoint === 'function', \"Session.register: <endpoint> must be a function\");\n  util.assert(!options || util.is_object(options), \"Session.register: <options> must be an object {}\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  } // create an remember new REGISTER request\n  //\n\n\n  var request = self._new_request_id();\n\n  var d = self._defer();\n\n  self._register_reqs[request] = [d, procedure, endpoint, options]; // construct REGISTER message\n  //\n\n  var msg = [MSG_TYPE.REGISTER, request];\n\n  if (options) {\n    msg.push(options);\n  } else {\n    msg.push({});\n  }\n\n  msg.push(self.resolve(procedure)); // send WAMP message\n  //\n\n  self._send_wamp(msg);\n\n  if (d.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    return d.promise;\n  } else {\n    return d;\n  }\n};\n\nSession.prototype.unsubscribe = function (subscription) {\n  util.assert(subscription instanceof Subscription, \"Session.unsubscribe: <subscription> must be an instance of class autobahn.Subscription\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  }\n\n  if (!subscription.active || !(subscription.id in self._subscriptions)) {\n    throw \"subscription not active\";\n  }\n\n  var subs = self._subscriptions[subscription.id];\n  var i = subs.indexOf(subscription);\n\n  if (i === -1) {\n    throw \"subscription not active\";\n  } // remove handler subscription\n\n\n  subs.splice(i, 1);\n  subscription.active = false;\n\n  var d = self._defer();\n\n  if (subs.length) {\n    // there are still handlers on the subscription ..\n    d.resolve(false);\n  } else {\n    // no handlers left ..\n    // create and remember new UNSUBSCRIBE request\n    //\n    var request = self._new_request_id();\n\n    self._unsubscribe_reqs[request] = [d, subscription.id]; // construct UNSUBSCRIBE message\n    //\n\n    var msg = [MSG_TYPE.UNSUBSCRIBE, request, subscription.id]; // send WAMP message\n    //\n\n    self._send_wamp(msg);\n  }\n\n  if (d.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    return d.promise;\n  } else {\n    return d;\n  }\n};\n\nSession.prototype.unregister = function (registration) {\n  util.assert(registration instanceof Registration, \"Session.unregister: <registration> must be an instance of class autobahn.Registration\");\n  var self = this;\n\n  if (!self.isOpen) {\n    throw \"session not open\";\n  }\n\n  if (!registration.active || !(registration.id in self._registrations)) {\n    throw \"registration not active\";\n  } // create and remember new UNREGISTER request\n  //\n\n\n  var request = self._new_request_id();\n\n  var d = self._defer();\n\n  self._unregister_reqs[request] = [d, registration]; // construct UNREGISTER message\n  //\n\n  var msg = [MSG_TYPE.UNREGISTER, request, registration.id]; // send WAMP message\n  //\n\n  self._send_wamp(msg);\n\n  if (d.promise.then) {\n    // whenjs has the actual user promise in an attribute\n    return d.promise;\n  } else {\n    return d;\n  }\n};\n\nSession.prototype.prefix = function (prefix, uri) {\n  util.assert(typeof prefix === 'string', \"Session.prefix: <prefix> must be a string\");\n  util.assert(!uri || typeof uri === 'string', \"Session.prefix: <uri> must be a string or falsy\");\n  var self = this;\n\n  if (uri) {\n    self._prefixes[prefix] = uri;\n  } else {\n    if (prefix in self._prefixes) {\n      delete self._prefixes[prefix];\n    }\n  }\n};\n\nSession.prototype.resolve = function (curie) {\n  util.assert(typeof curie === 'string', \"Session.resolve: <curie> must be a string\");\n  var self = this; // skip if not a CURIE\n\n  var i = curie.indexOf(\":\");\n\n  if (i >= 0) {\n    var prefix = curie.substring(0, i);\n\n    if (prefix in self._prefixes) {\n      return self._prefixes[prefix] + '.' + curie.substring(i + 1);\n    } else {\n      return curie;\n    }\n  } else {\n    return curie;\n  }\n};\n\nexports.Session = Session;\nexports.Invocation = Invocation;\nexports.Event = Event;\nexports.Result = Result;\nexports.Error = Error;\nexports.Subscription = Subscription;\nexports.Registration = Registration;\nexports.Publication = Publication;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/autobahn/lib/session.js"],"names":["when","require","when_fn","log","util","Date","now","WAMP_FEATURES","caller","features","caller_identification","call_canceling","progressive_call_results","callee","pattern_based_registration","shared_registration","registration_revocation","publisher","publisher_identification","subscriber_blackwhite_listing","publisher_exclusion","subscriber","pattern_based_subscription","subscription_revocation","Invocation","procedure","progress","caller_authid","caller_authrole","self","Event","publication","topic","publisher_authid","publisher_authrole","retained","forward_for","Result","args","kwargs","Error","error","Subscription","handler","options","session","id","active","_on_unsubscribe","_defer","promise","then","on_unsubscribe","prototype","unsubscribe","Registration","endpoint","_on_unregister","on_unregister","unregister","Publication","MSG_TYPE","HELLO","WELCOME","ABORT","CHALLENGE","AUTHENTICATE","GOODBYE","HEARTBEAT","ERROR","PUBLISH","PUBLISHED","SUBSCRIBE","SUBSCRIBED","UNSUBSCRIBE","UNSUBSCRIBED","EVENT","CALL","CANCEL","RESULT","REGISTER","REGISTERED","UNREGISTER","UNREGISTERED","INVOCATION","INTERRUPT","YIELD","Session","socket","defer","onchallenge","on_user_error","on_internal_error","_socket","_onchallenge","_on_user_error","_on_internal_error","_id","_realm","_features","_goodbye_sent","_transport_is_closing","_publish_reqs","_subscribe_reqs","_unsubscribe_reqs","_call_reqs","_register_reqs","_unregister_reqs","_subscriptions","_registrations","_invocations","_prefixes","_caller_disclose_me","_publisher_disclose_me","_send_wamp","msg","debug","send","_protocol_violation","reason","close","handle_error","_MESSAGE_MAP","next_req_id","_new_request_id","_process_SUBSCRIBED","request","subscription","r","d","sub","push","resolve","_process_SUBSCRIBE_ERROR","details","reject","_process_UNSUBSCRIBED","subscription_id","subs","i","length","_process_UNSUBSCRIBE_ERROR","_process_PUBLISHED","pub","_process_PUBLISH_ERROR","_process_EVENT","ed","e","_process_REGISTERED","registration","reg","_process_REGISTER_ERROR","_process_UNREGISTERED","registration_id","_process_UNREGISTER_ERROR","_process_RESULT","result","Object","keys","receive_progress","notify","_process_CALL_ERROR","_process_INVOCATION","progress_msg","kwargs_len","cd","call","res","reply","err","onmessage","msg_type","rf","roles","broker","att","dealer","onjoin","onleave","method","extra","signature","signatureString","authExtra","message","request_type","global","performance","_created","defineProperty","get","set","newValue","vals","header","Math","round","console","group","arguments","groupEnd","items","apply","join","realm","authmethods","authid","authextra","assert","Array","isArray","isOpen","leave","is_object","disclose_me","undefined","userPromise","cancel","cancelOptions","cancelMsg","mode","cancelledDefer","publish","acknowledge","subscribe","register","indexOf","splice","prefix","uri","curie","substring","exports"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n\n// require('assert') would be nice .. but it does not\n// work with Google Closure after Browserify\n\nvar when = require('when');\nvar when_fn = require(\"when/function\");\n\nvar log = require('./log.js');\nvar util = require('./util.js');\n\n// IE fallback (http://afuchs.tumblr.com/post/23550124774/date-now-in-ie8)\nDate.now = Date.now || function() { return +new Date; };\n\n\n// WAMP \"Advanced Profile\" support in AutobahnJS per role\n//\nvar WAMP_FEATURES = {\n   caller: {\n      features: {\n         caller_identification: true,\n         //call_timeout: true,\n         call_canceling: true,\n         progressive_call_results: true\n      }\n   },\n   callee: {\n      features: {\n         caller_identification: true,\n         //call_trustlevels: true,\n         pattern_based_registration: true,\n         shared_registration: true,\n         //call_timeout: true,\n         //call_canceling: true,\n         progressive_call_results: true,\n         registration_revocation: true\n      }\n   },\n   publisher: {\n      features: {\n         publisher_identification: true,\n         subscriber_blackwhite_listing: true,\n         publisher_exclusion: true\n      }\n   },\n   subscriber: {\n      features: {\n         publisher_identification: true,\n         //publication_trustlevels: true,\n         pattern_based_subscription: true,\n         subscription_revocation: true\n         //event_history: true,\n      }\n   }\n};\n\n\nvar Invocation = function (procedure,\n                           progress,\n                           caller,\n                           caller_authid,\n                           caller_authrole) {\n\n   var self = this;\n\n   self.procedure = procedure;\n   self.progress = progress;\n   self.caller = caller;\n   self.caller_authid = caller_authid;\n   self.caller_authrole = caller_authrole;\n};\n\n\nvar Event = function (publication,\n                      topic,\n                      publisher,\n                      publisher_authid,\n                      publisher_authrole,\n                      retained,\n                      forward_for) {\n\n   var self = this;\n\n   self.publication = publication;\n   self.topic = topic;\n   self.publisher = publisher;\n   self.publisher_authid = publisher_authid;\n   self.publisher_authrole = publisher_authrole;\n   self.retained = retained;\n   self.forward_for = forward_for;\n};\n\n\nvar Result = function (args, kwargs) {\n\n   var self = this;\n\n   self.args = args || [];\n   self.kwargs = kwargs || {};\n};\n\n\nvar Error = function (error, args, kwargs) {\n\n   var self = this;\n\n   self.error = error;\n   self.args = args || [];\n   self.kwargs = kwargs || {};\n};\n\n\nvar Subscription = function (topic, handler, options, session, id) {\n\n   var self = this;\n\n   self.topic = topic;\n   self.handler = handler;\n   self.options = options || {};\n   self.session = session;\n   self.id = id;\n\n   self.active = true;\n\n   // this will fire when the handler is unsubscribed\n   self._on_unsubscribe = session._defer();\n\n   if (self._on_unsubscribe.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      self.on_unsubscribe = self._on_unsubscribe.promise;\n   } else {\n      self.on_unsubscribe = self._on_unsubscribe;\n   }\n};\n\n\nSubscription.prototype.unsubscribe = function () {\n\n   var self = this;\n   return self.session.unsubscribe(self);\n};\n\n\nvar Registration = function (procedure, endpoint, options, session, id) {\n\n   var self = this;\n\n   self.procedure = procedure;\n   self.endpoint = endpoint;\n   self.options = options || {};\n   self.session = session;\n   self.id = id;\n\n   self.active = true;\n\n   // this will fire when the endpoint is unregistered\n   self._on_unregister = session._defer();\n\n   if (self._on_unregister.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      self.on_unregister = self._on_unregister.promise;\n   } else {\n      self.on_unregister = self._on_unregister;\n   }\n};\n\n\nRegistration.prototype.unregister = function () {\n\n   var self = this;\n   return self.session.unregister(self);\n};\n\n\nvar Publication = function (id) {\n\n   var self = this;\n   self.id = id;\n};\n\n\nvar MSG_TYPE = {\n   HELLO: 1,\n   WELCOME: 2,\n   ABORT: 3,\n   CHALLENGE: 4,\n   AUTHENTICATE: 5,\n   GOODBYE: 6,\n   HEARTBEAT: 7,\n   ERROR: 8,\n   PUBLISH: 16,\n   PUBLISHED: 17,\n   SUBSCRIBE: 32,\n   SUBSCRIBED: 33,\n   UNSUBSCRIBE: 34,\n   UNSUBSCRIBED: 35,\n   EVENT: 36,\n   CALL: 48,\n   CANCEL: 49,\n   RESULT: 50,\n   REGISTER: 64,\n   REGISTERED: 65,\n   UNREGISTER: 66,\n   UNREGISTERED: 67,\n   INVOCATION: 68,\n   INTERRUPT: 69,\n   YIELD: 70\n};\n\n\n\nvar Session = function (socket, defer, onchallenge, on_user_error, on_internal_error) {\n\n   var self = this;\n\n   // the transport connection (WebSocket object)\n   self._socket = socket;\n\n   // the Deferred factory to use\n   self._defer = defer;\n\n   // the WAMP authentication challenge handler\n   self._onchallenge = onchallenge;\n\n   // custom error handlers\n   self._on_user_error = on_user_error;\n   self._on_internal_error = on_internal_error;\n\n\n   // the WAMP session ID\n   self._id = null;\n\n   // the WAMP realm joined\n   self._realm = null;\n\n   // the WAMP features in use\n   self._features = null;\n\n   // closing state\n   self._goodbye_sent = false;\n   self._transport_is_closing = false;\n\n   // outstanding requests;\n   self._publish_reqs = {};\n   self._subscribe_reqs = {};\n   self._unsubscribe_reqs = {};\n   self._call_reqs = {};\n   self._register_reqs = {};\n   self._unregister_reqs = {};\n\n   // subscriptions in place;\n   self._subscriptions = {};\n\n   // registrations in place;\n   self._registrations = {};\n\n   // incoming invocations;\n   self._invocations = {};\n\n   // prefix shortcuts for URIs\n   self._prefixes = {};\n\n   // the defaults for 'disclose_me'\n   self._caller_disclose_me = false;\n   self._publisher_disclose_me = false;\n\n   self._send_wamp = function (msg) {\n      log.debug(msg);\n      // forward WAMP message to be sent to WAMP transport\n      self._socket.send(msg);\n   };\n\n\n   self._protocol_violation = function (reason) {\n      self._socket.close(3002, \"protocol violation: \" + reason);\n      util.handle_error(self._on_internal_error, Error(\"failing transport due to protocol violation: \" + reason))\n   };\n\n   self._MESSAGE_MAP = {};\n   self._MESSAGE_MAP[MSG_TYPE.ERROR] = {};\n\n   var next_req_id = 0;\n   self._new_request_id = function() {\n      if (next_req_id < 9007199254740992) {\n         next_req_id += 1;\n      } else {\n         next_req_id = 1;\n      }\n      return next_req_id;\n   };\n\n\n   self._process_SUBSCRIBED = function (msg) {\n      //\n      // process SUBSCRIBED reply to SUBSCRIBE\n      //\n      var request = msg[1];\n      var subscription = msg[2];\n\n      if (request in self._subscribe_reqs) {\n\n         var r = self._subscribe_reqs[request];\n\n         var d = r[0];\n         var topic = r[1];\n         var handler = r[2];\n         var options = r[3];\n\n         if (!(subscription in self._subscriptions)) {\n            self._subscriptions[subscription] = [];\n         }\n         var sub = new Subscription(topic, handler, options, self, subscription);\n         self._subscriptions[subscription].push(sub);\n\n         d.resolve(sub);\n\n         delete self._subscribe_reqs[request];\n\n      } else {\n         self._protocol_violation(\"SUBSCRIBED received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.SUBSCRIBED] = self._process_SUBSCRIBED;\n\n\n   self._process_SUBSCRIBE_ERROR = function (msg) {\n      //\n      // process ERROR reply to SUBSCRIBE\n      //\n      var request = msg[2];\n      if (request in self._subscribe_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._subscribe_reqs[request];\n\n         var d = r[0];\n\n         d.reject(error);\n\n         delete self._subscribe_reqs[request];\n\n      } else {\n         self._protocol_violation(\"SUBSCRIBE-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.SUBSCRIBE] = self._process_SUBSCRIBE_ERROR;\n\n\n   self._process_UNSUBSCRIBED = function (msg) {\n      //\n      // process UNSUBSCRIBED reply to UNSUBSCRIBE\n      //\n      var request = msg[1];\n\n      if (request in self._unsubscribe_reqs) {\n\n         var r = self._unsubscribe_reqs[request];\n\n         var d = r[0];\n         var subscription_id = r[1];\n\n         if (subscription_id in self._subscriptions) {\n            var subs = self._subscriptions[subscription_id];\n            // the following should actually be NOP, since UNSUBSCRIBE was\n            // only sent when subs got empty\n            for (var i = 0; i < subs.length; ++i) {\n               subs[i].active = false;\n               subs[i]._on_unsubscribe.resolve();\n            }\n            delete self._subscriptions[subscription_id];\n         }\n\n         d.resolve(true);\n\n         delete self._unsubscribe_reqs[request];\n\n      } else {\n\n         if (request === 0) {\n\n            // router actively revoked our subscription\n            //\n            var details = msg[2];\n            var subscription_id = details.subscription;\n            var reason = details.reason;\n\n            if (subscription_id in self._subscriptions) {\n               var subs = self._subscriptions[subscription_id];\n               for (var i = 0; i < subs.length; ++i) {\n                  subs[i].active = false;\n                  subs[i]._on_unsubscribe.resolve(reason);\n               }\n               delete self._subscriptions[subscription_id];\n            } else {\n               self._protocol_violation(\"non-voluntary UNSUBSCRIBED received for non-existing subscription ID \" + subscription_id);\n            }\n\n         } else {\n            self._protocol_violation(\"UNSUBSCRIBED received for non-pending request ID \" + request);\n         }\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.UNSUBSCRIBED] = self._process_UNSUBSCRIBED;\n\n\n   self._process_UNSUBSCRIBE_ERROR = function (msg) {\n      //\n      // process ERROR reply to UNSUBSCRIBE\n      //\n      var request = msg[2];\n      if (request in self._unsubscribe_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._unsubscribe_reqs[request];\n\n         var d = r[0];\n         var subscription = r[1];\n\n         d.reject(error);\n\n         delete self._unsubscribe_reqs[request];\n\n      } else {\n         self._protocol_violation(\"UNSUBSCRIBE-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNSUBSCRIBE] = self._process_UNSUBSCRIBE_ERROR;\n\n\n   self._process_PUBLISHED = function (msg) {\n      //\n      // process PUBLISHED reply to PUBLISH\n      //\n      var request = msg[1];\n      var publication = msg[2];\n\n      if (request in self._publish_reqs) {\n\n         var r = self._publish_reqs[request];\n\n         var d = r[0];\n         var options = r[1];\n\n         var pub = new Publication(publication);\n         d.resolve(pub);\n\n         delete self._publish_reqs[request];\n\n      } else {\n         self._protocol_violation(\"PUBLISHED received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.PUBLISHED] = self._process_PUBLISHED;\n\n\n   self._process_PUBLISH_ERROR = function (msg) {\n      //\n      // process ERROR reply to PUBLISH\n      //\n      var request = msg[2];\n      if (request in self._publish_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._publish_reqs[request];\n\n         var d = r[0];\n         var options = r[1];\n\n         d.reject(error);\n\n         delete self._publish_reqs[request];\n\n      } else {\n         self._protocol_violation(\"PUBLISH-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.PUBLISH] = self._process_PUBLISH_ERROR;\n\n\n   self._process_EVENT = function (msg) {\n      //\n      // process EVENT message\n      //\n      // [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentsKw|dict]\n\n      var subscription = msg[1];\n\n      if (subscription in self._subscriptions) {\n\n         var publication = msg[2];\n         var details = msg[3];\n\n         var args = msg[4] || [];\n         var kwargs = msg[5] || {};\n\n         var subs = self._subscriptions[subscription];\n\n         // we want to provide the subscription topic to the handler, and may need to get this\n         // from one of the subscription handler objects attached to the subscription\n         // since for non-pattern subscriptions this is not sent over the wire\n         var ed = new Event(publication,\n                            details.topic || (subs[0] && subs[0].topic),\n                            details.publisher,\n                            details.publisher_authid,\n                            details.publisher_authrole,\n                            details.retained || false,\n                            details.forward_for\n                      );\n\n         for (var i = 0; i < subs.length; ++i) {\n            var sub = subs[i];\n            try {\n               sub.handler(args, kwargs, ed, sub);\n            } catch (e) {\n                util.handle_error(self._on_user_error, e, \"Exception raised in event handler:\");\n            }\n         }\n\n      } else {\n         self._protocol_violation(\"EVENT received for non-subscribed subscription ID \" + subscription);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.EVENT] = self._process_EVENT;\n\n\n   self._process_REGISTERED = function (msg) {\n      //\n      // process REGISTERED reply to REGISTER\n      //\n      var request = msg[1];\n      var registration = msg[2];\n\n      if (request in self._register_reqs) {\n\n         var r = self._register_reqs[request];\n\n         var d = r[0];\n         var procedure = r[1];\n         var endpoint = r[2];\n         var options = r[3];\n\n         var reg = new Registration(procedure, endpoint, options, self, registration);\n\n         self._registrations[registration] = reg;\n\n         d.resolve(reg);\n\n         delete self._register_reqs[request];\n\n      } else {\n         self._protocol_violation(\"REGISTERED received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.REGISTERED] = self._process_REGISTERED;\n\n\n   self._process_REGISTER_ERROR = function (msg) {\n      //\n      // process ERROR reply to REGISTER\n      //\n      var request = msg[2];\n      if (request in self._register_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._register_reqs[request];\n\n         var d = r[0];\n\n         d.reject(error);\n\n         delete self._register_reqs[request];\n\n      } else {\n         self._protocol_violation(\"REGISTER-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.REGISTER] = self._process_REGISTER_ERROR;\n\n\n   self._process_UNREGISTERED = function (msg) {\n      //\n      // process UNREGISTERED reply to UNREGISTER\n      //\n      var request = msg[1];\n\n      if (request in self._unregister_reqs) {\n\n         var r = self._unregister_reqs[request];\n\n         var d = r[0];\n         var registration = r[1];\n\n         if (registration.id in self._registrations) {\n            delete self._registrations[registration.id];\n         }\n\n         registration.active = false;\n         d.resolve();\n\n         delete self._unregister_reqs[request];\n\n      } else {\n\n         if (request === 0) {\n\n            // the router actively revoked our registration\n            //\n            var details = msg[2];\n            var registration_id = details.registration;\n            var reason = details.reason;\n\n            if (registration_id in self._registrations) {\n               var registration = self._registrations[registration_id];\n               registration.active = false;\n               registration._on_unregister.resolve(reason);\n               delete self._registrations[registration_id];\n            } else {\n               self._protocol_violation(\"non-voluntary UNREGISTERED received for non-existing registration ID \" + registration_id);\n            }\n\n         } else {\n            self._protocol_violation(\"UNREGISTERED received for non-pending request ID \" + request);\n         }\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.UNREGISTERED] = self._process_UNREGISTERED;\n\n\n   self._process_UNREGISTER_ERROR = function (msg) {\n      //\n      // process ERROR reply to UNREGISTER\n      //\n      var request = msg[2];\n      if (request in self._unregister_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._unregister_reqs[request];\n\n         var d = r[0];\n         var registration = r[1];\n\n         d.reject(error);\n\n         delete self._unregister_reqs[request];\n\n      } else {\n         self._protocol_violation(\"UNREGISTER-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNREGISTER] = self._process_UNREGISTER_ERROR;\n\n\n   self._process_RESULT = function (msg) {\n      //\n      // process RESULT reply to CALL\n      //\n      var request = msg[1];\n      if (request in self._call_reqs) {\n\n         var details = msg[2];\n\n         var args = msg[3] || [];\n         var kwargs = msg[4] || {};\n\n         // maybe wrap complex result:\n         var result = null;\n         if (args.length > 1 || Object.keys(kwargs).length > 0) {\n            // wrap complex result is more than 1 positional result OR\n            // non-empty keyword result\n            result = new Result(args, kwargs);\n         } else if (args.length > 0) {\n            // single positional result\n            result = args[0];\n         }\n\n         var r = self._call_reqs[request];\n\n         var d = r[0];\n         var options = r[1];\n\n         if (details.progress) {\n            if (options && options.receive_progress) {\n               d.notify(result);\n            }\n         } else {\n            d.resolve(result);\n            delete self._call_reqs[request];\n         }\n      } else {\n         self._protocol_violation(\"CALL-RESULT received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.RESULT] = self._process_RESULT;\n\n\n   self._process_CALL_ERROR = function (msg) {\n      //\n      // process ERROR reply to CALL\n      //\n      var request = msg[2];\n      if (request in self._call_reqs) {\n\n         var details = msg[3];\n         var error = new Error(msg[4], msg[5], msg[6]);\n\n         var r = self._call_reqs[request];\n\n         var d = r[0];\n         var options = r[1];\n\n         d.reject(error);\n\n         delete self._call_reqs[request];\n\n      } else {\n         self._protocol_violation(\"CALL-ERROR received for non-pending request ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.CALL] = self._process_CALL_ERROR;\n\n\n   self._process_INVOCATION = function (msg) {\n      //\n      // process INVOCATION message\n      //\n      // [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n      //\n      var request = msg[1];\n      var registration = msg[2];\n\n      var details = msg[3];\n      // receive_progress\n      // timeout\n      // caller\n\n      if (registration in self._registrations) {\n\n         var reg = self._registrations[registration];\n\n         var args = msg[4] || [];\n         var kwargs = msg[5] || {};\n\n         // create progress function for invocation\n         //\n         var progress = null;\n         if (details.receive_progress) {\n\n            progress = function (args, kwargs) {\n               var progress_msg = [MSG_TYPE.YIELD, request, {progress: true}];\n\n               args = args || [];\n               kwargs = kwargs || {};\n\n               var kwargs_len = Object.keys(kwargs).length;\n               if (args.length || kwargs_len) {\n                  progress_msg.push(args);\n                  if (kwargs_len) {\n                     progress_msg.push(kwargs);\n                  }\n               }\n               self._send_wamp(progress_msg);\n            }\n         }\n\n         // we want to provide the regitration procedure to the handler and may\n         // need to get this from the registration object attached to the registration\n         // since for non-pattern registrations this is not sent over the wire\n         var cd = new Invocation(details.procedure || reg.procedure,\n                                 progress,\n                                 details.caller,\n                                 details.caller_authid,\n                                 details.caller_authrole\n                      );\n\n         // We use the following whenjs call wrapper, which automatically\n         // wraps a plain, non-promise value in a (immediately resolved) promise\n         //\n         // See: https://github.com/cujojs/when/blob/master/docs/api.md#fncall\n         //\n         when_fn.call(reg.endpoint, args, kwargs, cd).then(\n\n            function (res) {\n               // construct YIELD message\n               // FIXME: Options\n               //\n               var reply = [MSG_TYPE.YIELD, request, {}];\n\n               if (res instanceof Result) {\n                  var kwargs_len = Object.keys(res.kwargs).length;\n                  if (res.args.length || kwargs_len) {\n                     reply.push(res.args);\n                     if (kwargs_len) {\n                        reply.push(res.kwargs);\n                     }\n                  }\n               } else {\n                  reply.push([res]);\n               }\n\n               // send WAMP message\n               //\n               self._send_wamp(reply);\n            },\n\n            function (err) {\n               // construct ERROR message\n               // [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri, Arguments|list, ArgumentsKw|dict]\n\n               var reply = [MSG_TYPE.ERROR, MSG_TYPE.INVOCATION, request, {}];\n\n               if (err instanceof Error) {\n\n                  reply.push(err.error);\n\n                  var kwargs_len = Object.keys(err.kwargs).length;\n                  if (err.args.length || kwargs_len) {\n                     reply.push(err.args);\n                     if (kwargs_len) {\n                        reply.push(err.kwargs);\n                     }\n                  }\n               } else {\n                  reply.push('wamp.error.runtime_error');\n                  reply.push([err]);\n               }\n\n               // send WAMP message\n               //\n               self._send_wamp(reply);\n               util.handle_error(self._on_user_error, err, \"Exception raised in invocation handler:\");\n            }\n         );\n\n      } else {\n         self._protocol_violation(\"INVOCATION received for non-registered registration ID \" + request);\n      }\n   };\n   self._MESSAGE_MAP[MSG_TYPE.INVOCATION] = self._process_INVOCATION;\n\n\n   // callback fired by WAMP transport on receiving a WAMP message\n   //\n   self._socket.onmessage = function (msg) {\n\n      var msg_type = msg[0];\n\n      // WAMP session not yet open\n      //\n      if (!self._id) {\n\n         // the first message must be WELCOME, ABORT or CHALLENGE ..\n         //\n         if (msg_type === MSG_TYPE.WELCOME) {\n\n            self._id = msg[1];\n\n            // determine actual set of advanced features that can be used\n            //\n            var rf = msg[2];\n            self._features = {};\n\n            if (rf.roles.broker) {\n               // \"Basic Profile\" is mandatory\n               self._features.subscriber = {};\n               self._features.publisher = {};\n\n               // fill in features that both peers support\n               if (rf.roles.broker.features) {\n\n                  for (var att in WAMP_FEATURES.publisher.features) {\n                     self._features.publisher[att] = WAMP_FEATURES.publisher.features[att] &&\n                                                     rf.roles.broker.features[att];\n                  }\n\n                  for (var att in WAMP_FEATURES.subscriber.features) {\n                     self._features.subscriber[att] = WAMP_FEATURES.subscriber.features[att] &&\n                                                      rf.roles.broker.features[att];\n                  }\n               }\n            }\n\n            if (rf.roles.dealer) {\n               // \"Basic Profile\" is mandatory\n               self._features.caller = {};\n               self._features.callee = {};\n\n               // fill in features that both peers support\n               if (rf.roles.dealer.features) {\n\n                  for (var att in WAMP_FEATURES.caller.features) {\n                     self._features.caller[att] = WAMP_FEATURES.caller.features[att] &&\n                                                  rf.roles.dealer.features[att];\n                  }\n\n                  for (var att in WAMP_FEATURES.callee.features) {\n                     self._features.callee[att] = WAMP_FEATURES.callee.features[att] &&\n                                                  rf.roles.dealer.features[att];\n                  }\n               }\n            }\n\n            if (self.onjoin) {\n               self.onjoin(msg[2]);\n            }\n\n         } else if (msg_type === MSG_TYPE.ABORT) {\n\n            var details = msg[1];\n            var reason = msg[2];\n\n            if (self.onleave) {\n               self.onleave(reason, details);\n            }\n\n         } else if (msg_type === MSG_TYPE.CHALLENGE) {\n\n            if (self._onchallenge) {\n\n               var method = msg[1];\n               var extra = msg[2];\n\n               when_fn.call(self._onchallenge, self, method, extra).then(\n                  function (signature) {\n\n                     if(typeof signature === \"string\"){\n                        var msg = [MSG_TYPE.AUTHENTICATE, signature, {}];\n                     } else if (typeof signature === \"object\") {\n                        var signatureString = signature[0];\n                        var authExtra = signature[1];\n\n                        var msg = [MSG_TYPE.AUTHENTICATE, signatureString, authExtra];\n                     }\n\n                     self._send_wamp(msg);\n                  },\n                  function (err) {\n                      util.handle_error(self._on_user_error, err, \"onchallenge() raised: \");\n                      var msg = [MSG_TYPE.ABORT, {message: \"sorry, I cannot authenticate (onchallenge handler raised an exception)\"}, \"wamp.error.cannot_authenticate\"];\n                      self._send_wamp(msg);\n                      self._socket.close(3000);\n                  }\n               );\n            } else {\n               util.handle_error(self._on_internal_error, Error(\"received WAMP challenge, but no onchallenge() handler set\"));\n\n               var msg = [MSG_TYPE.ABORT, {message: \"sorry, I cannot authenticate (no onchallenge handler set)\"}, \"wamp.error.cannot_authenticate\"];\n               self._send_wamp(msg);\n               self._socket.close(3000);\n            }\n\n         } else {\n            self._protocol_violation(\"unexpected message type \" + msg_type);\n         }\n\n      // WAMP session is open\n      //\n      } else {\n\n         if (msg_type === MSG_TYPE.GOODBYE) {\n\n            if (!self._goodbye_sent) {\n\n               var reply = [MSG_TYPE.GOODBYE, {}, \"wamp.error.goodbye_and_out\"];\n               self._send_wamp(reply);\n            }\n\n            self._id = null;\n            self._realm = null;\n            self._features = null;\n\n            var details = msg[1];\n            var reason = msg[2];\n\n            if (self.onleave) {\n               self.onleave(reason, details);\n            }\n\n         } else {\n\n            if (msg_type === MSG_TYPE.ERROR) {\n\n               var request_type = msg[1];\n               if (request_type in self._MESSAGE_MAP[MSG_TYPE.ERROR]) {\n\n                  self._MESSAGE_MAP[msg_type][request_type](msg);\n\n               } else {\n\n                  self._protocol_violation(\"unexpected ERROR message with request_type \" + request_type);\n               }\n\n            } else {\n\n               if (msg_type in self._MESSAGE_MAP) {\n\n                  self._MESSAGE_MAP[msg_type](msg);\n\n               } else {\n\n                  self._protocol_violation(\"unexpected message type \" + msg_type);\n               }\n            }\n         }\n      }\n   };\n\n   // session object constructed .. track creation time\n   //\n   if ('performance' in global && 'now' in performance) {\n      self._created = performance.now();\n   } else {\n      self._created = Date.now();\n   }\n};\n\n\nObject.defineProperty(Session.prototype, \"defer\", {\n   get: function () {\n      return this._defer;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"id\", {\n   get: function () {\n      return this._id;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"realm\", {\n   get: function () {\n      return this._realm;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"isOpen\", {\n   get: function () {\n      return this.id !== null;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"features\", {\n   get: function () {\n      return this._features;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"caller_disclose_me\", {\n   get: function () {\n      return this._caller_disclose_me;\n   },\n   set: function (newValue) {\n      this._caller_disclose_me = newValue;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"publisher_disclose_me\", {\n   get: function () {\n      return this._publisher_disclose_me;\n   },\n   set: function (newValue) {\n      this._publisher_disclose_me = newValue;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"subscriptions\", {\n   get: function () {\n      var keys = Object.keys(this._subscriptions);\n      var vals = [];\n      for (var i = 0; i < keys.length; ++i) {\n         vals.push(this._subscriptions[keys[i]]);\n      }\n      return vals;\n   }\n});\n\n\nObject.defineProperty(Session.prototype, \"registrations\", {\n   get: function () {\n      var keys = Object.keys(this._registrations);\n      var vals = [];\n      for (var i = 0; i < keys.length; ++i) {\n         vals.push(this._registrations[keys[i]]);\n      }\n      return vals;\n   }\n});\n\n\nSession.prototype.log = function () {\n   var self = this;\n\n   if ('console' in global) {\n\n      var header = null;\n      if (self._id && self._created) {\n\n         var now = null;\n         if ('performance' in global && 'now' in performance) {\n            now = performance.now() - self._created;\n         } else {\n            now = Date.now() - self._created;\n         }\n\n         header = \"WAMP session \" + self._id + \" on '\" + self._realm + \"' at \" + Math.round(now * 1000) / 1000 + \" ms\";\n      } else {\n         header = \"WAMP session\";\n      }\n\n      if ('group' in console) {\n         console.group(header);\n         for (var i = 0; i < arguments.length; i += 1) {\n            console.log(arguments[i]);\n         }\n         console.groupEnd();\n      } else {\n         var items = [header + \": \"];\n         for (var i = 0; i < arguments.length; i += 1) {\n            items.push(arguments[i]);\n         }\n         console.log.apply(console, items);\n      }\n   }\n};\n\n\nSession.prototype.join = function (realm, authmethods, authid, authextra) {\n\n   util.assert(!realm || typeof realm === 'string', \"Session.join: <realm> must be a string\");\n   util.assert(!authmethods || Array.isArray(authmethods), \"Session.join: <authmethods> must be an array []\");\n   util.assert(!authid || typeof authid === 'string', \"Session.join: <authid> must be a string\");\n\n   var self = this;\n\n   if (self.isOpen) {\n      throw \"session already open\";\n   }\n\n   self._goodbye_sent = false;\n   self._realm = realm;\n\n   var details = {};\n   details.roles = WAMP_FEATURES;\n\n   if (authmethods) {\n      details.authmethods = authmethods;\n   }\n   if (authid) {\n      details.authid = authid;\n   }\n   if (authextra) {\n      details.authextra = authextra;\n   }\n\n   var msg = [MSG_TYPE.HELLO, realm, details];\n   self._send_wamp(msg);\n};\n\n\nSession.prototype.leave = function (reason, message) {\n\n   util.assert(!reason || typeof reason === 'string', \"Session.leave: <reason> must be a string\");\n   util.assert(!message || typeof message === 'string', \"Session.leave: <message> must be a string\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   if (!reason) {\n      reason = \"wamp.close.normal\";\n   }\n\n   var details = {};\n   if (message) {\n      details.message = message;\n   }\n\n   var msg = [MSG_TYPE.GOODBYE, details, reason];\n   self._send_wamp(msg);\n   self._goodbye_sent = true;\n};\n\n\nSession.prototype.call = function (procedure, args, kwargs, options) {\n\n   util.assert(typeof procedure === 'string', \"Session.call: <procedure> must be a string\");\n   util.assert(!args || Array.isArray(args), \"Session.call: <args> must be an array []\");\n   util.assert(!kwargs || util.is_object(kwargs), \"Session.call: <kwargs> must be an object {}\");\n   util.assert(!options || util.is_object(options), \"Session.call: <options> must be an object {}\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   options = options || {};\n\n   // only set option if user hasn't set a value and global option is \"on\"\n   if (options.disclose_me === undefined && self._caller_disclose_me) {\n      options.disclose_me = true;\n   }\n\n   // create and remember new CALL request\n   //\n   var d = self._defer();\n   var request = self._new_request_id();\n   self._call_reqs[request] = [d, options];\n\n   // construct CALL message\n   //\n   var msg = [MSG_TYPE.CALL, request, options, self.resolve(procedure)];\n   if (args) {\n      msg.push(args);\n      if (kwargs) {\n         msg.push(kwargs);\n      }\n   } else if (kwargs) {\n      msg.push([]);\n      msg.push(kwargs);\n   }\n\n   // send WAMP message\n   //\n   self._send_wamp(msg);\n\n   var userPromise;\n   if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      userPromise = d.promise;\n   } else {\n      userPromise = d;\n   }\n   userPromise.cancel = function(cancelOptions) {\n      // Cancel the call\n      //\n      var cancelMsg = [MSG_TYPE.CANCEL, request, cancelOptions || {}];\n      self._send_wamp(cancelMsg);\n\n      if (request in self._call_reqs\n        && (!cancelOptions\n          || !cancelOptions.mode\n          || cancelOptions.mode !== \"kill\"\n        )\n      ) {\n        // When the mode is not 'kill' it will never receive a call result.\n        // So when the request was still in the list, reject and remove it.\n        var cancelledDefer = self._call_reqs[request][0];\n        cancelledDefer.reject(new Error(\"Cancelled\"));\n        delete self._call_reqs[request];\n      }\n   }\n   return userPromise;\n};\n\n\nSession.prototype.publish = function (topic, args, kwargs, options) {\n\n   util.assert(typeof topic === 'string', \"Session.publish: <topic> must be a string\");\n   util.assert(!args || Array.isArray(args), \"Session.publish: <args> must be an array []\");\n   util.assert(!kwargs || util.is_object(kwargs), \"Session.publish: <kwargs> must be an object {}\");\n   util.assert(!options || util.is_object(options), \"Session.publish: <options> must be an object {}\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   options = options || {};\n\n   // only set option if user hasn't set a value and global option is \"on\"\n   if (options.disclose_me === undefined && self._publisher_disclose_me) {\n      options.disclose_me = true;\n   }\n\n   // create and remember new PUBLISH request\n   //\n   var d = null;\n   var request = self._new_request_id();\n   if (options.acknowledge) {\n      d = self._defer();\n      self._publish_reqs[request] = [d, options];\n   }\n\n   // construct PUBLISH message\n   //\n   var msg = [MSG_TYPE.PUBLISH, request, options, self.resolve(topic)];\n   if (args) {\n      msg.push(args);\n      if (kwargs) {\n         msg.push(kwargs);\n      }\n   } else if (kwargs) {\n      msg.push([]);\n      msg.push(kwargs);\n   }\n\n   // send WAMP message\n   //\n   self._send_wamp(msg);\n\n   if (d) {\n      if (d.promise.then) {\n         // whenjs has the actual user promise in an attribute\n         return d.promise;\n      } else {\n         return d;\n      }\n   }\n};\n\n\nSession.prototype.subscribe = function (topic, handler, options) {\n\n   util.assert(typeof topic === 'string', \"Session.subscribe: <topic> must be a string\");\n   util.assert(typeof handler === 'function', \"Session.subscribe: <handler> must be a function\");\n   util.assert(!options || util.is_object(options), \"Session.subscribe: <options> must be an object {}\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   // create an remember new SUBSCRIBE request\n   //\n   var request = self._new_request_id();\n   var d = self._defer();\n   self._subscribe_reqs[request] = [d, topic, handler, options];\n\n   // construct SUBSCRIBE message\n   //\n   var msg = [MSG_TYPE.SUBSCRIBE, request];\n   if (options) {\n      msg.push(options);\n   } else {\n      msg.push({});\n   }\n   msg.push(self.resolve(topic));\n\n   // send WAMP message\n   //\n   self._send_wamp(msg);\n\n   if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      return d.promise;\n   } else {\n      return d;\n   }\n};\n\n\nSession.prototype.register = function (procedure, endpoint, options) {\n\n   util.assert(typeof procedure === 'string', \"Session.register: <procedure> must be a string\");\n   util.assert(typeof endpoint === 'function', \"Session.register: <endpoint> must be a function\");\n   util.assert(!options || util.is_object(options), \"Session.register: <options> must be an object {}\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   // create an remember new REGISTER request\n   //\n   var request = self._new_request_id();\n   var d = self._defer();\n   self._register_reqs[request] = [d, procedure, endpoint, options];\n\n   // construct REGISTER message\n   //\n   var msg = [MSG_TYPE.REGISTER, request];\n   if (options) {\n      msg.push(options);\n   } else {\n      msg.push({});\n   }\n   msg.push(self.resolve(procedure));\n\n   // send WAMP message\n   //\n   self._send_wamp(msg);\n\n   if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      return d.promise;\n   } else {\n      return d;\n   }\n};\n\n\nSession.prototype.unsubscribe = function (subscription) {\n\n   util.assert(subscription instanceof Subscription, \"Session.unsubscribe: <subscription> must be an instance of class autobahn.Subscription\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   if (!subscription.active || !(subscription.id in self._subscriptions)) {\n      throw \"subscription not active\";\n   }\n\n   var subs = self._subscriptions[subscription.id];\n   var i = subs.indexOf(subscription);\n\n   if (i === -1) {\n      throw \"subscription not active\";\n   }\n\n   // remove handler subscription\n   subs.splice(i, 1);\n   subscription.active = false;\n\n   var d = self._defer();\n\n   if (subs.length) {\n      // there are still handlers on the subscription ..\n      d.resolve(false);\n\n   } else {\n\n      // no handlers left ..\n\n      // create and remember new UNSUBSCRIBE request\n      //\n      var request = self._new_request_id();\n      self._unsubscribe_reqs[request] = [d, subscription.id];\n\n      // construct UNSUBSCRIBE message\n      //\n      var msg = [MSG_TYPE.UNSUBSCRIBE, request, subscription.id];\n\n      // send WAMP message\n      //\n      self._send_wamp(msg);\n   }\n\n   if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      return d.promise;\n   } else {\n      return d;\n   }\n};\n\n\nSession.prototype.unregister = function (registration) {\n\n   util.assert(registration instanceof Registration, \"Session.unregister: <registration> must be an instance of class autobahn.Registration\");\n\n   var self = this;\n\n   if (!self.isOpen) {\n      throw \"session not open\";\n   }\n\n   if (!registration.active || !(registration.id in self._registrations)) {\n      throw \"registration not active\";\n   }\n\n   // create and remember new UNREGISTER request\n   //\n   var request = self._new_request_id();\n   var d = self._defer();\n   self._unregister_reqs[request] = [d, registration];\n\n   // construct UNREGISTER message\n   //\n   var msg = [MSG_TYPE.UNREGISTER, request, registration.id];\n\n   // send WAMP message\n   //\n   self._send_wamp(msg);\n\n   if (d.promise.then) {\n      // whenjs has the actual user promise in an attribute\n      return d.promise;\n   } else {\n      return d;\n   }\n};\n\n\nSession.prototype.prefix = function (prefix, uri) {\n\n   util.assert(typeof prefix === 'string', \"Session.prefix: <prefix> must be a string\");\n   util.assert(!uri || typeof uri === 'string', \"Session.prefix: <uri> must be a string or falsy\");\n\n   var self = this;\n\n   if (uri) {\n      self._prefixes[prefix] = uri;\n   } else {\n      if (prefix in self._prefixes) {\n         delete self._prefixes[prefix];\n      }\n   }\n};\n\n\nSession.prototype.resolve = function (curie) {\n\n   util.assert(typeof curie === 'string', \"Session.resolve: <curie> must be a string\");\n\n   var self = this;\n\n   // skip if not a CURIE\n   var i = curie.indexOf(\":\");\n   if (i >= 0) {\n      var prefix = curie.substring(0, i);\n      if (prefix in self._prefixes) {\n         return self._prefixes[prefix] + '.' + curie.substring(i + 1);\n      } else {\n         return curie;\n      }\n   } else {\n      return curie;\n   }\n};\n\n\nexports.Session = Session;\n\nexports.Invocation = Invocation;\nexports.Event = Event;\nexports.Result = Result;\nexports.Error = Error;\nexports.Subscription = Subscription;\nexports.Registration = Registration;\nexports.Publication = Publication;\n"]},"metadata":{},"sourceType":"script"}