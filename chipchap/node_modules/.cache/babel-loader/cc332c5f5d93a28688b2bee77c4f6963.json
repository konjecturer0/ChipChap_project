{"ast":null,"code":"!function (e) {\n  \"object\" == typeof exports ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : \"undefined\" != typeof window ? window.when = e() : \"undefined\" != typeof global ? global.when = e() : \"undefined\" != typeof self && (self.when = e());\n}(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          throw new Error(\"Cannot find module '\" + o + \"'\");\n        }\n\n        var f = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(f.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, f, f.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) s(r[o]);\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      var when = module.exports = require('../when');\n\n      when.callbacks = require('../callbacks');\n      when.cancelable = require('../cancelable');\n      when.delay = require('../delay');\n      when.fn = require('../function');\n      when.guard = require('../guard');\n      when.keys = require('../keys');\n      when.nodefn = when.node = require('../node');\n      when.parallel = require('../parallel');\n      when.pipeline = require('../pipeline');\n      when.poll = require('../poll');\n      when.sequence = require('../sequence');\n      when.timeout = require('../timeout');\n    }, {\n      \"../callbacks\": 2,\n      \"../cancelable\": 3,\n      \"../delay\": 4,\n      \"../function\": 5,\n      \"../guard\": 6,\n      \"../keys\": 7,\n      \"../node\": 26,\n      \"../parallel\": 27,\n      \"../pipeline\": 28,\n      \"../poll\": 29,\n      \"../sequence\": 30,\n      \"../timeout\": 31,\n      \"../when\": 32\n    }],\n    2: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2013-2014 original author or authors */\n\n      /**\n       * Collection of helper functions for interacting with 'traditional',\n       * callback-taking functions using a promise interface.\n       *\n       * @author Renato Zannon\n       * @contributor Brian Cavalier\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var Promise = when.Promise;\n\n          var _liftAll = require('./lib/liftAll');\n\n          var slice = Array.prototype.slice;\n\n          var makeApply = require('./lib/apply');\n\n          var _apply = makeApply(Promise, dispatch);\n\n          return {\n            lift: lift,\n            liftAll: liftAll,\n            apply: apply,\n            call: call,\n            promisify: promisify\n          };\n          /**\n           * Takes a `traditional` callback-taking function and returns a promise for its\n           * result, accepting an optional array of arguments (that might be values or\n           * promises). It assumes that the function takes its callback and errback as\n           * the last two arguments. The resolution of the promise depends on whether the\n           * function will call its callback or its errback.\n           *\n           * @example\n           *    var domIsLoaded = callbacks.apply($);\n           *    domIsLoaded.then(function() {\n           *\t\tdoMyDomStuff();\n           *\t});\n           *\n           * @example\n           *    function existingAjaxyFunction(url, callback, errback) {\n           *\t\t// Complex logic you'd rather not change\n           *\t}\n           *\n           *    var promise = callbacks.apply(existingAjaxyFunction, [\"/movies.json\"]);\n           *\n           *    promise.then(function(movies) {\n           *\t\t// Work with movies\n           *\t}, function(reason) {\n           *\t\t// Handle error\n           *\t});\n           *\n           * @param {function} asyncFunction function to be called\n           * @param {Array} [extraAsyncArgs] array of arguments to asyncFunction\n           * @returns {Promise} promise for the callback value of asyncFunction\n           */\n\n          function apply(asyncFunction, extraAsyncArgs) {\n            return _apply(asyncFunction, this, extraAsyncArgs || []);\n          }\n          /**\n           * Apply helper that allows specifying thisArg\n           * @private\n           */\n\n\n          function dispatch(f, thisArg, args, h) {\n            args.push(alwaysUnary(h.resolve, h), alwaysUnary(h.reject, h));\n            tryCatchResolve(f, thisArg, args, h);\n          }\n\n          function tryCatchResolve(f, thisArg, args, resolver) {\n            try {\n              f.apply(thisArg, args);\n            } catch (e) {\n              resolver.reject(e);\n            }\n          }\n          /**\n           * Works as `callbacks.apply` does, with the difference that the arguments to\n           * the function are passed individually, instead of as an array.\n           *\n           * @example\n           *    function sumInFiveSeconds(a, b, callback) {\n           *\t\tsetTimeout(function() {\n           *\t\t\tcallback(a + b);\n           *\t\t}, 5000);\n           *\t}\n           *\n           *    var sumPromise = callbacks.call(sumInFiveSeconds, 5, 10);\n           *\n           *    // Logs '15' 5 seconds later\n           *    sumPromise.then(console.log);\n           *\n           * @param {function} asyncFunction function to be called\n           * @param {...*} args arguments that will be forwarded to the function\n           * @returns {Promise} promise for the callback value of asyncFunction\n           */\n\n\n          function call(asyncFunction\n          /*, arg1, arg2...*/\n          ) {\n            return _apply(asyncFunction, this, slice.call(arguments, 1));\n          }\n          /**\n           * Takes a 'traditional' callback/errback-taking function and returns a function\n           * that returns a promise instead. The resolution/rejection of the promise\n           * depends on whether the original function will call its callback or its\n           * errback.\n           *\n           * If additional arguments are passed to the `lift` call, they will be prepended\n           * on the calls to the original function, much like `Function.prototype.bind`.\n           *\n           * The resulting function is also \"promise-aware\", in the sense that, if given\n           * promises as arguments, it will wait for their resolution before executing.\n           *\n           * @example\n           *    function traditionalAjax(method, url, callback, errback) {\n           *\t\tvar xhr = new XMLHttpRequest();\n           *\t\txhr.open(method, url);\n           *\n           *\t\txhr.onload = callback;\n           *\t\txhr.onerror = errback;\n           *\n           *\t\txhr.send();\n           *\t}\n           *\n           *    var promiseAjax = callbacks.lift(traditionalAjax);\n           *    promiseAjax(\"GET\", \"/movies.json\").then(console.log, console.error);\n           *\n           *    var promiseAjaxGet = callbacks.lift(traditionalAjax, \"GET\");\n           *    promiseAjaxGet(\"/movies.json\").then(console.log, console.error);\n           *\n           * @param {Function} f traditional async function to be decorated\n           * @param {...*} [args] arguments to be prepended for the new function @deprecated\n           * @returns {Function} a promise-returning function\n           */\n\n\n          function lift(f\n          /*, args...*/\n          ) {\n            var args = arguments.length > 1 ? slice.call(arguments, 1) : [];\n            return function () {\n              return _apply(f, this, args.concat(slice.call(arguments)));\n            };\n          }\n          /**\n           * Lift all the functions/methods on src\n           * @param {object|function} src source whose functions will be lifted\n           * @param {function?} combine optional function for customizing the lifting\n           *  process. It is passed dst, the lifted function, and the property name of\n           *  the original function on src.\n           * @param {(object|function)?} dst option destination host onto which to place lifted\n           *  functions. If not provided, liftAll returns a new object.\n           * @returns {*} If dst is provided, returns dst with lifted functions as\n           *  properties.  If dst not provided, returns a new object with lifted functions.\n           */\n\n\n          function liftAll(src, combine, dst) {\n            return _liftAll(lift, combine, dst, src);\n          }\n          /**\n           * `promisify` is a version of `lift` that allows fine-grained control over the\n           * arguments that passed to the underlying function. It is intended to handle\n           * functions that don't follow the common callback and errback positions.\n           *\n           * The control is done by passing an object whose 'callback' and/or 'errback'\n           * keys, whose values are the corresponding 0-based indexes of the arguments on\n           * the function. Negative values are interpreted as being relative to the end\n           * of the arguments array.\n           *\n           * If arguments are given on the call to the 'promisified' function, they are\n           * intermingled with the callback and errback. If a promise is given among them,\n           * the execution of the function will only occur after its resolution.\n           *\n           * @example\n           *    var delay = callbacks.promisify(setTimeout, {\n           *\t\tcallback: 0\n           *\t});\n           *\n           *    delay(100).then(function() {\n           *\t\tconsole.log(\"This happens 100ms afterwards\");\n           *\t});\n           *\n           * @example\n           *    function callbackAsLast(errback, followsStandards, callback) {\n           *\t\tif(followsStandards) {\n           *\t\t\tcallback(\"well done!\");\n           *\t\t} else {\n           *\t\t\terrback(\"some programmers just want to watch the world burn\");\n           *\t\t}\n           *\t}\n           *\n           *    var promisified = callbacks.promisify(callbackAsLast, {\n           *\t\tcallback: -1,\n           *\t\terrback:   0,\n           *\t});\n           *\n           *    promisified(true).then(console.log, console.error);\n           *    promisified(false).then(console.log, console.error);\n           *\n           * @param {Function} asyncFunction traditional function to be decorated\n           * @param {object} positions\n           * @param {number} [positions.callback] index at which asyncFunction expects to\n           *  receive a success callback\n           * @param {number} [positions.errback] index at which asyncFunction expects to\n           *  receive an error callback\n           *  @returns {function} promisified function that accepts\n           *\n           * @deprecated\n           */\n\n\n          function promisify(asyncFunction, positions) {\n            return function () {\n              var thisArg = this;\n              return Promise.all(arguments).then(function (args) {\n                var p = Promise._defer();\n\n                var callbackPos, errbackPos;\n\n                if (typeof positions.callback === 'number') {\n                  callbackPos = normalizePosition(args, positions.callback);\n                }\n\n                if (typeof positions.errback === 'number') {\n                  errbackPos = normalizePosition(args, positions.errback);\n                }\n\n                if (errbackPos < callbackPos) {\n                  insertCallback(args, errbackPos, p._handler.reject, p._handler);\n                  insertCallback(args, callbackPos, p._handler.resolve, p._handler);\n                } else {\n                  insertCallback(args, callbackPos, p._handler.resolve, p._handler);\n                  insertCallback(args, errbackPos, p._handler.reject, p._handler);\n                }\n\n                asyncFunction.apply(thisArg, args);\n                return p;\n              });\n            };\n          }\n\n          function normalizePosition(args, pos) {\n            return pos < 0 ? args.length + pos + 2 : pos;\n          }\n\n          function insertCallback(args, pos, callback, thisArg) {\n            if (typeof pos === 'number') {\n              args.splice(pos, 0, alwaysUnary(callback, thisArg));\n            }\n          }\n\n          function alwaysUnary(fn, thisArg) {\n            return function () {\n              if (arguments.length > 1) {\n                fn.call(thisArg, slice.call(arguments));\n              } else {\n                fn.apply(thisArg, arguments);\n              }\n            };\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./lib/apply\": 11,\n      \"./lib/liftAll\": 23,\n      \"./when\": 32\n    }],\n    3: [function (require, module, exports) {\n      /** @license MIT License (c) copyright B Cavalier & J Hann */\n\n      /**\n       * cancelable.js\n       * @deprecated\n       *\n       * Decorator that makes a deferred \"cancelable\".  It adds a cancel() method that\n       * will call a special cancel handler function and then reject the deferred.  The\n       * cancel handler can be used to do resource cleanup, or anything else that should\n       * be done before any other rejection handlers are executed.\n       *\n       * Usage:\n       *\n       * var cancelableDeferred = cancelable(when.defer(), myCancelHandler);\n       *\n       * @author brian@hovercraftstudios.com\n       */\n      (function (define) {\n        define(function () {\n          /**\n           * Makes deferred cancelable, adding a cancel() method.\n          * @deprecated\n           *\n           * @param deferred {Deferred} the {@link Deferred} to make cancelable\n           * @param canceler {Function} cancel handler function to execute when this deferred\n          * is canceled.  This is guaranteed to run before all other rejection handlers.\n          * The canceler will NOT be executed if the deferred is rejected in the standard\n          * way, i.e. deferred.reject().  It ONLY executes if the deferred is canceled,\n          * i.e. deferred.cancel()\n           *\n           * @returns deferred, with an added cancel() method.\n           */\n          return function (deferred, canceler) {\n            // Add a cancel method to the deferred to reject the delegate\n            // with the special canceled indicator.\n            deferred.cancel = function () {\n              try {\n                deferred.reject(canceler(deferred));\n              } catch (e) {\n                deferred.reject(e);\n              }\n\n              return deferred.promise;\n            };\n\n            return deferred;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    4: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * delay.js\n       *\n       * Helper that returns a promise that resolves after a delay.\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n          /**\n          * @deprecated Use when(value).delay(ms)\n           */\n\n\n          return function delay(msec, value) {\n            return when(value).delay(msec);\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    5: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2013-2014 original author or authors */\n\n      /**\n       * Collection of helper functions for wrapping and executing 'traditional'\n       * synchronous functions in a promise interface.\n       *\n       * @author Brian Cavalier\n       * @contributor Renato Zannon\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var attempt = when['try'];\n\n          var _liftAll = require('./lib/liftAll');\n\n          var _apply = require('./lib/apply')(when.Promise);\n\n          var slice = Array.prototype.slice;\n          return {\n            lift: lift,\n            liftAll: liftAll,\n            call: attempt,\n            apply: apply,\n            compose: compose\n          };\n          /**\n           * Takes a function and an optional array of arguments (that might be promises),\n           * and calls the function. The return value is a promise whose resolution\n           * depends on the value returned by the function.\n           * @param {function} f function to be called\n           * @param {Array} [args] array of arguments to func\n           * @returns {Promise} promise for the return value of func\n           */\n\n          function apply(f, args) {\n            // slice args just in case the caller passed an Arguments instance\n            return _apply(f, this, args == null ? [] : slice.call(args));\n          }\n          /**\n           * Takes a 'regular' function and returns a version of that function that\n           * returns a promise instead of a plain value, and handles thrown errors by\n           * returning a rejected promise. Also accepts a list of arguments to be\n           * prepended to the new function, as does Function.prototype.bind.\n           *\n           * The resulting function is promise-aware, in the sense that it accepts\n           * promise arguments, and waits for their resolution.\n           * @param {Function} f function to be bound\n           * @param {...*} [args] arguments to be prepended for the new function @deprecated\n           * @returns {Function} a promise-returning function\n           */\n\n\n          function lift(f\n          /*, args... */\n          ) {\n            var args = arguments.length > 1 ? slice.call(arguments, 1) : [];\n            return function () {\n              return _apply(f, this, args.concat(slice.call(arguments)));\n            };\n          }\n          /**\n           * Lift all the functions/methods on src\n           * @param {object|function} src source whose functions will be lifted\n           * @param {function?} combine optional function for customizing the lifting\n           *  process. It is passed dst, the lifted function, and the property name of\n           *  the original function on src.\n           * @param {(object|function)?} dst option destination host onto which to place lifted\n           *  functions. If not provided, liftAll returns a new object.\n           * @returns {*} If dst is provided, returns dst with lifted functions as\n           *  properties.  If dst not provided, returns a new object with lifted functions.\n           */\n\n\n          function liftAll(src, combine, dst) {\n            return _liftAll(lift, combine, dst, src);\n          }\n          /**\n           * Composes multiple functions by piping their return values. It is\n           * transparent to whether the functions return 'regular' values or promises:\n           * the piped argument is always a resolved value. If one of the functions\n           * throws or returns a rejected promise, the composed promise will be also\n           * rejected.\n           *\n           * The arguments (or promises to arguments) given to the returned function (if\n           * any), are passed directly to the first function on the 'pipeline'.\n           * @param {Function} f the function to which the arguments will be passed\n           * @param {...Function} [funcs] functions that will be composed, in order\n           * @returns {Function} a promise-returning composition of the functions\n           */\n\n\n          function compose(f\n          /*, funcs... */\n          ) {\n            var funcs = slice.call(arguments, 1);\n            return function () {\n              var thisArg = this;\n              var args = slice.call(arguments);\n              var firstPromise = attempt.apply(thisArg, [f].concat(args));\n              return when.reduce(funcs, function (arg, func) {\n                return func.call(thisArg, arg);\n              }, firstPromise);\n            };\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./lib/apply\": 11,\n      \"./lib/liftAll\": 23,\n      \"./when\": 32\n    }],\n    6: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * Generalized promise concurrency guard\n       * Adapted from original concept by Sakari Jokinen (Rocket Pack, Ltd.)\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       * @contributor Sakari Jokinen\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var slice = Array.prototype.slice;\n          guard.n = n;\n          return guard;\n          /**\n           * Creates a guarded version of f that can only be entered when the supplied\n           * condition allows.\n           * @param {function} condition represents a critical section that may only\n           *  be entered when allowed by the condition\n           * @param {function} f function to guard\n           * @returns {function} guarded version of f\n           */\n\n          function guard(condition, f) {\n            return function () {\n              var args = slice.call(arguments);\n              return when(condition()).withThis(this).then(function (exit) {\n                return when(f.apply(this, args))['finally'](exit);\n              });\n            };\n          }\n          /**\n           * Creates a condition that allows only n simultaneous executions\n           * of a guarded function\n           * @param {number} allowed number of allowed simultaneous executions\n           * @returns {function} condition function which returns a promise that\n           *  fulfills when the critical section may be entered.  The fulfillment\n           *  value is a function (\"notifyExit\") that must be called when the critical\n           *  section has been exited.\n           */\n\n\n          function n(allowed) {\n            var count = 0;\n            var waiting = [];\n            return function enter() {\n              return when.promise(function (resolve) {\n                if (count < allowed) {\n                  resolve(exit);\n                } else {\n                  waiting.push(resolve);\n                }\n\n                count += 1;\n              });\n            };\n\n            function exit() {\n              count = Math.max(count - 1, 0);\n\n              if (waiting.length > 0) {\n                waiting.shift()(exit);\n              }\n            }\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    7: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * Licensed under the MIT License at:\n       * http://www.opensource.org/licenses/mit-license.php\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var when = require('./when');\n\n          var Promise = when.Promise;\n          var toPromise = when.resolve;\n          return {\n            all: when.lift(all),\n            map: map,\n            settle: settle\n          };\n          /**\n           * Resolve all the key-value pairs in the supplied object or promise\n           * for an object.\n           * @param {Promise|object} object or promise for object whose key-value pairs\n           *  will be resolved\n           * @returns {Promise} promise for an object with the fully resolved key-value pairs\n           */\n\n          function all(object) {\n            var p = Promise._defer();\n\n            var resolver = Promise._handler(p);\n\n            var results = {};\n            var keys = Object.keys(object);\n            var pending = keys.length;\n\n            for (var i = 0, k; i < keys.length; ++i) {\n              k = keys[i];\n\n              Promise._handler(object[k]).fold(settleKey, k, results, resolver);\n            }\n\n            if (pending === 0) {\n              resolver.resolve(results);\n            }\n\n            return p;\n\n            function settleKey(k, x, resolver) {\n              /*jshint validthis:true*/\n              this[k] = x;\n\n              if (--pending === 0) {\n                resolver.resolve(results);\n              }\n            }\n          }\n          /**\n           * Map values in the supplied object's keys\n           * @param {Promise|object} object or promise for object whose key-value pairs\n           *  will be reduced\n           * @param {function(value:*, key:String):*} f mapping function which may\n           *  return either a promise or a value\n           * @returns {Promise} promise for an object with the mapped and fully\n           *  resolved key-value pairs\n           */\n\n\n          function map(object, f) {\n            return toPromise(object).then(function (object) {\n              return all(Object.keys(object).reduce(function (o, k) {\n                o[k] = toPromise(object[k]).fold(mapWithKey, k);\n                return o;\n              }, {}));\n            });\n\n            function mapWithKey(k, x) {\n              return f(x, k);\n            }\n          }\n          /**\n           * Resolve all key-value pairs in the supplied object and return a promise\n           * that will always fulfill with the outcome states of all input promises.\n           * @param {object} object whose key-value pairs will be settled\n           * @returns {Promise} promise for an object with the mapped and fully\n           *  settled key-value pairs\n           */\n\n\n          function settle(object) {\n            var keys = Object.keys(object);\n            var results = {};\n\n            if (keys.length === 0) {\n              return toPromise(results);\n            }\n\n            var p = Promise._defer();\n\n            var resolver = Promise._handler(p);\n\n            var promises = keys.map(function (k) {\n              return object[k];\n            });\n            when.settle(promises).then(function (states) {\n              populateResults(keys, states, results, resolver);\n            });\n            return p;\n          }\n\n          function populateResults(keys, states, results, resolver) {\n            for (var i = 0; i < keys.length; i++) {\n              results[keys[i]] = states[i];\n            }\n\n            resolver.resolve(results);\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    8: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var makePromise = require('./makePromise');\n\n          var Scheduler = require('./Scheduler');\n\n          var async = require('./env').asap;\n\n          return makePromise({\n            scheduler: new Scheduler(async)\n          });\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./Scheduler\": 9,\n      \"./env\": 21,\n      \"./makePromise\": 24\n    }],\n    9: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          // Credit to Twisol (https://github.com/Twisol) for suggesting\n          // this type of extensible queue + trampoline approach for next-tick conflation.\n\n          /**\n           * Async task scheduler\n           * @param {function} async function to schedule a single async function\n           * @constructor\n           */\n          function Scheduler(async) {\n            this._async = async;\n            this._running = false;\n            this._queue = this;\n            this._queueLen = 0;\n            this._afterQueue = {};\n            this._afterQueueLen = 0;\n            var self = this;\n\n            this.drain = function () {\n              self._drain();\n            };\n          }\n          /**\n           * Enqueue a task\n           * @param {{ run:function }} task\n           */\n\n\n          Scheduler.prototype.enqueue = function (task) {\n            this._queue[this._queueLen++] = task;\n            this.run();\n          };\n          /**\n           * Enqueue a task to run after the main task queue\n           * @param {{ run:function }} task\n           */\n\n\n          Scheduler.prototype.afterQueue = function (task) {\n            this._afterQueue[this._afterQueueLen++] = task;\n            this.run();\n          };\n\n          Scheduler.prototype.run = function () {\n            if (!this._running) {\n              this._running = true;\n\n              this._async(this.drain);\n            }\n          };\n          /**\n           * Drain the handler queue entirely, and then the after queue\n           */\n\n\n          Scheduler.prototype._drain = function () {\n            var i = 0;\n\n            for (; i < this._queueLen; ++i) {\n              this._queue[i].run();\n\n              this._queue[i] = void 0;\n            }\n\n            this._queueLen = 0;\n            this._running = false;\n\n            for (i = 0; i < this._afterQueueLen; ++i) {\n              this._afterQueue[i].run();\n\n              this._afterQueue[i] = void 0;\n            }\n\n            this._afterQueueLen = 0;\n          };\n\n          return Scheduler;\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    10: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          /**\n           * Custom error type for promises rejected by promise.timeout\n           * @param {string} message\n           * @constructor\n           */\n          function TimeoutError(message) {\n            Error.call(this);\n            this.message = message;\n            this.name = TimeoutError.name;\n\n            if (typeof Error.captureStackTrace === 'function') {\n              Error.captureStackTrace(this, TimeoutError);\n            }\n          }\n\n          TimeoutError.prototype = Object.create(Error.prototype);\n          TimeoutError.prototype.constructor = TimeoutError;\n          return TimeoutError;\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    11: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          makeApply.tryCatchResolve = tryCatchResolve;\n          return makeApply;\n\n          function makeApply(Promise, call) {\n            if (arguments.length < 2) {\n              call = tryCatchResolve;\n            }\n\n            return apply;\n\n            function apply(f, thisArg, args) {\n              var p = Promise._defer();\n\n              var l = args.length;\n              var params = new Array(l);\n              callAndResolve({\n                f: f,\n                thisArg: thisArg,\n                args: args,\n                params: params,\n                i: l - 1,\n                call: call\n              }, p._handler);\n              return p;\n            }\n\n            function callAndResolve(c, h) {\n              if (c.i < 0) {\n                return call(c.f, c.thisArg, c.params, h);\n              }\n\n              var handler = Promise._handler(c.args[c.i]);\n\n              handler.fold(callAndResolveNext, c, void 0, h);\n            }\n\n            function callAndResolveNext(c, x, h) {\n              c.params[c.i] = x;\n              c.i -= 1;\n              callAndResolve(c, h);\n            }\n          }\n\n          function tryCatchResolve(f, thisArg, args, resolver) {\n            try {\n              resolver.resolve(f.apply(thisArg, args));\n            } catch (e) {\n              resolver.reject(e);\n            }\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    12: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var state = require('../state');\n\n          var applier = require('../apply');\n\n          return function array(Promise) {\n            var applyFold = applier(Promise);\n            var toPromise = Promise.resolve;\n            var all = Promise.all;\n            var ar = Array.prototype.reduce;\n            var arr = Array.prototype.reduceRight;\n            var slice = Array.prototype.slice; // Additional array combinators\n\n            Promise.any = any;\n            Promise.some = some;\n            Promise.settle = settle;\n            Promise.map = map;\n            Promise.filter = filter;\n            Promise.reduce = reduce;\n            Promise.reduceRight = reduceRight;\n            /**\n             * When this promise fulfills with an array, do\n             * onFulfilled.apply(void 0, array)\n             * @param {function} onFulfilled function to apply\n             * @returns {Promise} promise for the result of applying onFulfilled\n             */\n\n            Promise.prototype.spread = function (onFulfilled) {\n              return this.then(all).then(function (array) {\n                return onFulfilled.apply(this, array);\n              });\n            };\n\n            return Promise;\n            /**\n             * One-winner competitive race.\n             * Return a promise that will fulfill when one of the promises\n             * in the input array fulfills, or will reject when all promises\n             * have rejected.\n             * @param {array} promises\n             * @returns {Promise} promise for the first fulfilled value\n             */\n\n            function any(promises) {\n              var p = Promise._defer();\n\n              var resolver = p._handler;\n              var l = promises.length >>> 0;\n              var pending = l;\n              var errors = [];\n\n              for (var h, x, i = 0; i < l; ++i) {\n                x = promises[i];\n\n                if (x === void 0 && !(i in promises)) {\n                  --pending;\n                  continue;\n                }\n\n                h = Promise._handler(x);\n\n                if (h.state() > 0) {\n                  resolver.become(h);\n\n                  Promise._visitRemaining(promises, i, h);\n\n                  break;\n                } else {\n                  h.visit(resolver, handleFulfill, handleReject);\n                }\n              }\n\n              if (pending === 0) {\n                resolver.reject(new RangeError('any(): array must not be empty'));\n              }\n\n              return p;\n\n              function handleFulfill(x) {\n                /*jshint validthis:true*/\n                errors = null;\n                this.resolve(x); // this === resolver\n              }\n\n              function handleReject(e) {\n                /*jshint validthis:true*/\n                if (this.resolved) {\n                  // this === resolver\n                  return;\n                }\n\n                errors.push(e);\n\n                if (--pending === 0) {\n                  this.reject(errors);\n                }\n              }\n            }\n            /**\n             * N-winner competitive race\n             * Return a promise that will fulfill when n input promises have\n             * fulfilled, or will reject when it becomes impossible for n\n             * input promises to fulfill (ie when promises.length - n + 1\n             * have rejected)\n             * @param {array} promises\n             * @param {number} n\n             * @returns {Promise} promise for the earliest n fulfillment values\n             *\n             * @deprecated\n             */\n\n\n            function some(promises, n) {\n              /*jshint maxcomplexity:7*/\n              var p = Promise._defer();\n\n              var resolver = p._handler;\n              var results = [];\n              var errors = [];\n              var l = promises.length >>> 0;\n              var nFulfill = 0;\n              var nReject;\n              var x, i; // reused in both for() loops\n              // First pass: count actual array items\n\n              for (i = 0; i < l; ++i) {\n                x = promises[i];\n\n                if (x === void 0 && !(i in promises)) {\n                  continue;\n                }\n\n                ++nFulfill;\n              } // Compute actual goals\n\n\n              n = Math.max(n, 0);\n              nReject = nFulfill - n + 1;\n              nFulfill = Math.min(n, nFulfill);\n\n              if (n > nFulfill) {\n                resolver.reject(new RangeError('some(): array must contain at least ' + n + ' item(s), but had ' + nFulfill));\n              } else if (nFulfill === 0) {\n                resolver.resolve(results);\n              } // Second pass: observe each array item, make progress toward goals\n\n\n              for (i = 0; i < l; ++i) {\n                x = promises[i];\n\n                if (x === void 0 && !(i in promises)) {\n                  continue;\n                }\n\n                Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n              }\n\n              return p;\n\n              function fulfill(x) {\n                /*jshint validthis:true*/\n                if (this.resolved) {\n                  // this === resolver\n                  return;\n                }\n\n                results.push(x);\n\n                if (--nFulfill === 0) {\n                  errors = null;\n                  this.resolve(results);\n                }\n              }\n\n              function reject(e) {\n                /*jshint validthis:true*/\n                if (this.resolved) {\n                  // this === resolver\n                  return;\n                }\n\n                errors.push(e);\n\n                if (--nReject === 0) {\n                  results = null;\n                  this.reject(errors);\n                }\n              }\n            }\n            /**\n             * Apply f to the value of each promise in a list of promises\n             * and return a new list containing the results.\n             * @param {array} promises\n             * @param {function(x:*, index:Number):*} f mapping function\n             * @returns {Promise}\n             */\n\n\n            function map(promises, f) {\n              return Promise._traverse(f, promises);\n            }\n            /**\n             * Filter the provided array of promises using the provided predicate.  Input may\n             * contain promises and values\n             * @param {Array} promises array of promises and values\n             * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n             *  Must return truthy (or promise for truthy) for items to retain.\n             * @returns {Promise} promise that will fulfill with an array containing all items\n             *  for which predicate returned truthy.\n             */\n\n\n            function filter(promises, predicate) {\n              var a = slice.call(promises);\n              return Promise._traverse(predicate, a).then(function (keep) {\n                return filterSync(a, keep);\n              });\n            }\n\n            function filterSync(promises, keep) {\n              // Safe because we know all promises have fulfilled if we've made it this far\n              var l = keep.length;\n              var filtered = new Array(l);\n\n              for (var i = 0, j = 0; i < l; ++i) {\n                if (keep[i]) {\n                  filtered[j++] = Promise._handler(promises[i]).value;\n                }\n              }\n\n              filtered.length = j;\n              return filtered;\n            }\n            /**\n             * Return a promise that will always fulfill with an array containing\n             * the outcome states of all input promises.  The returned promise\n             * will never reject.\n             * @param {Array} promises\n             * @returns {Promise} promise for array of settled state descriptors\n             */\n\n\n            function settle(promises) {\n              return all(promises.map(settleOne));\n            }\n\n            function settleOne(p) {\n              // Optimize the case where we get an already-resolved when.js promise\n              //  by extracting its state:\n              var handler;\n\n              if (p instanceof Promise) {\n                // This is our own Promise type and we can reach its handler internals:\n                handler = p._handler.join();\n              }\n\n              if (handler && handler.state() === 0 || !handler) {\n                // Either still pending, or not a Promise at all:\n                return toPromise(p).then(state.fulfilled, state.rejected);\n              } // The promise is our own, but it is already resolved. Take a shortcut.\n              // Since we're not actually handling the resolution, we need to disable\n              // rejection reporting.\n\n\n              handler._unreport();\n\n              return state.inspect(handler);\n            }\n            /**\n             * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n             * input may contain promises and/or values, and reduceFunc\n             * may return either a value or a promise, *and* initialValue may\n             * be a promise for the starting value.\n             * @param {Array|Promise} promises array or promise for an array of anything,\n             *      may contain a mix of promises and values.\n             * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n             * @returns {Promise} that will resolve to the final reduced value\n             */\n\n\n            function reduce(promises, f\n            /*, initialValue */\n            ) {\n              return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2]) : ar.call(promises, liftCombine(f));\n            }\n            /**\n             * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n             * input may contain promises and/or values, and reduceFunc\n             * may return either a value or a promise, *and* initialValue may\n             * be a promise for the starting value.\n             * @param {Array|Promise} promises array or promise for an array of anything,\n             *      may contain a mix of promises and values.\n             * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n             * @returns {Promise} that will resolve to the final reduced value\n             */\n\n\n            function reduceRight(promises, f\n            /*, initialValue */\n            ) {\n              return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2]) : arr.call(promises, liftCombine(f));\n            }\n\n            function liftCombine(f) {\n              return function (z, x, i) {\n                return applyFold(f, void 0, [z, x, i]);\n              };\n            }\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"../apply\": 11,\n      \"../state\": 25\n    }],\n    13: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function flow(Promise) {\n            var resolve = Promise.resolve;\n            var reject = Promise.reject;\n            var origCatch = Promise.prototype['catch'];\n            /**\n             * Handle the ultimate fulfillment value or rejection reason, and assume\n             * responsibility for all errors.  If an error propagates out of result\n             * or handleFatalError, it will be rethrown to the host, resulting in a\n             * loud stack track on most platforms and a crash on some.\n             * @param {function?} onResult\n             * @param {function?} onError\n             * @returns {undefined}\n             */\n\n            Promise.prototype.done = function (onResult, onError) {\n              this._handler.visit(this._handler.receiver, onResult, onError);\n            };\n            /**\n             * Add Error-type and predicate matching to catch.  Examples:\n             * promise.catch(TypeError, handleTypeError)\n             *   .catch(predicate, handleMatchedErrors)\n             *   .catch(handleRemainingErrors)\n             * @param onRejected\n             * @returns {*}\n             */\n\n\n            Promise.prototype['catch'] = Promise.prototype.otherwise = function (onRejected) {\n              if (arguments.length < 2) {\n                return origCatch.call(this, onRejected);\n              }\n\n              if (typeof onRejected !== 'function') {\n                return this.ensure(rejectInvalidPredicate);\n              }\n\n              return origCatch.call(this, createCatchFilter(arguments[1], onRejected));\n            };\n            /**\n             * Wraps the provided catch handler, so that it will only be called\n             * if the predicate evaluates truthy\n             * @param {?function} handler\n             * @param {function} predicate\n             * @returns {function} conditional catch handler\n             */\n\n\n            function createCatchFilter(handler, predicate) {\n              return function (e) {\n                return evaluatePredicate(e, predicate) ? handler.call(this, e) : reject(e);\n              };\n            }\n            /**\n             * Ensures that onFulfilledOrRejected will be called regardless of whether\n             * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT\n             * receive the promises' value or reason.  Any returned value will be disregarded.\n             * onFulfilledOrRejected may throw or return a rejected promise to signal\n             * an additional error.\n             * @param {function} handler handler to be called regardless of\n             *  fulfillment or rejection\n             * @returns {Promise}\n             */\n\n\n            Promise.prototype['finally'] = Promise.prototype.ensure = function (handler) {\n              if (typeof handler !== 'function') {\n                return this;\n              }\n\n              return this.then(function (x) {\n                return runSideEffect(handler, this, identity, x);\n              }, function (e) {\n                return runSideEffect(handler, this, reject, e);\n              });\n            };\n\n            function runSideEffect(handler, thisArg, propagate, value) {\n              var result = handler.call(thisArg);\n              return maybeThenable(result) ? propagateValue(result, propagate, value) : propagate(value);\n            }\n\n            function propagateValue(result, propagate, x) {\n              return resolve(result).then(function () {\n                return propagate(x);\n              });\n            }\n            /**\n             * Recover from a failure by returning a defaultValue.  If defaultValue\n             * is a promise, it's fulfillment value will be used.  If defaultValue is\n             * a promise that rejects, the returned promise will reject with the\n             * same reason.\n             * @param {*} defaultValue\n             * @returns {Promise} new promise\n             */\n\n\n            Promise.prototype['else'] = Promise.prototype.orElse = function (defaultValue) {\n              return this.then(void 0, function () {\n                return defaultValue;\n              });\n            };\n            /**\n             * Shortcut for .then(function() { return value; })\n             * @param  {*} value\n             * @return {Promise} a promise that:\n             *  - is fulfilled if value is not a promise, or\n             *  - if value is a promise, will fulfill with its value, or reject\n             *    with its reason.\n             */\n\n\n            Promise.prototype['yield'] = function (value) {\n              return this.then(function () {\n                return value;\n              });\n            };\n            /**\n             * Runs a side effect when this promise fulfills, without changing the\n             * fulfillment value.\n             * @param {function} onFulfilledSideEffect\n             * @returns {Promise}\n             */\n\n\n            Promise.prototype.tap = function (onFulfilledSideEffect) {\n              return this.then(onFulfilledSideEffect)['yield'](this);\n            };\n\n            return Promise;\n          };\n\n          function rejectInvalidPredicate() {\n            throw new TypeError('catch predicate must be a function');\n          }\n\n          function evaluatePredicate(e, predicate) {\n            return isError(predicate) ? e instanceof predicate : predicate(e);\n          }\n\n          function isError(predicate) {\n            return predicate === Error || predicate != null && predicate.prototype instanceof Error;\n          }\n\n          function maybeThenable(x) {\n            return (typeof x === 'object' || typeof x === 'function') && x !== null;\n          }\n\n          function identity(x) {\n            return x;\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    14: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n\n      /** @author Jeff Escalante */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function fold(Promise) {\n            Promise.prototype.fold = function (f, z) {\n              var promise = this._beget();\n\n              this._handler.fold(function (z, x, to) {\n                Promise._handler(z).fold(function (x, z, to) {\n                  to.resolve(f.call(this, z, x));\n                }, x, this, to);\n              }, z, promise._handler.receiver, promise._handler);\n\n              return promise;\n            };\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    15: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var inspect = require('../state').inspect;\n\n          return function inspection(Promise) {\n            Promise.prototype.inspect = function () {\n              return inspect(Promise._handler(this));\n            };\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"../state\": 25\n    }],\n    16: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function generate(Promise) {\n            var resolve = Promise.resolve;\n            Promise.iterate = iterate;\n            Promise.unfold = unfold;\n            return Promise;\n            /**\n             * @deprecated Use github.com/cujojs/most streams and most.iterate\n             * Generate a (potentially infinite) stream of promised values:\n             * x, f(x), f(f(x)), etc. until condition(x) returns true\n             * @param {function} f function to generate a new x from the previous x\n             * @param {function} condition function that, given the current x, returns\n             *  truthy when the iterate should stop\n             * @param {function} handler function to handle the value produced by f\n             * @param {*|Promise} x starting value, may be a promise\n             * @return {Promise} the result of the last call to f before\n             *  condition returns true\n             */\n\n            function iterate(f, condition, handler, x) {\n              return unfold(function (x) {\n                return [x, f(x)];\n              }, condition, handler, x);\n            }\n            /**\n             * @deprecated Use github.com/cujojs/most streams and most.unfold\n             * Generate a (potentially infinite) stream of promised values\n             * by applying handler(generator(seed)) iteratively until\n             * condition(seed) returns true.\n             * @param {function} unspool function that generates a [value, newSeed]\n             *  given a seed.\n             * @param {function} condition function that, given the current seed, returns\n             *  truthy when the unfold should stop\n             * @param {function} handler function to handle the value produced by unspool\n             * @param x {*|Promise} starting value, may be a promise\n             * @return {Promise} the result of the last value produced by unspool before\n             *  condition returns true\n             */\n\n\n            function unfold(unspool, condition, handler, x) {\n              return resolve(x).then(function (seed) {\n                return resolve(condition(seed)).then(function (done) {\n                  return done ? seed : resolve(unspool(seed)).spread(next);\n                });\n              });\n\n              function next(item, newSeed) {\n                return resolve(handler(item)).then(function () {\n                  return unfold(unspool, condition, handler, newSeed);\n                });\n              }\n            }\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    17: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function progress(Promise) {\n            /**\n             * @deprecated\n             * Register a progress handler for this promise\n             * @param {function} onProgress\n             * @returns {Promise}\n             */\n            Promise.prototype.progress = function (onProgress) {\n              return this.then(void 0, void 0, onProgress);\n            };\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    18: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var env = require('../env');\n\n          var TimeoutError = require('../TimeoutError');\n\n          function setTimeout(f, ms, x, y) {\n            return env.setTimer(function () {\n              f(x, y, ms);\n            }, ms);\n          }\n\n          return function timed(Promise) {\n            /**\n             * Return a new promise whose fulfillment value is revealed only\n             * after ms milliseconds\n             * @param {number} ms milliseconds\n             * @returns {Promise}\n             */\n            Promise.prototype.delay = function (ms) {\n              var p = this._beget();\n\n              this._handler.fold(handleDelay, ms, void 0, p._handler);\n\n              return p;\n            };\n\n            function handleDelay(ms, x, h) {\n              setTimeout(resolveDelay, ms, x, h);\n            }\n\n            function resolveDelay(x, h) {\n              h.resolve(x);\n            }\n            /**\n             * Return a new promise that rejects after ms milliseconds unless\n             * this promise fulfills earlier, in which case the returned promise\n             * fulfills with the same value.\n             * @param {number} ms milliseconds\n             * @param {Error|*=} reason optional rejection reason to use, defaults\n             *   to a TimeoutError if not provided\n             * @returns {Promise}\n             */\n\n\n            Promise.prototype.timeout = function (ms, reason) {\n              var p = this._beget();\n\n              var h = p._handler;\n              var t = setTimeout(onTimeout, ms, reason, p._handler);\n\n              this._handler.visit(h, function onFulfill(x) {\n                env.clearTimer(t);\n                this.resolve(x); // this = h\n              }, function onReject(x) {\n                env.clearTimer(t);\n                this.reject(x); // this = h\n              }, h.notify);\n\n              return p;\n            };\n\n            function onTimeout(reason, h, ms) {\n              var e = typeof reason === 'undefined' ? new TimeoutError('timed out after ' + ms + 'ms') : reason;\n              h.reject(e);\n            }\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"../TimeoutError\": 10,\n      \"../env\": 21\n    }],\n    19: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var setTimer = require('../env').setTimer;\n\n          var format = require('../format');\n\n          return function unhandledRejection(Promise) {\n            var logError = noop;\n            var logInfo = noop;\n            var localConsole;\n\n            if (typeof console !== 'undefined') {\n              // Alias console to prevent things like uglify's drop_console option from\n              // removing console.log/error. Unhandled rejections fall into the same\n              // category as uncaught exceptions, and build tools shouldn't silence them.\n              localConsole = console;\n              logError = typeof localConsole.error !== 'undefined' ? function (e) {\n                localConsole.error(e);\n              } : function (e) {\n                localConsole.log(e);\n              };\n              logInfo = typeof localConsole.info !== 'undefined' ? function (e) {\n                localConsole.info(e);\n              } : function (e) {\n                localConsole.log(e);\n              };\n            }\n\n            Promise.onPotentiallyUnhandledRejection = function (rejection) {\n              enqueue(report, rejection);\n            };\n\n            Promise.onPotentiallyUnhandledRejectionHandled = function (rejection) {\n              enqueue(unreport, rejection);\n            };\n\n            Promise.onFatalRejection = function (rejection) {\n              enqueue(throwit, rejection.value);\n            };\n\n            var tasks = [];\n            var reported = [];\n            var running = null;\n\n            function report(r) {\n              if (!r.handled) {\n                reported.push(r);\n                logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));\n              }\n            }\n\n            function unreport(r) {\n              var i = reported.indexOf(r);\n\n              if (i >= 0) {\n                reported.splice(i, 1);\n                logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));\n              }\n            }\n\n            function enqueue(f, x) {\n              tasks.push(f, x);\n\n              if (running === null) {\n                running = setTimer(flush, 0);\n              }\n            }\n\n            function flush() {\n              running = null;\n\n              while (tasks.length > 0) {\n                tasks.shift()(tasks.shift());\n              }\n            }\n\n            return Promise;\n          };\n\n          function throwit(e) {\n            throw e;\n          }\n\n          function noop() {}\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"../env\": 21,\n      \"../format\": 22\n    }],\n    20: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function addWith(Promise) {\n            /**\n             * Returns a promise whose handlers will be called with `this` set to\n             * the supplied receiver.  Subsequent promises derived from the\n             * returned promise will also have their handlers called with receiver\n             * as `this`. Calling `with` with undefined or no arguments will return\n             * a promise whose handlers will again be called in the usual Promises/A+\n             * way (no `this`) thus safely undoing any previous `with` in the\n             * promise chain.\n             *\n             * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n             * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n             *\n             * @param {object} receiver `this` value for all handlers attached to\n             *  the returned promise.\n             * @returns {Promise}\n             */\n            Promise.prototype['with'] = Promise.prototype.withThis = function (receiver) {\n              var p = this._beget();\n\n              var child = p._handler;\n              child.receiver = receiver;\n\n              this._handler.chain(child, receiver);\n\n              return p;\n            };\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    21: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n\n      /*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          /*jshint maxcomplexity:6*/\n          // Sniff \"best\" async scheduling option\n          // Prefer process.nextTick or MutationObserver, then check for\n          // setTimeout, and finally vertx, since its the only env that doesn't\n          // have setTimeout\n          var MutationObs;\n          var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout; // Default env\n\n          var setTimer = function (f, ms) {\n            return setTimeout(f, ms);\n          };\n\n          var clearTimer = function (t) {\n            return clearTimeout(t);\n          };\n\n          var asap = function (f) {\n            return capturedSetTimeout(f, 0);\n          }; // Detect specific env\n\n\n          if (isNode()) {\n            // Node\n            asap = function (f) {\n              return process.nextTick(f);\n            };\n          } else if (MutationObs = hasMutationObserver()) {\n            // Modern browser\n            asap = initMutationObserver(MutationObs);\n          } else if (!capturedSetTimeout) {\n            // vert.x\n            var vertxRequire = require;\n            var vertx = vertxRequire('vertx');\n\n            setTimer = function (f, ms) {\n              return vertx.setTimer(ms, f);\n            };\n\n            clearTimer = vertx.cancelTimer;\n            asap = vertx.runOnLoop || vertx.runOnContext;\n          }\n\n          return {\n            setTimer: setTimer,\n            clearTimer: clearTimer,\n            asap: asap\n          };\n\n          function isNode() {\n            return typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]';\n          }\n\n          function hasMutationObserver() {\n            return typeof MutationObserver !== 'undefined' && MutationObserver || typeof WebKitMutationObserver !== 'undefined' && WebKitMutationObserver;\n          }\n\n          function initMutationObserver(MutationObserver) {\n            var scheduled;\n            var node = document.createTextNode('');\n            var o = new MutationObserver(run);\n            o.observe(node, {\n              characterData: true\n            });\n\n            function run() {\n              var f = scheduled;\n              scheduled = void 0;\n              f();\n            }\n\n            var i = 0;\n            return function (f) {\n              scheduled = f;\n              node.data = i ^= 1;\n            };\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {}],\n    22: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return {\n            formatError: formatError,\n            formatObject: formatObject,\n            tryStringify: tryStringify\n          };\n          /**\n           * Format an error into a string.  If e is an Error and has a stack property,\n           * it's returned.  Otherwise, e is formatted using formatObject, with a\n           * warning added about e not being a proper Error.\n           * @param {*} e\n           * @returns {String} formatted string, suitable for output to developers\n           */\n\n          function formatError(e) {\n            var s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);\n            return e instanceof Error ? s : s + ' (WARNING: non-Error used)';\n          }\n          /**\n           * Format an object, detecting \"plain\" objects and running them through\n           * JSON.stringify if possible.\n           * @param {Object} o\n           * @returns {string}\n           */\n\n\n          function formatObject(o) {\n            var s = String(o);\n\n            if (s === '[object Object]' && typeof JSON !== 'undefined') {\n              s = tryStringify(o, s);\n            }\n\n            return s;\n          }\n          /**\n           * Try to return the result of JSON.stringify(x).  If that fails, return\n           * defaultValue\n           * @param {*} x\n           * @param {*} defaultValue\n           * @returns {String|*} JSON.stringify(x) or defaultValue\n           */\n\n\n          function tryStringify(x, defaultValue) {\n            try {\n              return JSON.stringify(x);\n            } catch (e) {\n              return defaultValue;\n            }\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    23: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function liftAll(liftOne, combine, dst, src) {\n            if (typeof combine === 'undefined') {\n              combine = defaultCombine;\n            }\n\n            return Object.keys(src).reduce(function (dst, key) {\n              var f = src[key];\n              return typeof f === 'function' ? combine(dst, liftOne(f), key) : dst;\n            }, typeof dst === 'undefined' ? defaultDst(src) : dst);\n          };\n\n          function defaultCombine(o, f, k) {\n            o[k] = f;\n            return o;\n          }\n\n          function defaultDst(src) {\n            return typeof src === 'function' ? src.bind() : Object.create(src);\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    24: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return function makePromise(environment) {\n            var tasks = environment.scheduler;\n            var emitRejection = initEmitRejection();\n\n            var objectCreate = Object.create || function (proto) {\n              function Child() {}\n\n              Child.prototype = proto;\n              return new Child();\n            };\n            /**\n             * Create a promise whose fate is determined by resolver\n             * @constructor\n             * @returns {Promise} promise\n             * @name Promise\n             */\n\n\n            function Promise(resolver, handler) {\n              this._handler = resolver === Handler ? handler : init(resolver);\n            }\n            /**\n             * Run the supplied resolver\n             * @param resolver\n             * @returns {Pending}\n             */\n\n\n            function init(resolver) {\n              var handler = new Pending();\n\n              try {\n                resolver(promiseResolve, promiseReject, promiseNotify);\n              } catch (e) {\n                promiseReject(e);\n              }\n\n              return handler;\n              /**\n               * Transition from pre-resolution state to post-resolution state, notifying\n               * all listeners of the ultimate fulfillment or rejection\n               * @param {*} x resolution value\n               */\n\n              function promiseResolve(x) {\n                handler.resolve(x);\n              }\n              /**\n               * Reject this promise with reason, which will be used verbatim\n               * @param {Error|*} reason rejection reason, strongly suggested\n               *   to be an Error type\n               */\n\n\n              function promiseReject(reason) {\n                handler.reject(reason);\n              }\n              /**\n               * @deprecated\n               * Issue a progress event, notifying all progress listeners\n               * @param {*} x progress event payload to pass to all listeners\n               */\n\n\n              function promiseNotify(x) {\n                handler.notify(x);\n              }\n            } // Creation\n\n\n            Promise.resolve = resolve;\n            Promise.reject = reject;\n            Promise.never = never;\n            Promise._defer = defer;\n            Promise._handler = getHandler;\n            /**\n             * Returns a trusted promise. If x is already a trusted promise, it is\n             * returned, otherwise returns a new trusted Promise which follows x.\n             * @param  {*} x\n             * @return {Promise} promise\n             */\n\n            function resolve(x) {\n              return isPromise(x) ? x : new Promise(Handler, new Async(getHandler(x)));\n            }\n            /**\n             * Return a reject promise with x as its reason (x is used verbatim)\n             * @param {*} x\n             * @returns {Promise} rejected promise\n             */\n\n\n            function reject(x) {\n              return new Promise(Handler, new Async(new Rejected(x)));\n            }\n            /**\n             * Return a promise that remains pending forever\n             * @returns {Promise} forever-pending promise.\n             */\n\n\n            function never() {\n              return foreverPendingPromise; // Should be frozen\n            }\n            /**\n             * Creates an internal {promise, resolver} pair\n             * @private\n             * @returns {Promise}\n             */\n\n\n            function defer() {\n              return new Promise(Handler, new Pending());\n            } // Transformation and flow control\n\n            /**\n             * Transform this promise's fulfillment value, returning a new Promise\n             * for the transformed result.  If the promise cannot be fulfilled, onRejected\n             * is called with the reason.  onProgress *may* be called with updates toward\n             * this promise's fulfillment.\n             * @param {function=} onFulfilled fulfillment handler\n             * @param {function=} onRejected rejection handler\n             * @param {function=} onProgress @deprecated progress handler\n             * @return {Promise} new promise\n             */\n\n\n            Promise.prototype.then = function (onFulfilled, onRejected, onProgress) {\n              var parent = this._handler;\n              var state = parent.join().state();\n\n              if (typeof onFulfilled !== 'function' && state > 0 || typeof onRejected !== 'function' && state < 0) {\n                // Short circuit: value will not change, simply share handler\n                return new this.constructor(Handler, parent);\n              }\n\n              var p = this._beget();\n\n              var child = p._handler;\n              parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);\n              return p;\n            };\n            /**\n             * If this promise cannot be fulfilled due to an error, call onRejected to\n             * handle the error. Shortcut for .then(undefined, onRejected)\n             * @param {function?} onRejected\n             * @return {Promise}\n             */\n\n\n            Promise.prototype['catch'] = function (onRejected) {\n              return this.then(void 0, onRejected);\n            };\n            /**\n             * Creates a new, pending promise of the same type as this promise\n             * @private\n             * @returns {Promise}\n             */\n\n\n            Promise.prototype._beget = function () {\n              return begetFrom(this._handler, this.constructor);\n            };\n\n            function begetFrom(parent, Promise) {\n              var child = new Pending(parent.receiver, parent.join().context);\n              return new Promise(Handler, child);\n            } // Array combinators\n\n\n            Promise.all = all;\n            Promise.race = race;\n            Promise._traverse = traverse;\n            /**\n             * Return a promise that will fulfill when all promises in the\n             * input array have fulfilled, or will reject when one of the\n             * promises rejects.\n             * @param {array} promises array of promises\n             * @returns {Promise} promise for array of fulfillment values\n             */\n\n            function all(promises) {\n              return traverseWith(snd, null, promises);\n            }\n            /**\n             * Array<Promise<X>> -> Promise<Array<f(X)>>\n             * @private\n             * @param {function} f function to apply to each promise's value\n             * @param {Array} promises array of promises\n             * @returns {Promise} promise for transformed values\n             */\n\n\n            function traverse(f, promises) {\n              return traverseWith(tryCatch2, f, promises);\n            }\n\n            function traverseWith(tryMap, f, promises) {\n              var handler = typeof f === 'function' ? mapAt : settleAt;\n              var resolver = new Pending();\n              var pending = promises.length >>> 0;\n              var results = new Array(pending);\n\n              for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {\n                x = promises[i];\n\n                if (x === void 0 && !(i in promises)) {\n                  --pending;\n                  continue;\n                }\n\n                traverseAt(promises, handler, i, x, resolver);\n              }\n\n              if (pending === 0) {\n                resolver.become(new Fulfilled(results));\n              }\n\n              return new Promise(Handler, resolver);\n\n              function mapAt(i, x, resolver) {\n                if (!resolver.resolved) {\n                  traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);\n                }\n              }\n\n              function settleAt(i, x, resolver) {\n                results[i] = x;\n\n                if (--pending === 0) {\n                  resolver.become(new Fulfilled(results));\n                }\n              }\n            }\n\n            function traverseAt(promises, handler, i, x, resolver) {\n              if (maybeThenable(x)) {\n                var h = getHandlerMaybeThenable(x);\n                var s = h.state();\n\n                if (s === 0) {\n                  h.fold(handler, i, void 0, resolver);\n                } else if (s > 0) {\n                  handler(i, h.value, resolver);\n                } else {\n                  resolver.become(h);\n                  visitRemaining(promises, i + 1, h);\n                }\n              } else {\n                handler(i, x, resolver);\n              }\n            }\n\n            Promise._visitRemaining = visitRemaining;\n\n            function visitRemaining(promises, start, handler) {\n              for (var i = start; i < promises.length; ++i) {\n                markAsHandled(getHandler(promises[i]), handler);\n              }\n            }\n\n            function markAsHandled(h, handler) {\n              if (h === handler) {\n                return;\n              }\n\n              var s = h.state();\n\n              if (s === 0) {\n                h.visit(h, void 0, h._unreport);\n              } else if (s < 0) {\n                h._unreport();\n              }\n            }\n            /**\n             * Fulfill-reject competitive race. Return a promise that will settle\n             * to the same state as the earliest input promise to settle.\n             *\n             * WARNING: The ES6 Promise spec requires that race()ing an empty array\n             * must return a promise that is pending forever.  This implementation\n             * returns a singleton forever-pending promise, the same singleton that is\n             * returned by Promise.never(), thus can be checked with ===\n             *\n             * @param {array} promises array of promises to race\n             * @returns {Promise} if input is non-empty, a promise that will settle\n             * to the same outcome as the earliest input promise to settle. if empty\n             * is empty, returns a promise that will never settle.\n             */\n\n\n            function race(promises) {\n              if (typeof promises !== 'object' || promises === null) {\n                return reject(new TypeError('non-iterable passed to race()'));\n              } // Sigh, race([]) is untestable unless we return *something*\n              // that is recognizable without calling .then() on it.\n\n\n              return promises.length === 0 ? never() : promises.length === 1 ? resolve(promises[0]) : runRace(promises);\n            }\n\n            function runRace(promises) {\n              var resolver = new Pending();\n              var i, x, h;\n\n              for (i = 0; i < promises.length; ++i) {\n                x = promises[i];\n\n                if (x === void 0 && !(i in promises)) {\n                  continue;\n                }\n\n                h = getHandler(x);\n\n                if (h.state() !== 0) {\n                  resolver.become(h);\n                  visitRemaining(promises, i + 1, h);\n                  break;\n                } else {\n                  h.visit(resolver, resolver.resolve, resolver.reject);\n                }\n              }\n\n              return new Promise(Handler, resolver);\n            } // Promise internals\n            // Below this, everything is @private\n\n            /**\n             * Get an appropriate handler for x, without checking for cycles\n             * @param {*} x\n             * @returns {object} handler\n             */\n\n\n            function getHandler(x) {\n              if (isPromise(x)) {\n                return x._handler.join();\n              }\n\n              return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);\n            }\n            /**\n             * Get a handler for thenable x.\n             * NOTE: You must only call this if maybeThenable(x) == true\n             * @param {object|function|Promise} x\n             * @returns {object} handler\n             */\n\n\n            function getHandlerMaybeThenable(x) {\n              return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);\n            }\n            /**\n             * Get a handler for potentially untrusted thenable x\n             * @param {*} x\n             * @returns {object} handler\n             */\n\n\n            function getHandlerUntrusted(x) {\n              try {\n                var untrustedThen = x.then;\n                return typeof untrustedThen === 'function' ? new Thenable(untrustedThen, x) : new Fulfilled(x);\n              } catch (e) {\n                return new Rejected(e);\n              }\n            }\n            /**\n             * Handler for a promise that is pending forever\n             * @constructor\n             */\n\n\n            function Handler() {}\n\n            Handler.prototype.when = Handler.prototype.become = Handler.prototype.notify // deprecated\n            = Handler.prototype.fail = Handler.prototype._unreport = Handler.prototype._report = noop;\n            Handler.prototype._state = 0;\n\n            Handler.prototype.state = function () {\n              return this._state;\n            };\n            /**\n             * Recursively collapse handler chain to find the handler\n             * nearest to the fully resolved value.\n             * @returns {object} handler nearest the fully resolved value\n             */\n\n\n            Handler.prototype.join = function () {\n              var h = this;\n\n              while (h.handler !== void 0) {\n                h = h.handler;\n              }\n\n              return h;\n            };\n\n            Handler.prototype.chain = function (to, receiver, fulfilled, rejected, progress) {\n              this.when({\n                resolver: to,\n                receiver: receiver,\n                fulfilled: fulfilled,\n                rejected: rejected,\n                progress: progress\n              });\n            };\n\n            Handler.prototype.visit = function (receiver, fulfilled, rejected, progress) {\n              this.chain(failIfRejected, receiver, fulfilled, rejected, progress);\n            };\n\n            Handler.prototype.fold = function (f, z, c, to) {\n              this.when(new Fold(f, z, c, to));\n            };\n            /**\n             * Handler that invokes fail() on any handler it becomes\n             * @constructor\n             */\n\n\n            function FailIfRejected() {}\n\n            inherit(Handler, FailIfRejected);\n\n            FailIfRejected.prototype.become = function (h) {\n              h.fail();\n            };\n\n            var failIfRejected = new FailIfRejected();\n            /**\n             * Handler that manages a queue of consumers waiting on a pending promise\n             * @constructor\n             */\n\n            function Pending(receiver, inheritedContext) {\n              Promise.createContext(this, inheritedContext);\n              this.consumers = void 0;\n              this.receiver = receiver;\n              this.handler = void 0;\n              this.resolved = false;\n            }\n\n            inherit(Handler, Pending);\n            Pending.prototype._state = 0;\n\n            Pending.prototype.resolve = function (x) {\n              this.become(getHandler(x));\n            };\n\n            Pending.prototype.reject = function (x) {\n              if (this.resolved) {\n                return;\n              }\n\n              this.become(new Rejected(x));\n            };\n\n            Pending.prototype.join = function () {\n              if (!this.resolved) {\n                return this;\n              }\n\n              var h = this;\n\n              while (h.handler !== void 0) {\n                h = h.handler;\n\n                if (h === this) {\n                  return this.handler = cycle();\n                }\n              }\n\n              return h;\n            };\n\n            Pending.prototype.run = function () {\n              var q = this.consumers;\n              var handler = this.handler;\n              this.handler = this.handler.join();\n              this.consumers = void 0;\n\n              for (var i = 0; i < q.length; ++i) {\n                handler.when(q[i]);\n              }\n            };\n\n            Pending.prototype.become = function (handler) {\n              if (this.resolved) {\n                return;\n              }\n\n              this.resolved = true;\n              this.handler = handler;\n\n              if (this.consumers !== void 0) {\n                tasks.enqueue(this);\n              }\n\n              if (this.context !== void 0) {\n                handler._report(this.context);\n              }\n            };\n\n            Pending.prototype.when = function (continuation) {\n              if (this.resolved) {\n                tasks.enqueue(new ContinuationTask(continuation, this.handler));\n              } else {\n                if (this.consumers === void 0) {\n                  this.consumers = [continuation];\n                } else {\n                  this.consumers.push(continuation);\n                }\n              }\n            };\n            /**\n             * @deprecated\n             */\n\n\n            Pending.prototype.notify = function (x) {\n              if (!this.resolved) {\n                tasks.enqueue(new ProgressTask(x, this));\n              }\n            };\n\n            Pending.prototype.fail = function (context) {\n              var c = typeof context === 'undefined' ? this.context : context;\n              this.resolved && this.handler.join().fail(c);\n            };\n\n            Pending.prototype._report = function (context) {\n              this.resolved && this.handler.join()._report(context);\n            };\n\n            Pending.prototype._unreport = function () {\n              this.resolved && this.handler.join()._unreport();\n            };\n            /**\n             * Wrap another handler and force it into a future stack\n             * @param {object} handler\n             * @constructor\n             */\n\n\n            function Async(handler) {\n              this.handler = handler;\n            }\n\n            inherit(Handler, Async);\n\n            Async.prototype.when = function (continuation) {\n              tasks.enqueue(new ContinuationTask(continuation, this));\n            };\n\n            Async.prototype._report = function (context) {\n              this.join()._report(context);\n            };\n\n            Async.prototype._unreport = function () {\n              this.join()._unreport();\n            };\n            /**\n             * Handler that wraps an untrusted thenable and assimilates it in a future stack\n             * @param {function} then\n             * @param {{then: function}} thenable\n             * @constructor\n             */\n\n\n            function Thenable(then, thenable) {\n              Pending.call(this);\n              tasks.enqueue(new AssimilateTask(then, thenable, this));\n            }\n\n            inherit(Pending, Thenable);\n            /**\n             * Handler for a fulfilled promise\n             * @param {*} x fulfillment value\n             * @constructor\n             */\n\n            function Fulfilled(x) {\n              Promise.createContext(this);\n              this.value = x;\n            }\n\n            inherit(Handler, Fulfilled);\n            Fulfilled.prototype._state = 1;\n\n            Fulfilled.prototype.fold = function (f, z, c, to) {\n              runContinuation3(f, z, this, c, to);\n            };\n\n            Fulfilled.prototype.when = function (cont) {\n              runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);\n            };\n\n            var errorId = 0;\n            /**\n             * Handler for a rejected promise\n             * @param {*} x rejection reason\n             * @constructor\n             */\n\n            function Rejected(x) {\n              Promise.createContext(this);\n              this.id = ++errorId;\n              this.value = x;\n              this.handled = false;\n              this.reported = false;\n\n              this._report();\n            }\n\n            inherit(Handler, Rejected);\n            Rejected.prototype._state = -1;\n\n            Rejected.prototype.fold = function (f, z, c, to) {\n              to.become(this);\n            };\n\n            Rejected.prototype.when = function (cont) {\n              if (typeof cont.rejected === 'function') {\n                this._unreport();\n              }\n\n              runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);\n            };\n\n            Rejected.prototype._report = function (context) {\n              tasks.afterQueue(new ReportTask(this, context));\n            };\n\n            Rejected.prototype._unreport = function () {\n              if (this.handled) {\n                return;\n              }\n\n              this.handled = true;\n              tasks.afterQueue(new UnreportTask(this));\n            };\n\n            Rejected.prototype.fail = function (context) {\n              this.reported = true;\n              emitRejection('unhandledRejection', this);\n              Promise.onFatalRejection(this, context === void 0 ? this.context : context);\n            };\n\n            function ReportTask(rejection, context) {\n              this.rejection = rejection;\n              this.context = context;\n            }\n\n            ReportTask.prototype.run = function () {\n              if (!this.rejection.handled && !this.rejection.reported) {\n                this.rejection.reported = true;\n                emitRejection('unhandledRejection', this.rejection) || Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);\n              }\n            };\n\n            function UnreportTask(rejection) {\n              this.rejection = rejection;\n            }\n\n            UnreportTask.prototype.run = function () {\n              if (this.rejection.reported) {\n                emitRejection('rejectionHandled', this.rejection) || Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);\n              }\n            }; // Unhandled rejection hooks\n            // By default, everything is a noop\n\n\n            Promise.createContext = Promise.enterContext = Promise.exitContext = Promise.onPotentiallyUnhandledRejection = Promise.onPotentiallyUnhandledRejectionHandled = Promise.onFatalRejection = noop; // Errors and singletons\n\n            var foreverPendingHandler = new Handler();\n            var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);\n\n            function cycle() {\n              return new Rejected(new TypeError('Promise cycle'));\n            } // Task runners\n\n            /**\n             * Run a single consumer\n             * @constructor\n             */\n\n\n            function ContinuationTask(continuation, handler) {\n              this.continuation = continuation;\n              this.handler = handler;\n            }\n\n            ContinuationTask.prototype.run = function () {\n              this.handler.join().when(this.continuation);\n            };\n            /**\n             * Run a queue of progress handlers\n             * @constructor\n             */\n\n\n            function ProgressTask(value, handler) {\n              this.handler = handler;\n              this.value = value;\n            }\n\n            ProgressTask.prototype.run = function () {\n              var q = this.handler.consumers;\n\n              if (q === void 0) {\n                return;\n              }\n\n              for (var c, i = 0; i < q.length; ++i) {\n                c = q[i];\n                runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);\n              }\n            };\n            /**\n             * Assimilate a thenable, sending it's value to resolver\n             * @param {function} then\n             * @param {object|function} thenable\n             * @param {object} resolver\n             * @constructor\n             */\n\n\n            function AssimilateTask(then, thenable, resolver) {\n              this._then = then;\n              this.thenable = thenable;\n              this.resolver = resolver;\n            }\n\n            AssimilateTask.prototype.run = function () {\n              var h = this.resolver;\n              tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);\n\n              function _resolve(x) {\n                h.resolve(x);\n              }\n\n              function _reject(x) {\n                h.reject(x);\n              }\n\n              function _notify(x) {\n                h.notify(x);\n              }\n            };\n\n            function tryAssimilate(then, thenable, resolve, reject, notify) {\n              try {\n                then.call(thenable, resolve, reject, notify);\n              } catch (e) {\n                reject(e);\n              }\n            }\n            /**\n             * Fold a handler value with z\n             * @constructor\n             */\n\n\n            function Fold(f, z, c, to) {\n              this.f = f;\n              this.z = z;\n              this.c = c;\n              this.to = to;\n              this.resolver = failIfRejected;\n              this.receiver = this;\n            }\n\n            Fold.prototype.fulfilled = function (x) {\n              this.f.call(this.c, this.z, x, this.to);\n            };\n\n            Fold.prototype.rejected = function (x) {\n              this.to.reject(x);\n            };\n\n            Fold.prototype.progress = function (x) {\n              this.to.notify(x);\n            }; // Other helpers\n\n            /**\n             * @param {*} x\n             * @returns {boolean} true iff x is a trusted Promise\n             */\n\n\n            function isPromise(x) {\n              return x instanceof Promise;\n            }\n            /**\n             * Test just enough to rule out primitives, in order to take faster\n             * paths in some code\n             * @param {*} x\n             * @returns {boolean} false iff x is guaranteed *not* to be a thenable\n             */\n\n\n            function maybeThenable(x) {\n              return (typeof x === 'object' || typeof x === 'function') && x !== null;\n            }\n\n            function runContinuation1(f, h, receiver, next) {\n              if (typeof f !== 'function') {\n                return next.become(h);\n              }\n\n              Promise.enterContext(h);\n              tryCatchReject(f, h.value, receiver, next);\n              Promise.exitContext();\n            }\n\n            function runContinuation3(f, x, h, receiver, next) {\n              if (typeof f !== 'function') {\n                return next.become(h);\n              }\n\n              Promise.enterContext(h);\n              tryCatchReject3(f, x, h.value, receiver, next);\n              Promise.exitContext();\n            }\n            /**\n             * @deprecated\n             */\n\n\n            function runNotify(f, x, h, receiver, next) {\n              if (typeof f !== 'function') {\n                return next.notify(x);\n              }\n\n              Promise.enterContext(h);\n              tryCatchReturn(f, x, receiver, next);\n              Promise.exitContext();\n            }\n\n            function tryCatch2(f, a, b) {\n              try {\n                return f(a, b);\n              } catch (e) {\n                return reject(e);\n              }\n            }\n            /**\n             * Return f.call(thisArg, x), or if it throws return a rejected promise for\n             * the thrown exception\n             */\n\n\n            function tryCatchReject(f, x, thisArg, next) {\n              try {\n                next.become(getHandler(f.call(thisArg, x)));\n              } catch (e) {\n                next.become(new Rejected(e));\n              }\n            }\n            /**\n             * Same as above, but includes the extra argument parameter.\n             */\n\n\n            function tryCatchReject3(f, x, y, thisArg, next) {\n              try {\n                f.call(thisArg, x, y, next);\n              } catch (e) {\n                next.become(new Rejected(e));\n              }\n            }\n            /**\n             * @deprecated\n             * Return f.call(thisArg, x), or if it throws, *return* the exception\n             */\n\n\n            function tryCatchReturn(f, x, thisArg, next) {\n              try {\n                next.notify(f.call(thisArg, x));\n              } catch (e) {\n                next.notify(e);\n              }\n            }\n\n            function inherit(Parent, Child) {\n              Child.prototype = objectCreate(Parent.prototype);\n              Child.prototype.constructor = Child;\n            }\n\n            function snd(x, y) {\n              return y;\n            }\n\n            function noop() {}\n\n            function hasCustomEvent() {\n              if (typeof CustomEvent === 'function') {\n                try {\n                  var ev = new CustomEvent('unhandledRejection');\n                  return ev instanceof CustomEvent;\n                } catch (ignoredException) {}\n              }\n\n              return false;\n            }\n\n            function hasInternetExplorerCustomEvent() {\n              if (typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n                try {\n                  // Try to create one event to make sure it's supported\n                  var ev = document.createEvent('CustomEvent');\n                  ev.initCustomEvent('eventType', false, true, {});\n                  return true;\n                } catch (ignoredException) {}\n              }\n\n              return false;\n            }\n\n            function initEmitRejection() {\n              /*global process, self, CustomEvent*/\n              if (typeof process !== 'undefined' && process !== null && typeof process.emit === 'function') {\n                // Returning falsy here means to call the default\n                // onPotentiallyUnhandledRejection API.  This is safe even in\n                // browserify since process.emit always returns falsy in browserify:\n                // https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46\n                return function (type, rejection) {\n                  return type === 'unhandledRejection' ? process.emit(type, rejection.value, rejection) : process.emit(type, rejection);\n                };\n              } else if (typeof self !== 'undefined' && hasCustomEvent()) {\n                return function (self, CustomEvent) {\n                  return function (type, rejection) {\n                    var ev = new CustomEvent(type, {\n                      detail: {\n                        reason: rejection.value,\n                        key: rejection\n                      },\n                      bubbles: false,\n                      cancelable: true\n                    });\n                    return !self.dispatchEvent(ev);\n                  };\n                }(self, CustomEvent);\n              } else if (typeof self !== 'undefined' && hasInternetExplorerCustomEvent()) {\n                return function (self, document) {\n                  return function (type, rejection) {\n                    var ev = document.createEvent('CustomEvent');\n                    ev.initCustomEvent(type, false, true, {\n                      reason: rejection.value,\n                      key: rejection\n                    });\n                    return !self.dispatchEvent(ev);\n                  };\n                }(self, document);\n              }\n\n              return noop;\n            }\n\n            return Promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    25: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /** @author Brian Cavalier */\n\n      /** @author John Hann */\n      (function (define) {\n        'use strict';\n\n        define(function () {\n          return {\n            pending: toPendingState,\n            fulfilled: toFulfilledState,\n            rejected: toRejectedState,\n            inspect: inspect\n          };\n\n          function toPendingState() {\n            return {\n              state: 'pending'\n            };\n          }\n\n          function toRejectedState(e) {\n            return {\n              state: 'rejected',\n              reason: e\n            };\n          }\n\n          function toFulfilledState(x) {\n            return {\n              state: 'fulfilled',\n              value: x\n            };\n          }\n\n          function inspect(handler) {\n            var state = handler.state();\n            return state === 0 ? toPendingState() : state > 0 ? toFulfilledState(handler.value) : toRejectedState(handler.value);\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory();\n      });\n    }, {}],\n    26: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2013 original author or authors */\n\n      /**\n       * Collection of helpers for interfacing with node-style asynchronous functions\n       * using promises.\n       *\n       * @author Brian Cavalier\n       * @contributor Renato Zannon\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var _liftAll = require('./lib/liftAll');\n\n          var setTimer = require('./lib/env').setTimer;\n\n          var slice = Array.prototype.slice;\n\n          var _apply = require('./lib/apply')(when.Promise, dispatch);\n\n          return {\n            lift: lift,\n            liftAll: liftAll,\n            apply: apply,\n            call: call,\n            createCallback: createCallback,\n            bindCallback: bindCallback,\n            liftCallback: liftCallback\n          };\n          /**\n           * Takes a node-style async function and calls it immediately (with an optional\n           * array of arguments or promises for arguments). It returns a promise whose\n           * resolution depends on whether the async functions calls its callback with the\n           * conventional error argument or not.\n           *\n           * With this it becomes possible to leverage existing APIs while still reaping\n           * the benefits of promises.\n           *\n           * @example\n           *    function onlySmallNumbers(n, callback) {\n           *\t\tif(n < 10) {\n           *\t\t\tcallback(null, n + 10);\n           *\t\t} else {\n           *\t\t\tcallback(new Error(\"Calculation failed\"));\n           *\t\t}\n           *\t}\n           *\n           *    var nodefn = require(\"when/node/function\");\n           *\n           *    // Logs '15'\n           *    nodefn.apply(onlySmallNumbers, [5]).then(console.log, console.error);\n           *\n           *    // Logs 'Calculation failed'\n           *    nodefn.apply(onlySmallNumbers, [15]).then(console.log, console.error);\n           *\n           * @param {function} f node-style function that will be called\n           * @param {Array} [args] array of arguments to func\n           * @returns {Promise} promise for the value func passes to its callback\n           */\n\n          function apply(f, args) {\n            return _apply(f, this, args || []);\n          }\n\n          function dispatch(f, thisArg, args, h) {\n            var cb = createCallback(h);\n\n            try {\n              switch (args.length) {\n                case 2:\n                  f.call(thisArg, args[0], args[1], cb);\n                  break;\n\n                case 1:\n                  f.call(thisArg, args[0], cb);\n                  break;\n\n                case 0:\n                  f.call(thisArg, cb);\n                  break;\n\n                default:\n                  args.push(cb);\n                  f.apply(thisArg, args);\n              }\n            } catch (e) {\n              h.reject(e);\n            }\n          }\n          /**\n           * Has the same behavior that {@link apply} has, with the difference that the\n           * arguments to the function are provided individually, while {@link apply} accepts\n           * a single array.\n           *\n           * @example\n           *    function sumSmallNumbers(x, y, callback) {\n           *\t\tvar result = x + y;\n           *\t\tif(result < 10) {\n           *\t\t\tcallback(null, result);\n           *\t\t} else {\n           *\t\t\tcallback(new Error(\"Calculation failed\"));\n           *\t\t}\n           *\t}\n           *\n           *    // Logs '5'\n           *    nodefn.call(sumSmallNumbers, 2, 3).then(console.log, console.error);\n           *\n           *    // Logs 'Calculation failed'\n           *    nodefn.call(sumSmallNumbers, 5, 10).then(console.log, console.error);\n           *\n           * @param {function} f node-style function that will be called\n           * @param {...*} [args] arguments that will be forwarded to the function\n           * @returns {Promise} promise for the value func passes to its callback\n           */\n\n\n          function call(f\n          /*, args... */\n          ) {\n            return _apply(f, this, slice.call(arguments, 1));\n          }\n          /**\n           * Takes a node-style function and returns new function that wraps the\n           * original and, instead of taking a callback, returns a promise. Also, it\n           * knows how to handle promises given as arguments, waiting for their\n           * resolution before executing.\n           *\n           * Upon execution, the orginal function is executed as well. If it passes\n           * a truthy value as the first argument to the callback, it will be\n           * interpreted as an error condition, and the promise will be rejected\n           * with it. Otherwise, the call is considered a resolution, and the promise\n           * is resolved with the callback's second argument.\n           *\n           * @example\n           *    var fs = require(\"fs\"), nodefn = require(\"when/node/function\");\n           *\n           *    var promiseRead = nodefn.lift(fs.readFile);\n           *\n           *    // The promise is resolved with the contents of the file if everything\n           *    // goes ok\n           *    promiseRead('exists.txt').then(console.log, console.error);\n           *\n           *    // And will be rejected if something doesn't work out\n           *    // (e.g. the files does not exist)\n           *    promiseRead('doesnt_exist.txt').then(console.log, console.error);\n           *\n           *\n           * @param {Function} f node-style function to be lifted\n           * @param {...*} [args] arguments to be prepended for the new function @deprecated\n           * @returns {Function} a promise-returning function\n           */\n\n\n          function lift(f\n          /*, args... */\n          ) {\n            var args1 = arguments.length > 1 ? slice.call(arguments, 1) : [];\n            return function () {\n              // TODO: Simplify once partialing has been removed\n              var l = args1.length;\n              var al = arguments.length;\n              var args = new Array(al + l);\n              var i;\n\n              for (i = 0; i < l; ++i) {\n                args[i] = args1[i];\n              }\n\n              for (i = 0; i < al; ++i) {\n                args[i + l] = arguments[i];\n              }\n\n              return _apply(f, this, args);\n            };\n          }\n          /**\n           * Lift all the functions/methods on src\n           * @param {object|function} src source whose functions will be lifted\n           * @param {function?} combine optional function for customizing the lifting\n           *  process. It is passed dst, the lifted function, and the property name of\n           *  the original function on src.\n           * @param {(object|function)?} dst option destination host onto which to place lifted\n           *  functions. If not provided, liftAll returns a new object.\n           * @returns {*} If dst is provided, returns dst with lifted functions as\n           *  properties.  If dst not provided, returns a new object with lifted functions.\n           */\n\n\n          function liftAll(src, combine, dst) {\n            return _liftAll(lift, combine, dst, src);\n          }\n          /**\n           * Takes an object that responds to the resolver interface, and returns\n           * a function that will resolve or reject it depending on how it is called.\n           *\n           * @example\n           *\tfunction callbackTakingFunction(callback) {\n           *\t\tif(somethingWrongHappened) {\n           *\t\t\tcallback(error);\n           *\t\t} else {\n           *\t\t\tcallback(null, interestingValue);\n           *\t\t}\n           *\t}\n           *\n           *\tvar when = require('when'), nodefn = require('when/node/function');\n           *\n           *\tvar deferred = when.defer();\n           *\tcallbackTakingFunction(nodefn.createCallback(deferred.resolver));\n           *\n           *\tdeferred.promise.then(function(interestingValue) {\n           *\t\t// Use interestingValue\n           *\t});\n           *\n           * @param {Resolver} resolver that will be 'attached' to the callback\n           * @returns {Function} a node-style callback function\n           */\n\n\n          function createCallback(resolver) {\n            return function (err, value) {\n              if (err) {\n                resolver.reject(err);\n              } else if (arguments.length > 2) {\n                resolver.resolve(slice.call(arguments, 1));\n              } else {\n                resolver.resolve(value);\n              }\n            };\n          }\n          /**\n           * Attaches a node-style callback to a promise, ensuring the callback is\n           * called for either fulfillment or rejection. Returns a promise with the same\n           * state as the passed-in promise.\n           *\n           * @example\n           *\tvar deferred = when.defer();\n           *\n           *\tfunction callback(err, value) {\n           *\t\t// Handle err or use value\n           *\t}\n           *\n           *\tbindCallback(deferred.promise, callback);\n           *\n           *\tdeferred.resolve('interesting value');\n           *\n           * @param {Promise} promise The promise to be attached to.\n           * @param {Function} callback The node-style callback to attach.\n           * @returns {Promise} A promise with the same state as the passed-in promise.\n           */\n\n\n          function bindCallback(promise, callback) {\n            promise = when(promise);\n\n            if (callback) {\n              promise.then(success, wrapped);\n            }\n\n            return promise;\n\n            function success(value) {\n              wrapped(null, value);\n            }\n\n            function wrapped(err, value) {\n              setTimer(function () {\n                callback(err, value);\n              }, 0);\n            }\n          }\n          /**\n           * Takes a node-style callback and returns new function that accepts a\n           * promise, calling the original callback when the promise is either\n           * fulfilled or rejected with the appropriate arguments.\n           *\n           * @example\n           *\tvar deferred = when.defer();\n           *\n           *\tfunction callback(err, value) {\n           *\t\t// Handle err or use value\n           *\t}\n           *\n           *\tvar wrapped = liftCallback(callback);\n           *\n           *\t// `wrapped` can now be passed around at will\n           *\twrapped(deferred.promise);\n           *\n           *\tdeferred.resolve('interesting value');\n           *\n           * @param {Function} callback The node-style callback to wrap.\n           * @returns {Function} The lifted, promise-accepting function.\n           */\n\n\n          function liftCallback(callback) {\n            return function (promise) {\n              return bindCallback(promise, callback);\n            };\n          }\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./lib/apply\": 11,\n      \"./lib/env\": 21,\n      \"./lib/liftAll\": 23,\n      \"./when\": 32\n    }],\n    27: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * parallel.js\n       *\n       * Run a set of task functions in parallel.  All tasks will\n       * receive the same args\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var all = when.Promise.all;\n          var slice = Array.prototype.slice;\n          /**\n           * Run array of tasks in parallel\n           * @param tasks {Array|Promise} array or promiseForArray of task functions\n           * @param [args] {*} arguments to be passed to all tasks\n           * @return {Promise} promise for array containing the\n           * result of each task in the array position corresponding\n           * to position of the task in the tasks array\n           */\n\n          return function parallel(tasks\n          /*, args... */\n          ) {\n            return all(slice.call(arguments, 1)).then(function (args) {\n              return when.map(tasks, function (task) {\n                return task.apply(void 0, args);\n              });\n            });\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    28: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * pipeline.js\n       *\n       * Run a set of task functions in sequence, passing the result\n       * of the previous as an argument to the next.  Like a shell\n       * pipeline, e.g. `cat file.txt | grep 'foo' | sed -e 's/foo/bar/g'\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var all = when.Promise.all;\n          var slice = Array.prototype.slice;\n          /**\n           * Run array of tasks in a pipeline where the next\n           * tasks receives the result of the previous.  The first task\n           * will receive the initialArgs as its argument list.\n           * @param tasks {Array|Promise} array or promise for array of task functions\n           * @param [initialArgs...] {*} arguments to be passed to the first task\n           * @return {Promise} promise for return value of the final task\n           */\n\n          return function pipeline(tasks\n          /* initialArgs... */\n          ) {\n            // Self-optimizing function to run first task with multiple\n            // args using apply, but subsequence tasks via direct invocation\n            var runTask = function (args, task) {\n              runTask = function (arg, task) {\n                return task(arg);\n              };\n\n              return task.apply(null, args);\n            };\n\n            return all(slice.call(arguments, 1)).then(function (args) {\n              return when.reduce(tasks, function (arg, task) {\n                return runTask(arg, task);\n              }, args);\n            });\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    29: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2012-2013 original author or authors */\n\n      /**\n       * poll.js\n       *\n       * Helper that polls until cancelled or for a condition to become true.\n       *\n       * @author Scott Andrews\n       */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var when = require('./when');\n\n          var attempt = when['try'];\n\n          var cancelable = require('./cancelable');\n          /**\n           * Periodically execute the task function on the msec delay. The result of\n           * the task may be verified by watching for a condition to become true. The\n           * returned deferred is cancellable if the polling needs to be cancelled\n           * externally before reaching a resolved state.\n           *\n           * The next vote is scheduled after the results of the current vote are\n           * verified and rejected.\n           *\n           * Polling may be terminated by the verifier returning a truthy value,\n           * invoking cancel() on the returned promise, or the task function returning\n           * a rejected promise.\n           *\n           * Usage:\n           *\n           * var count = 0;\n           * function doSomething() { return count++ }\n           *\n           * // poll until cancelled\n           * var p = poll(doSomething, 1000);\n           * ...\n           * p.cancel();\n           *\n           * // poll until condition is met\n           * poll(doSomething, 1000, function(result) { return result > 10 })\n           *     .then(function(result) { assert result == 10 });\n           *\n           * // delay first vote\n           * poll(doSomething, 1000, anyFunc, true);\n           *\n           * @param task {Function} function that is executed after every timeout\n           * @param interval {number|Function} timeout in milliseconds\n           * @param [verifier] {Function} function to evaluate the result of the vote.\n           *     May return a {Promise} or a {Boolean}. Rejecting the promise or a\n           *     falsey value will schedule the next vote.\n           * @param [delayInitialTask] {boolean} if truthy, the first vote is scheduled\n           *     instead of immediate\n           *\n           * @returns {Promise}\n           */\n\n\n          return function poll(task, interval, verifier, delayInitialTask) {\n            var deferred, canceled, reject;\n            canceled = false;\n            deferred = cancelable(when.defer(), function () {\n              canceled = true;\n            });\n            reject = deferred.reject;\n\n            verifier = verifier || function () {\n              return false;\n            };\n\n            if (typeof interval !== 'function') {\n              interval = function (interval) {\n                return function () {\n                  return when().delay(interval);\n                };\n              }(interval);\n            }\n\n            function certify(result) {\n              deferred.resolve(result);\n            }\n\n            function schedule(result) {\n              attempt(interval).then(vote, reject);\n\n              if (result !== void 0) {\n                deferred.notify(result);\n              }\n            }\n\n            function vote() {\n              if (canceled) {\n                return;\n              }\n\n              when(task(), function (result) {\n                when(verifier(result), function (verification) {\n                  return verification ? certify(result) : schedule(result);\n                }, function () {\n                  schedule(result);\n                });\n              }, reject);\n            }\n\n            if (delayInitialTask) {\n              schedule();\n            } else {\n              // if task() is blocking, vote will also block\n              vote();\n            } // make the promise cancelable\n\n\n            deferred.promise = Object.create(deferred.promise);\n            deferred.promise.cancel = deferred.cancel;\n            return deferred.promise;\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./cancelable\": 3,\n      \"./when\": 32\n    }],\n    30: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * sequence.js\n       *\n       * Run a set of task functions in sequence.  All tasks will\n       * receive the same args.\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n\n          var all = when.Promise.all;\n          var slice = Array.prototype.slice;\n          /**\n           * Run array of tasks in sequence with no overlap\n           * @param tasks {Array|Promise} array or promiseForArray of task functions\n           * @param [args] {*} arguments to be passed to all tasks\n           * @return {Promise} promise for an array containing\n           * the result of each task in the array position corresponding\n           * to position of the task in the tasks array\n           */\n\n          return function sequence(tasks\n          /*, args... */\n          ) {\n            var results = [];\n            return all(slice.call(arguments, 1)).then(function (args) {\n              return when.reduce(tasks, function (results, task) {\n                return when(task.apply(void 0, args), addResult);\n              }, results);\n            });\n\n            function addResult(result) {\n              results.push(result);\n              return results;\n            }\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    31: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n      /**\n       * timeout.js\n       *\n       * Helper that returns a promise that rejects after a specified timeout,\n       * if not explicitly resolved or rejected before that.\n       *\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        define(function (require) {\n          var when = require('./when');\n          /**\n          * @deprecated Use when(trigger).timeout(ms)\n           */\n\n\n          return function timeout(msec, trigger) {\n            return when(trigger).timeout(msec);\n          };\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./when\": 32\n    }],\n    32: [function (require, module, exports) {\n      /** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n      /**\n       * Promises/A+ and when() implementation\n       * when is part of the cujoJS family of libraries (http://cujojs.com/)\n       * @author Brian Cavalier\n       * @author John Hann\n       */\n      (function (define) {\n        'use strict';\n\n        define(function (require) {\n          var timed = require('./lib/decorators/timed');\n\n          var array = require('./lib/decorators/array');\n\n          var flow = require('./lib/decorators/flow');\n\n          var fold = require('./lib/decorators/fold');\n\n          var inspect = require('./lib/decorators/inspect');\n\n          var generate = require('./lib/decorators/iterate');\n\n          var progress = require('./lib/decorators/progress');\n\n          var withThis = require('./lib/decorators/with');\n\n          var unhandledRejection = require('./lib/decorators/unhandledRejection');\n\n          var TimeoutError = require('./lib/TimeoutError');\n\n          var Promise = [array, flow, fold, generate, progress, inspect, withThis, timed, unhandledRejection].reduce(function (Promise, feature) {\n            return feature(Promise);\n          }, require('./lib/Promise'));\n\n          var apply = require('./lib/apply')(Promise); // Public API\n\n\n          when.promise = promise; // Create a pending promise\n\n          when.resolve = Promise.resolve; // Create a resolved promise\n\n          when.reject = Promise.reject; // Create a rejected promise\n\n          when.lift = lift; // lift a function to return promises\n\n          when['try'] = attempt; // call a function and return a promise\n\n          when.attempt = attempt; // alias for when.try\n\n          when.iterate = Promise.iterate; // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n          when.unfold = Promise.unfold; // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n          when.join = join; // Join 2 or more promises\n\n          when.all = all; // Resolve a list of promises\n\n          when.settle = settle; // Settle a list of promises\n\n          when.any = lift(Promise.any); // One-winner race\n\n          when.some = lift(Promise.some); // Multi-winner race\n\n          when.race = lift(Promise.race); // First-to-settle race\n\n          when.map = map; // Array.map() for promises\n\n          when.filter = filter; // Array.filter() for promises\n\n          when.reduce = lift(Promise.reduce); // Array.reduce() for promises\n\n          when.reduceRight = lift(Promise.reduceRight); // Array.reduceRight() for promises\n\n          when.isPromiseLike = isPromiseLike; // Is something promise-like, aka thenable\n\n          when.Promise = Promise; // Promise constructor\n\n          when.defer = defer; // Create a {promise, resolve, reject} tuple\n          // Error types\n\n          when.TimeoutError = TimeoutError;\n          /**\n           * Get a trusted promise for x, or by transforming x with onFulfilled\n           *\n           * @param {*} x\n           * @param {function?} onFulfilled callback to be called when x is\n           *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n           *   will be invoked immediately.\n           * @param {function?} onRejected callback to be called when x is\n           *   rejected.\n           * @param {function?} onProgress callback to be called when progress updates\n           *   are issued for x. @deprecated\n           * @returns {Promise} a new promise that will fulfill with the return\n           *   value of callback or errback or the completion value of promiseOrValue if\n           *   callback and/or errback is not supplied.\n           */\n\n          function when(x, onFulfilled, onRejected, onProgress) {\n            var p = Promise.resolve(x);\n\n            if (arguments.length < 2) {\n              return p;\n            }\n\n            return p.then(onFulfilled, onRejected, onProgress);\n          }\n          /**\n           * Creates a new promise whose fate is determined by resolver.\n           * @param {function} resolver function(resolve, reject, notify)\n           * @returns {Promise} promise whose fate is determine by resolver\n           */\n\n\n          function promise(resolver) {\n            return new Promise(resolver);\n          }\n          /**\n           * Lift the supplied function, creating a version of f that returns\n           * promises, and accepts promises as arguments.\n           * @param {function} f\n           * @returns {Function} version of f that returns promises\n           */\n\n\n          function lift(f) {\n            return function () {\n              for (var i = 0, l = arguments.length, a = new Array(l); i < l; ++i) {\n                a[i] = arguments[i];\n              }\n\n              return apply(f, this, a);\n            };\n          }\n          /**\n           * Call f in a future turn, with the supplied args, and return a promise\n           * for the result.\n           * @param {function} f\n           * @returns {Promise}\n           */\n\n\n          function attempt(f\n          /*, args... */\n          ) {\n            /*jshint validthis:true */\n            for (var i = 0, l = arguments.length - 1, a = new Array(l); i < l; ++i) {\n              a[i] = arguments[i + 1];\n            }\n\n            return apply(f, this, a);\n          }\n          /**\n           * Creates a {promise, resolver} pair, either or both of which\n           * may be given out safely to consumers.\n           * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n           */\n\n\n          function defer() {\n            return new Deferred();\n          }\n\n          function Deferred() {\n            var p = Promise._defer();\n\n            function resolve(x) {\n              p._handler.resolve(x);\n            }\n\n            function reject(x) {\n              p._handler.reject(x);\n            }\n\n            function notify(x) {\n              p._handler.notify(x);\n            }\n\n            this.promise = p;\n            this.resolve = resolve;\n            this.reject = reject;\n            this.notify = notify;\n            this.resolver = {\n              resolve: resolve,\n              reject: reject,\n              notify: notify\n            };\n          }\n          /**\n           * Determines if x is promise-like, i.e. a thenable object\n           * NOTE: Will return true for *any thenable object*, and isn't truly\n           * safe, since it may attempt to access the `then` property of x (i.e.\n           *  clever/malicious getters may do weird things)\n           * @param {*} x anything\n           * @returns {boolean} true if x is promise-like\n           */\n\n\n          function isPromiseLike(x) {\n            return x && typeof x.then === 'function';\n          }\n          /**\n           * Return a promise that will resolve only once all the supplied arguments\n           * have resolved. The resolution value of the returned promise will be an array\n           * containing the resolution values of each of the arguments.\n           * @param {...*} arguments may be a mix of promises and values\n           * @returns {Promise}\n           */\n\n\n          function join()\n          /* ...promises */\n          {\n            return Promise.all(arguments);\n          }\n          /**\n           * Return a promise that will fulfill once all input promises have\n           * fulfilled, or reject when any one input promise rejects.\n           * @param {array|Promise} promises array (or promise for an array) of promises\n           * @returns {Promise}\n           */\n\n\n          function all(promises) {\n            return when(promises, Promise.all);\n          }\n          /**\n           * Return a promise that will always fulfill with an array containing\n           * the outcome states of all input promises.  The returned promise\n           * will only reject if `promises` itself is a rejected promise.\n           * @param {array|Promise} promises array (or promise for an array) of promises\n           * @returns {Promise} promise for array of settled state descriptors\n           */\n\n\n          function settle(promises) {\n            return when(promises, Promise.settle);\n          }\n          /**\n           * Promise-aware array map function, similar to `Array.prototype.map()`,\n           * but input array may contain promises or values.\n           * @param {Array|Promise} promises array of anything, may contain promises and values\n           * @param {function(x:*, index:Number):*} mapFunc map function which may\n           *  return a promise or value\n           * @returns {Promise} promise that will fulfill with an array of mapped values\n           *  or reject if any input promise rejects.\n           */\n\n\n          function map(promises, mapFunc) {\n            return when(promises, function (promises) {\n              return Promise.map(promises, mapFunc);\n            });\n          }\n          /**\n           * Filter the provided array of promises using the provided predicate.  Input may\n           * contain promises and values\n           * @param {Array|Promise} promises array of promises and values\n           * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n           *  Must return truthy (or promise for truthy) for items to retain.\n           * @returns {Promise} promise that will fulfill with an array containing all items\n           *  for which predicate returned truthy.\n           */\n\n\n          function filter(promises, predicate) {\n            return when(promises, function (promises) {\n              return Promise.filter(promises, predicate);\n            });\n          }\n\n          return when;\n        });\n      })(typeof define === 'function' && define.amd ? define : function (factory) {\n        module.exports = factory(require);\n      });\n    }, {\n      \"./lib/Promise\": 8,\n      \"./lib/TimeoutError\": 10,\n      \"./lib/apply\": 11,\n      \"./lib/decorators/array\": 12,\n      \"./lib/decorators/flow\": 13,\n      \"./lib/decorators/fold\": 14,\n      \"./lib/decorators/inspect\": 15,\n      \"./lib/decorators/iterate\": 16,\n      \"./lib/decorators/progress\": 17,\n      \"./lib/decorators/timed\": 18,\n      \"./lib/decorators/unhandledRejection\": 19,\n      \"./lib/decorators/with\": 20\n    }]\n  }, {}, [1])(1);\n});\n;","map":{"version":3,"sources":["build/when.browserify.js","callbacks.js","cancelable.js","delay.js","function.js","guard.js","keys.js","lib/Promise.js","lib/Scheduler.js","lib/TimeoutError.js","lib/apply.js","lib/decorators/array.js","lib/decorators/flow.js","lib/decorators/fold.js","lib/decorators/inspect.js","lib/decorators/iterate.js","lib/decorators/progress.js","lib/decorators/timed.js","lib/decorators/unhandledRejection.js","lib/decorators/with.js","lib/env.js","lib/format.js","lib/liftAll.js","lib/makePromise.js","lib/state.js","node.js","parallel.js","pipeline.js","poll.js","sequence.js","timeout.js","when.js"],"names":[],"mappings":"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","sourcesContent":["var when = module.exports = require('../when');\n\nwhen.callbacks = require('../callbacks');\nwhen.cancelable = require('../cancelable');\nwhen.delay = require('../delay');\nwhen.fn = require('../function');\nwhen.guard = require('../guard');\nwhen.keys = require('../keys');\nwhen.nodefn = when.node = require('../node');\nwhen.parallel = require('../parallel');\nwhen.pipeline = require('../pipeline');\nwhen.poll = require('../poll');\nwhen.sequence = require('../sequence');\nwhen.timeout = require('../timeout');\n","/** @license MIT License (c) copyright 2013-2014 original author or authors */\n\n/**\n * Collection of helper functions for interacting with 'traditional',\n * callback-taking functions using a promise interface.\n *\n * @author Renato Zannon\n * @contributor Brian Cavalier\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar Promise = when.Promise;\n\tvar _liftAll = require('./lib/liftAll');\n\tvar slice = Array.prototype.slice;\n\n\tvar makeApply = require('./lib/apply');\n\tvar _apply = makeApply(Promise, dispatch);\n\n\treturn {\n\t\tlift: lift,\n\t\tliftAll: liftAll,\n\t\tapply: apply,\n\t\tcall: call,\n\t\tpromisify: promisify\n\t};\n\n\t/**\n\t * Takes a `traditional` callback-taking function and returns a promise for its\n\t * result, accepting an optional array of arguments (that might be values or\n\t * promises). It assumes that the function takes its callback and errback as\n\t * the last two arguments. The resolution of the promise depends on whether the\n\t * function will call its callback or its errback.\n\t *\n\t * @example\n\t *    var domIsLoaded = callbacks.apply($);\n\t *    domIsLoaded.then(function() {\n\t *\t\tdoMyDomStuff();\n\t *\t});\n\t *\n\t * @example\n\t *    function existingAjaxyFunction(url, callback, errback) {\n\t *\t\t// Complex logic you'd rather not change\n\t *\t}\n\t *\n\t *    var promise = callbacks.apply(existingAjaxyFunction, [\"/movies.json\"]);\n\t *\n\t *    promise.then(function(movies) {\n\t *\t\t// Work with movies\n\t *\t}, function(reason) {\n\t *\t\t// Handle error\n\t *\t});\n\t *\n\t * @param {function} asyncFunction function to be called\n\t * @param {Array} [extraAsyncArgs] array of arguments to asyncFunction\n\t * @returns {Promise} promise for the callback value of asyncFunction\n\t */\n\tfunction apply(asyncFunction, extraAsyncArgs) {\n\t\treturn _apply(asyncFunction, this, extraAsyncArgs || []);\n\t}\n\n\t/**\n\t * Apply helper that allows specifying thisArg\n\t * @private\n\t */\n\tfunction dispatch(f, thisArg, args, h) {\n\t\targs.push(alwaysUnary(h.resolve, h), alwaysUnary(h.reject, h));\n\t\ttryCatchResolve(f, thisArg, args, h);\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tf.apply(thisArg, args);\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n\t/**\n\t * Works as `callbacks.apply` does, with the difference that the arguments to\n\t * the function are passed individually, instead of as an array.\n\t *\n\t * @example\n\t *    function sumInFiveSeconds(a, b, callback) {\n\t *\t\tsetTimeout(function() {\n\t *\t\t\tcallback(a + b);\n\t *\t\t}, 5000);\n\t *\t}\n\t *\n\t *    var sumPromise = callbacks.call(sumInFiveSeconds, 5, 10);\n\t *\n\t *    // Logs '15' 5 seconds later\n\t *    sumPromise.then(console.log);\n\t *\n\t * @param {function} asyncFunction function to be called\n\t * @param {...*} args arguments that will be forwarded to the function\n\t * @returns {Promise} promise for the callback value of asyncFunction\n\t */\n\tfunction call(asyncFunction/*, arg1, arg2...*/) {\n\t\treturn _apply(asyncFunction, this, slice.call(arguments, 1));\n\t}\n\n\t/**\n\t * Takes a 'traditional' callback/errback-taking function and returns a function\n\t * that returns a promise instead. The resolution/rejection of the promise\n\t * depends on whether the original function will call its callback or its\n\t * errback.\n\t *\n\t * If additional arguments are passed to the `lift` call, they will be prepended\n\t * on the calls to the original function, much like `Function.prototype.bind`.\n\t *\n\t * The resulting function is also \"promise-aware\", in the sense that, if given\n\t * promises as arguments, it will wait for their resolution before executing.\n\t *\n\t * @example\n\t *    function traditionalAjax(method, url, callback, errback) {\n\t *\t\tvar xhr = new XMLHttpRequest();\n\t *\t\txhr.open(method, url);\n\t *\n\t *\t\txhr.onload = callback;\n\t *\t\txhr.onerror = errback;\n\t *\n\t *\t\txhr.send();\n\t *\t}\n\t *\n\t *    var promiseAjax = callbacks.lift(traditionalAjax);\n\t *    promiseAjax(\"GET\", \"/movies.json\").then(console.log, console.error);\n\t *\n\t *    var promiseAjaxGet = callbacks.lift(traditionalAjax, \"GET\");\n\t *    promiseAjaxGet(\"/movies.json\").then(console.log, console.error);\n\t *\n\t * @param {Function} f traditional async function to be decorated\n\t * @param {...*} [args] arguments to be prepended for the new function @deprecated\n\t * @returns {Function} a promise-returning function\n\t */\n\tfunction lift(f/*, args...*/) {\n\t\tvar args = arguments.length > 1 ? slice.call(arguments, 1) : [];\n\t\treturn function() {\n\t\t\treturn _apply(f, this, args.concat(slice.call(arguments)));\n\t\t};\n\t}\n\n\t/**\n\t * Lift all the functions/methods on src\n\t * @param {object|function} src source whose functions will be lifted\n\t * @param {function?} combine optional function for customizing the lifting\n\t *  process. It is passed dst, the lifted function, and the property name of\n\t *  the original function on src.\n\t * @param {(object|function)?} dst option destination host onto which to place lifted\n\t *  functions. If not provided, liftAll returns a new object.\n\t * @returns {*} If dst is provided, returns dst with lifted functions as\n\t *  properties.  If dst not provided, returns a new object with lifted functions.\n\t */\n\tfunction liftAll(src, combine, dst) {\n\t\treturn _liftAll(lift, combine, dst, src);\n\t}\n\n\t/**\n\t * `promisify` is a version of `lift` that allows fine-grained control over the\n\t * arguments that passed to the underlying function. It is intended to handle\n\t * functions that don't follow the common callback and errback positions.\n\t *\n\t * The control is done by passing an object whose 'callback' and/or 'errback'\n\t * keys, whose values are the corresponding 0-based indexes of the arguments on\n\t * the function. Negative values are interpreted as being relative to the end\n\t * of the arguments array.\n\t *\n\t * If arguments are given on the call to the 'promisified' function, they are\n\t * intermingled with the callback and errback. If a promise is given among them,\n\t * the execution of the function will only occur after its resolution.\n\t *\n\t * @example\n\t *    var delay = callbacks.promisify(setTimeout, {\n\t *\t\tcallback: 0\n\t *\t});\n\t *\n\t *    delay(100).then(function() {\n\t *\t\tconsole.log(\"This happens 100ms afterwards\");\n\t *\t});\n\t *\n\t * @example\n\t *    function callbackAsLast(errback, followsStandards, callback) {\n\t *\t\tif(followsStandards) {\n\t *\t\t\tcallback(\"well done!\");\n\t *\t\t} else {\n\t *\t\t\terrback(\"some programmers just want to watch the world burn\");\n\t *\t\t}\n\t *\t}\n\t *\n\t *    var promisified = callbacks.promisify(callbackAsLast, {\n\t *\t\tcallback: -1,\n\t *\t\terrback:   0,\n\t *\t});\n\t *\n\t *    promisified(true).then(console.log, console.error);\n\t *    promisified(false).then(console.log, console.error);\n\t *\n\t * @param {Function} asyncFunction traditional function to be decorated\n\t * @param {object} positions\n\t * @param {number} [positions.callback] index at which asyncFunction expects to\n\t *  receive a success callback\n\t * @param {number} [positions.errback] index at which asyncFunction expects to\n\t *  receive an error callback\n\t *  @returns {function} promisified function that accepts\n\t *\n\t * @deprecated\n\t */\n\tfunction promisify(asyncFunction, positions) {\n\n\t\treturn function() {\n\t\t\tvar thisArg = this;\n\t\t\treturn Promise.all(arguments).then(function(args) {\n\t\t\t\tvar p = Promise._defer();\n\n\t\t\t\tvar callbackPos, errbackPos;\n\n\t\t\t\tif(typeof positions.callback === 'number') {\n\t\t\t\t\tcallbackPos = normalizePosition(args, positions.callback);\n\t\t\t\t}\n\n\t\t\t\tif(typeof positions.errback === 'number') {\n\t\t\t\t\terrbackPos = normalizePosition(args, positions.errback);\n\t\t\t\t}\n\n\t\t\t\tif(errbackPos < callbackPos) {\n\t\t\t\t\tinsertCallback(args, errbackPos, p._handler.reject, p._handler);\n\t\t\t\t\tinsertCallback(args, callbackPos, p._handler.resolve, p._handler);\n\t\t\t\t} else {\n\t\t\t\t\tinsertCallback(args, callbackPos, p._handler.resolve, p._handler);\n\t\t\t\t\tinsertCallback(args, errbackPos, p._handler.reject, p._handler);\n\t\t\t\t}\n\n\t\t\t\tasyncFunction.apply(thisArg, args);\n\n\t\t\t\treturn p;\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction normalizePosition(args, pos) {\n\t\treturn pos < 0 ? (args.length + pos + 2) : pos;\n\t}\n\n\tfunction insertCallback(args, pos, callback, thisArg) {\n\t\tif(typeof pos === 'number') {\n\t\t\targs.splice(pos, 0, alwaysUnary(callback, thisArg));\n\t\t}\n\t}\n\n\tfunction alwaysUnary(fn, thisArg) {\n\t\treturn function() {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfn.call(thisArg, slice.call(arguments));\n\t\t\t} else {\n\t\t\t\tfn.apply(thisArg, arguments);\n\t\t\t}\n\t\t};\n\t}\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n","/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * cancelable.js\n * @deprecated\n *\n * Decorator that makes a deferred \"cancelable\".  It adds a cancel() method that\n * will call a special cancel handler function and then reject the deferred.  The\n * cancel handler can be used to do resource cleanup, or anything else that should\n * be done before any other rejection handlers are executed.\n *\n * Usage:\n *\n * var cancelableDeferred = cancelable(when.defer(), myCancelHandler);\n *\n * @author brian@hovercraftstudios.com\n */\n\n(function(define) {\ndefine(function() {\n\n    /**\n     * Makes deferred cancelable, adding a cancel() method.\n\t * @deprecated\n     *\n     * @param deferred {Deferred} the {@link Deferred} to make cancelable\n     * @param canceler {Function} cancel handler function to execute when this deferred\n\t * is canceled.  This is guaranteed to run before all other rejection handlers.\n\t * The canceler will NOT be executed if the deferred is rejected in the standard\n\t * way, i.e. deferred.reject().  It ONLY executes if the deferred is canceled,\n\t * i.e. deferred.cancel()\n     *\n     * @returns deferred, with an added cancel() method.\n     */\n    return function(deferred, canceler) {\n        // Add a cancel method to the deferred to reject the delegate\n        // with the special canceled indicator.\n        deferred.cancel = function() {\n\t\t\ttry {\n\t\t\t\tdeferred.reject(canceler(deferred));\n\t\t\t} catch(e) {\n\t\t\t\tdeferred.reject(e);\n\t\t\t}\n\n\t\t\treturn deferred.promise;\n        };\n\n        return deferred;\n    };\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(); });\n\n\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * delay.js\n *\n * Helper that returns a promise that resolves after a delay.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\n    /**\n\t * @deprecated Use when(value).delay(ms)\n     */\n    return function delay(msec, value) {\n\t\treturn when(value).delay(msec);\n    };\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2013-2014 original author or authors */\n\n/**\n * Collection of helper functions for wrapping and executing 'traditional'\n * synchronous functions in a promise interface.\n *\n * @author Brian Cavalier\n * @contributor Renato Zannon\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar attempt = when['try'];\n\tvar _liftAll = require('./lib/liftAll');\n\tvar _apply = require('./lib/apply')(when.Promise);\n\tvar slice = Array.prototype.slice;\n\n\treturn {\n\t\tlift: lift,\n\t\tliftAll: liftAll,\n\t\tcall: attempt,\n\t\tapply: apply,\n\t\tcompose: compose\n\t};\n\n\t/**\n\t * Takes a function and an optional array of arguments (that might be promises),\n\t * and calls the function. The return value is a promise whose resolution\n\t * depends on the value returned by the function.\n\t * @param {function} f function to be called\n\t * @param {Array} [args] array of arguments to func\n\t * @returns {Promise} promise for the return value of func\n\t */\n\tfunction apply(f, args) {\n\t\t// slice args just in case the caller passed an Arguments instance\n\t\treturn _apply(f, this, args == null ? [] : slice.call(args));\n\t}\n\n\t/**\n\t * Takes a 'regular' function and returns a version of that function that\n\t * returns a promise instead of a plain value, and handles thrown errors by\n\t * returning a rejected promise. Also accepts a list of arguments to be\n\t * prepended to the new function, as does Function.prototype.bind.\n\t *\n\t * The resulting function is promise-aware, in the sense that it accepts\n\t * promise arguments, and waits for their resolution.\n\t * @param {Function} f function to be bound\n\t * @param {...*} [args] arguments to be prepended for the new function @deprecated\n\t * @returns {Function} a promise-returning function\n\t */\n\tfunction lift(f /*, args... */) {\n\t\tvar args = arguments.length > 1 ? slice.call(arguments, 1) : [];\n\t\treturn function() {\n\t\t\treturn _apply(f, this, args.concat(slice.call(arguments)));\n\t\t};\n\t}\n\n\t/**\n\t * Lift all the functions/methods on src\n\t * @param {object|function} src source whose functions will be lifted\n\t * @param {function?} combine optional function for customizing the lifting\n\t *  process. It is passed dst, the lifted function, and the property name of\n\t *  the original function on src.\n\t * @param {(object|function)?} dst option destination host onto which to place lifted\n\t *  functions. If not provided, liftAll returns a new object.\n\t * @returns {*} If dst is provided, returns dst with lifted functions as\n\t *  properties.  If dst not provided, returns a new object with lifted functions.\n\t */\n\tfunction liftAll(src, combine, dst) {\n\t\treturn _liftAll(lift, combine, dst, src);\n\t}\n\n\t/**\n\t * Composes multiple functions by piping their return values. It is\n\t * transparent to whether the functions return 'regular' values or promises:\n\t * the piped argument is always a resolved value. If one of the functions\n\t * throws or returns a rejected promise, the composed promise will be also\n\t * rejected.\n\t *\n\t * The arguments (or promises to arguments) given to the returned function (if\n\t * any), are passed directly to the first function on the 'pipeline'.\n\t * @param {Function} f the function to which the arguments will be passed\n\t * @param {...Function} [funcs] functions that will be composed, in order\n\t * @returns {Function} a promise-returning composition of the functions\n\t */\n\tfunction compose(f /*, funcs... */) {\n\t\tvar funcs = slice.call(arguments, 1);\n\n\t\treturn function() {\n\t\t\tvar thisArg = this;\n\t\t\tvar args = slice.call(arguments);\n\t\t\tvar firstPromise = attempt.apply(thisArg, [f].concat(args));\n\n\t\t\treturn when.reduce(funcs, function(arg, func) {\n\t\t\t\treturn func.call(thisArg, arg);\n\t\t\t}, firstPromise);\n\t\t};\n\t}\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * Generalized promise concurrency guard\n * Adapted from original concept by Sakari Jokinen (Rocket Pack, Ltd.)\n *\n * @author Brian Cavalier\n * @author John Hann\n * @contributor Sakari Jokinen\n */\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar slice = Array.prototype.slice;\n\n\tguard.n = n;\n\n\treturn guard;\n\n\t/**\n\t * Creates a guarded version of f that can only be entered when the supplied\n\t * condition allows.\n\t * @param {function} condition represents a critical section that may only\n\t *  be entered when allowed by the condition\n\t * @param {function} f function to guard\n\t * @returns {function} guarded version of f\n\t */\n\tfunction guard(condition, f) {\n\t\treturn function() {\n\t\t\tvar args = slice.call(arguments);\n\n\t\t\treturn when(condition()).withThis(this).then(function(exit) {\n\t\t\t\treturn when(f.apply(this, args))['finally'](exit);\n\t\t\t});\n\t\t};\n\t}\n\n\t/**\n\t * Creates a condition that allows only n simultaneous executions\n\t * of a guarded function\n\t * @param {number} allowed number of allowed simultaneous executions\n\t * @returns {function} condition function which returns a promise that\n\t *  fulfills when the critical section may be entered.  The fulfillment\n\t *  value is a function (\"notifyExit\") that must be called when the critical\n\t *  section has been exited.\n\t */\n\tfunction n(allowed) {\n\t\tvar count = 0;\n\t\tvar waiting = [];\n\n\t\treturn function enter() {\n\t\t\treturn when.promise(function(resolve) {\n\t\t\t\tif(count < allowed) {\n\t\t\t\t\tresolve(exit);\n\t\t\t\t} else {\n\t\t\t\t\twaiting.push(resolve);\n\t\t\t\t}\n\t\t\t\tcount += 1;\n\t\t\t});\n\t\t};\n\n\t\tfunction exit() {\n\t\t\tcount = Math.max(count - 1, 0);\n\t\t\tif(waiting.length > 0) {\n\t\t\t\twaiting.shift()(exit);\n\t\t\t}\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar Promise = when.Promise;\n\tvar toPromise = when.resolve;\n\n\treturn {\n\t\tall: when.lift(all),\n\t\tmap: map,\n\t\tsettle: settle\n\t};\n\n\t/**\n\t * Resolve all the key-value pairs in the supplied object or promise\n\t * for an object.\n\t * @param {Promise|object} object or promise for object whose key-value pairs\n\t *  will be resolved\n\t * @returns {Promise} promise for an object with the fully resolved key-value pairs\n\t */\n\tfunction all(object) {\n\t\tvar p = Promise._defer();\n\t\tvar resolver = Promise._handler(p);\n\n\t\tvar results = {};\n\t\tvar keys = Object.keys(object);\n\t\tvar pending = keys.length;\n\n\t\tfor(var i=0, k; i<keys.length; ++i) {\n\t\t\tk = keys[i];\n\t\t\tPromise._handler(object[k]).fold(settleKey, k, results, resolver);\n\t\t}\n\n\t\tif(pending === 0) {\n\t\t\tresolver.resolve(results);\n\t\t}\n\n\t\treturn p;\n\n\t\tfunction settleKey(k, x, resolver) {\n\t\t\t/*jshint validthis:true*/\n\t\t\tthis[k] = x;\n\t\t\tif(--pending === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Map values in the supplied object's keys\n\t * @param {Promise|object} object or promise for object whose key-value pairs\n\t *  will be reduced\n\t * @param {function(value:*, key:String):*} f mapping function which may\n\t *  return either a promise or a value\n\t * @returns {Promise} promise for an object with the mapped and fully\n\t *  resolved key-value pairs\n\t */\n\tfunction map(object, f) {\n\t\treturn toPromise(object).then(function(object) {\n\t\t\treturn all(Object.keys(object).reduce(function(o, k) {\n\t\t\t\to[k] = toPromise(object[k]).fold(mapWithKey, k);\n\t\t\t\treturn o;\n\t\t\t}, {}));\n\t\t});\n\n\t\tfunction mapWithKey(k, x) {\n\t\t\treturn f(x, k);\n\t\t}\n\t}\n\n\t/**\n\t * Resolve all key-value pairs in the supplied object and return a promise\n\t * that will always fulfill with the outcome states of all input promises.\n\t * @param {object} object whose key-value pairs will be settled\n\t * @returns {Promise} promise for an object with the mapped and fully\n\t *  settled key-value pairs\n\t */\n\tfunction settle(object) {\n\t\tvar keys = Object.keys(object);\n\t\tvar results = {};\n\n\t\tif(keys.length === 0) {\n\t\t\treturn toPromise(results);\n\t\t}\n\n\t\tvar p = Promise._defer();\n\t\tvar resolver = Promise._handler(p);\n\t\tvar promises = keys.map(function(k) { return object[k]; });\n\n\t\twhen.settle(promises).then(function(states) {\n\t\t\tpopulateResults(keys, states, results, resolver);\n\t\t});\n\n\t\treturn p;\n\t}\n\n\tfunction populateResults(keys, states, results, resolver) {\n\t\tfor(var i=0; i<keys.length; i++) {\n\t\t\tresults[keys[i]] = states[i];\n\t\t}\n\t\tresolver.resolve(results);\n\t}\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar makePromise = require('./makePromise');\n\tvar Scheduler = require('./Scheduler');\n\tvar async = require('./env').asap;\n\n\treturn makePromise({\n\t\tscheduler: new Scheduler(async)\n\t});\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t// Credit to Twisol (https://github.com/Twisol) for suggesting\n\t// this type of extensible queue + trampoline approach for next-tick conflation.\n\n\t/**\n\t * Async task scheduler\n\t * @param {function} async function to schedule a single async function\n\t * @constructor\n\t */\n\tfunction Scheduler(async) {\n\t\tthis._async = async;\n\t\tthis._running = false;\n\n\t\tthis._queue = this;\n\t\tthis._queueLen = 0;\n\t\tthis._afterQueue = {};\n\t\tthis._afterQueueLen = 0;\n\n\t\tvar self = this;\n\t\tthis.drain = function() {\n\t\t\tself._drain();\n\t\t};\n\t}\n\n\t/**\n\t * Enqueue a task\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.enqueue = function(task) {\n\t\tthis._queue[this._queueLen++] = task;\n\t\tthis.run();\n\t};\n\n\t/**\n\t * Enqueue a task to run after the main task queue\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.afterQueue = function(task) {\n\t\tthis._afterQueue[this._afterQueueLen++] = task;\n\t\tthis.run();\n\t};\n\n\tScheduler.prototype.run = function() {\n\t\tif (!this._running) {\n\t\t\tthis._running = true;\n\t\t\tthis._async(this.drain);\n\t\t}\n\t};\n\n\t/**\n\t * Drain the handler queue entirely, and then the after queue\n\t */\n\tScheduler.prototype._drain = function() {\n\t\tvar i = 0;\n\t\tfor (; i < this._queueLen; ++i) {\n\t\t\tthis._queue[i].run();\n\t\t\tthis._queue[i] = void 0;\n\t\t}\n\n\t\tthis._queueLen = 0;\n\t\tthis._running = false;\n\n\t\tfor (i = 0; i < this._afterQueueLen; ++i) {\n\t\t\tthis._afterQueue[i].run();\n\t\t\tthis._afterQueue[i] = void 0;\n\t\t}\n\n\t\tthis._afterQueueLen = 0;\n\t};\n\n\treturn Scheduler;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t/**\n\t * Custom error type for promises rejected by promise.timeout\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction TimeoutError (message) {\n\t\tError.call(this);\n\t\tthis.message = message;\n\t\tthis.name = TimeoutError.name;\n\t\tif (typeof Error.captureStackTrace === 'function') {\n\t\t\tError.captureStackTrace(this, TimeoutError);\n\t\t}\n\t}\n\n\tTimeoutError.prototype = Object.create(Error.prototype);\n\tTimeoutError.prototype.constructor = TimeoutError;\n\n\treturn TimeoutError;\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\tmakeApply.tryCatchResolve = tryCatchResolve;\n\n\treturn makeApply;\n\n\tfunction makeApply(Promise, call) {\n\t\tif(arguments.length < 2) {\n\t\t\tcall = tryCatchResolve;\n\t\t}\n\n\t\treturn apply;\n\n\t\tfunction apply(f, thisArg, args) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar l = args.length;\n\t\t\tvar params = new Array(l);\n\t\t\tcallAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);\n\n\t\t\treturn p;\n\t\t}\n\n\t\tfunction callAndResolve(c, h) {\n\t\t\tif(c.i < 0) {\n\t\t\t\treturn call(c.f, c.thisArg, c.params, h);\n\t\t\t}\n\n\t\t\tvar handler = Promise._handler(c.args[c.i]);\n\t\t\thandler.fold(callAndResolveNext, c, void 0, h);\n\t\t}\n\n\t\tfunction callAndResolveNext(c, x, h) {\n\t\t\tc.params[c.i] = x;\n\t\t\tc.i -= 1;\n\t\t\tcallAndResolve(c, h);\n\t\t}\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tresolver.resolve(f.apply(thisArg, args));\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar state = require('../state');\n\tvar applier = require('../apply');\n\n\treturn function array(Promise) {\n\n\t\tvar applyFold = applier(Promise);\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\tvar ar = Array.prototype.reduce;\n\t\tvar arr = Array.prototype.reduceRight;\n\t\tvar slice = Array.prototype.slice;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.filter = filter;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param {function} onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(this, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\t\t\tvar l = promises.length>>>0;\n\n\t\t\tvar pending = l;\n\t\t\tvar errors = [];\n\n\t\t\tfor (var h, x, i = 0; i < l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = Promise._handler(x);\n\t\t\t\tif(h.state() > 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tPromise._visitRemaining(promises, i, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, handleFulfill, handleReject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.reject(new RangeError('any(): array must not be empty'));\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction handleFulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\terrors = null;\n\t\t\t\tthis.resolve(x); // this === resolver\n\t\t\t}\n\n\t\t\tfunction handleReject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t *\n\t\t * @deprecated\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\t/*jshint maxcomplexity:7*/\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\n\t\t\tvar results = [];\n\t\t\tvar errors = [];\n\n\t\t\tvar l = promises.length>>>0;\n\t\t\tvar nFulfill = 0;\n\t\t\tvar nReject;\n\t\t\tvar x, i; // reused in both for() loops\n\n\t\t\t// First pass: count actual array items\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++nFulfill;\n\t\t\t}\n\n\t\t\t// Compute actual goals\n\t\t\tn = Math.max(n, 0);\n\t\t\tnReject = (nFulfill - n + 1);\n\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\tif(n > nFulfill) {\n\t\t\t\tresolver.reject(new RangeError('some(): array must contain at least '\n\t\t\t\t+ n + ' item(s), but had ' + nFulfill));\n\t\t\t} else if(nFulfill === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\n\t\t\t// Second pass: observe each array item, make progress toward goals\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tPromise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction fulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresults.push(x);\n\t\t\t\tif(--nFulfill === 0) {\n\t\t\t\t\terrors = null;\n\t\t\t\t\tthis.resolve(results);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--nReject === 0) {\n\t\t\t\t\tresults = null;\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function(x:*, index:Number):*} f mapping function\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f) {\n\t\t\treturn Promise._traverse(f, promises);\n\t\t}\n\n\t\t/**\n\t\t * Filter the provided array of promises using the provided predicate.  Input may\n\t\t * contain promises and values\n\t\t * @param {Array} promises array of promises and values\n\t\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t\t *  Must return truthy (or promise for truthy) for items to retain.\n\t\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t\t *  for which predicate returned truthy.\n\t\t */\n\t\tfunction filter(promises, predicate) {\n\t\t\tvar a = slice.call(promises);\n\t\t\treturn Promise._traverse(predicate, a).then(function(keep) {\n\t\t\t\treturn filterSync(a, keep);\n\t\t\t});\n\t\t}\n\n\t\tfunction filterSync(promises, keep) {\n\t\t\t// Safe because we know all promises have fulfilled if we've made it this far\n\t\t\tvar l = keep.length;\n\t\t\tvar filtered = new Array(l);\n\t\t\tfor(var i=0, j=0; i<l; ++i) {\n\t\t\t\tif(keep[i]) {\n\t\t\t\t\tfiltered[j++] = Promise._handler(promises[i]).value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiltered.length = j;\n\t\t\treturn filtered;\n\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {Array} promises\n\t\t * @returns {Promise} promise for array of settled state descriptors\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(promises.map(settleOne));\n\t\t}\n\n\t\tfunction settleOne(p) {\n\t\t\t// Optimize the case where we get an already-resolved when.js promise\n\t\t\t//  by extracting its state:\n\t\t\tvar handler;\n\t\t\tif (p instanceof Promise) {\n\t\t\t\t// This is our own Promise type and we can reach its handler internals:\n\t\t\t\thandler = p._handler.join();\n\t\t\t}\n\t\t\tif((handler && handler.state() === 0) || !handler) {\n\t\t\t\t// Either still pending, or not a Promise at all:\n\t\t\t\treturn toPromise(p).then(state.fulfilled, state.rejected);\n\t\t\t}\n\n\t\t\t// The promise is our own, but it is already resolved. Take a shortcut.\n\t\t\t// Since we're not actually handling the resolution, we need to disable\n\t\t\t// rejection reporting.\n\t\t\thandler._unreport();\n\t\t\treturn state.inspect(handler);\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduce(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: ar.call(promises, liftCombine(f));\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduceRight(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: arr.call(promises, liftCombine(f));\n\t\t}\n\n\t\tfunction liftCombine(f) {\n\t\t\treturn function(z, x, i) {\n\t\t\t\treturn applyFold(f, void 0, [z,x,i]);\n\t\t\t};\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function flow(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\t\tvar reject = Promise.reject;\n\t\tvar origCatch = Promise.prototype['catch'];\n\n\t\t/**\n\t\t * Handle the ultimate fulfillment value or rejection reason, and assume\n\t\t * responsibility for all errors.  If an error propagates out of result\n\t\t * or handleFatalError, it will be rethrown to the host, resulting in a\n\t\t * loud stack track on most platforms and a crash on some.\n\t\t * @param {function?} onResult\n\t\t * @param {function?} onError\n\t\t * @returns {undefined}\n\t\t */\n\t\tPromise.prototype.done = function(onResult, onError) {\n\t\t\tthis._handler.visit(this._handler.receiver, onResult, onError);\n\t\t};\n\n\t\t/**\n\t\t * Add Error-type and predicate matching to catch.  Examples:\n\t\t * promise.catch(TypeError, handleTypeError)\n\t\t *   .catch(predicate, handleMatchedErrors)\n\t\t *   .catch(handleRemainingErrors)\n\t\t * @param onRejected\n\t\t * @returns {*}\n\t\t */\n\t\tPromise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {\n\t\t\tif (arguments.length < 2) {\n\t\t\t\treturn origCatch.call(this, onRejected);\n\t\t\t}\n\n\t\t\tif(typeof onRejected !== 'function') {\n\t\t\t\treturn this.ensure(rejectInvalidPredicate);\n\t\t\t}\n\n\t\t\treturn origCatch.call(this, createCatchFilter(arguments[1], onRejected));\n\t\t};\n\n\t\t/**\n\t\t * Wraps the provided catch handler, so that it will only be called\n\t\t * if the predicate evaluates truthy\n\t\t * @param {?function} handler\n\t\t * @param {function} predicate\n\t\t * @returns {function} conditional catch handler\n\t\t */\n\t\tfunction createCatchFilter(handler, predicate) {\n\t\t\treturn function(e) {\n\t\t\t\treturn evaluatePredicate(e, predicate)\n\t\t\t\t\t? handler.call(this, e)\n\t\t\t\t\t: reject(e);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Ensures that onFulfilledOrRejected will be called regardless of whether\n\t\t * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT\n\t\t * receive the promises' value or reason.  Any returned value will be disregarded.\n\t\t * onFulfilledOrRejected may throw or return a rejected promise to signal\n\t\t * an additional error.\n\t\t * @param {function} handler handler to be called regardless of\n\t\t *  fulfillment or rejection\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['finally'] = Promise.prototype.ensure = function(handler) {\n\t\t\tif(typeof handler !== 'function') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.then(function(x) {\n\t\t\t\treturn runSideEffect(handler, this, identity, x);\n\t\t\t}, function(e) {\n\t\t\t\treturn runSideEffect(handler, this, reject, e);\n\t\t\t});\n\t\t};\n\n\t\tfunction runSideEffect (handler, thisArg, propagate, value) {\n\t\t\tvar result = handler.call(thisArg);\n\t\t\treturn maybeThenable(result)\n\t\t\t\t? propagateValue(result, propagate, value)\n\t\t\t\t: propagate(value);\n\t\t}\n\n\t\tfunction propagateValue (result, propagate, x) {\n\t\t\treturn resolve(result).then(function () {\n\t\t\t\treturn propagate(x);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Recover from a failure by returning a defaultValue.  If defaultValue\n\t\t * is a promise, it's fulfillment value will be used.  If defaultValue is\n\t\t * a promise that rejects, the returned promise will reject with the\n\t\t * same reason.\n\t\t * @param {*} defaultValue\n\t\t * @returns {Promise} new promise\n\t\t */\n\t\tPromise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {\n\t\t\treturn this.then(void 0, function() {\n\t\t\t\treturn defaultValue;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Shortcut for .then(function() { return value; })\n\t\t * @param  {*} value\n\t\t * @return {Promise} a promise that:\n\t\t *  - is fulfilled if value is not a promise, or\n\t\t *  - if value is a promise, will fulfill with its value, or reject\n\t\t *    with its reason.\n\t\t */\n\t\tPromise.prototype['yield'] = function(value) {\n\t\t\treturn this.then(function() {\n\t\t\t\treturn value;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Runs a side effect when this promise fulfills, without changing the\n\t\t * fulfillment value.\n\t\t * @param {function} onFulfilledSideEffect\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.tap = function(onFulfilledSideEffect) {\n\t\t\treturn this.then(onFulfilledSideEffect)['yield'](this);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n\tfunction rejectInvalidPredicate() {\n\t\tthrow new TypeError('catch predicate must be a function');\n\t}\n\n\tfunction evaluatePredicate(e, predicate) {\n\t\treturn isError(predicate) ? e instanceof predicate : predicate(e);\n\t}\n\n\tfunction isError(predicate) {\n\t\treturn predicate === Error\n\t\t\t|| (predicate != null && predicate.prototype instanceof Error);\n\t}\n\n\tfunction maybeThenable(x) {\n\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t}\n\n\tfunction identity(x) {\n\t\treturn x;\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n/** @author Jeff Escalante */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function fold(Promise) {\n\n\t\tPromise.prototype.fold = function(f, z) {\n\t\t\tvar promise = this._beget();\n\n\t\t\tthis._handler.fold(function(z, x, to) {\n\t\t\t\tPromise._handler(z).fold(function(x, z, to) {\n\t\t\t\t\tto.resolve(f.call(this, z, x));\n\t\t\t\t}, x, this, to);\n\t\t\t}, z, promise._handler.receiver, promise._handler);\n\n\t\t\treturn promise;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar inspect = require('../state').inspect;\n\n\treturn function inspection(Promise) {\n\n\t\tPromise.prototype.inspect = function() {\n\t\t\treturn inspect(Promise._handler(this));\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function generate(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\n\t\tPromise.iterate = iterate;\n\t\tPromise.unfold = unfold;\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.iterate\n\t\t * Generate a (potentially infinite) stream of promised values:\n\t\t * x, f(x), f(f(x)), etc. until condition(x) returns true\n\t\t * @param {function} f function to generate a new x from the previous x\n\t\t * @param {function} condition function that, given the current x, returns\n\t\t *  truthy when the iterate should stop\n\t\t * @param {function} handler function to handle the value produced by f\n\t\t * @param {*|Promise} x starting value, may be a promise\n\t\t * @return {Promise} the result of the last call to f before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction iterate(f, condition, handler, x) {\n\t\t\treturn unfold(function(x) {\n\t\t\t\treturn [x, f(x)];\n\t\t\t}, condition, handler, x);\n\t\t}\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.unfold\n\t\t * Generate a (potentially infinite) stream of promised values\n\t\t * by applying handler(generator(seed)) iteratively until\n\t\t * condition(seed) returns true.\n\t\t * @param {function} unspool function that generates a [value, newSeed]\n\t\t *  given a seed.\n\t\t * @param {function} condition function that, given the current seed, returns\n\t\t *  truthy when the unfold should stop\n\t\t * @param {function} handler function to handle the value produced by unspool\n\t\t * @param x {*|Promise} starting value, may be a promise\n\t\t * @return {Promise} the result of the last value produced by unspool before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction unfold(unspool, condition, handler, x) {\n\t\t\treturn resolve(x).then(function(seed) {\n\t\t\t\treturn resolve(condition(seed)).then(function(done) {\n\t\t\t\t\treturn done ? seed : resolve(unspool(seed)).spread(next);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction next(item, newSeed) {\n\t\t\t\treturn resolve(handler(item)).then(function() {\n\t\t\t\t\treturn unfold(unspool, condition, handler, newSeed);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function progress(Promise) {\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Register a progress handler for this promise\n\t\t * @param {function} onProgress\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.progress = function(onProgress) {\n\t\t\treturn this.then(void 0, void 0, onProgress);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar env = require('../env');\n\tvar TimeoutError = require('../TimeoutError');\n\n\tfunction setTimeout(f, ms, x, y) {\n\t\treturn env.setTimer(function() {\n\t\t\tf(x, y, ms);\n\t\t}, ms);\n\t}\n\n\treturn function timed(Promise) {\n\t\t/**\n\t\t * Return a new promise whose fulfillment value is revealed only\n\t\t * after ms milliseconds\n\t\t * @param {number} ms milliseconds\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.delay = function(ms) {\n\t\t\tvar p = this._beget();\n\t\t\tthis._handler.fold(handleDelay, ms, void 0, p._handler);\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction handleDelay(ms, x, h) {\n\t\t\tsetTimeout(resolveDelay, ms, x, h);\n\t\t}\n\n\t\tfunction resolveDelay(x, h) {\n\t\t\th.resolve(x);\n\t\t}\n\n\t\t/**\n\t\t * Return a new promise that rejects after ms milliseconds unless\n\t\t * this promise fulfills earlier, in which case the returned promise\n\t\t * fulfills with the same value.\n\t\t * @param {number} ms milliseconds\n\t\t * @param {Error|*=} reason optional rejection reason to use, defaults\n\t\t *   to a TimeoutError if not provided\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.timeout = function(ms, reason) {\n\t\t\tvar p = this._beget();\n\t\t\tvar h = p._handler;\n\n\t\t\tvar t = setTimeout(onTimeout, ms, reason, p._handler);\n\n\t\t\tthis._handler.visit(h,\n\t\t\t\tfunction onFulfill(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.resolve(x); // this = h\n\t\t\t\t},\n\t\t\t\tfunction onReject(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.reject(x); // this = h\n\t\t\t\t},\n\t\t\t\th.notify);\n\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction onTimeout(reason, h, ms) {\n\t\t\tvar e = typeof reason === 'undefined'\n\t\t\t\t? new TimeoutError('timed out after ' + ms + 'ms')\n\t\t\t\t: reason;\n\t\t\th.reject(e);\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar setTimer = require('../env').setTimer;\n\tvar format = require('../format');\n\n\treturn function unhandledRejection(Promise) {\n\n\t\tvar logError = noop;\n\t\tvar logInfo = noop;\n\t\tvar localConsole;\n\n\t\tif(typeof console !== 'undefined') {\n\t\t\t// Alias console to prevent things like uglify's drop_console option from\n\t\t\t// removing console.log/error. Unhandled rejections fall into the same\n\t\t\t// category as uncaught exceptions, and build tools shouldn't silence them.\n\t\t\tlocalConsole = console;\n\t\t\tlogError = typeof localConsole.error !== 'undefined'\n\t\t\t\t? function (e) { localConsole.error(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\n\t\t\tlogInfo = typeof localConsole.info !== 'undefined'\n\t\t\t\t? function (e) { localConsole.info(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\t\t}\n\n\t\tPromise.onPotentiallyUnhandledRejection = function(rejection) {\n\t\t\tenqueue(report, rejection);\n\t\t};\n\n\t\tPromise.onPotentiallyUnhandledRejectionHandled = function(rejection) {\n\t\t\tenqueue(unreport, rejection);\n\t\t};\n\n\t\tPromise.onFatalRejection = function(rejection) {\n\t\t\tenqueue(throwit, rejection.value);\n\t\t};\n\n\t\tvar tasks = [];\n\t\tvar reported = [];\n\t\tvar running = null;\n\n\t\tfunction report(r) {\n\t\t\tif(!r.handled) {\n\t\t\t\treported.push(r);\n\t\t\t\tlogError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction unreport(r) {\n\t\t\tvar i = reported.indexOf(r);\n\t\t\tif(i >= 0) {\n\t\t\t\treported.splice(i, 1);\n\t\t\t\tlogInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction enqueue(f, x) {\n\t\t\ttasks.push(f, x);\n\t\t\tif(running === null) {\n\t\t\t\trunning = setTimer(flush, 0);\n\t\t\t}\n\t\t}\n\n\t\tfunction flush() {\n\t\t\trunning = null;\n\t\t\twhile(tasks.length > 0) {\n\t\t\t\ttasks.shift()(tasks.shift());\n\t\t\t}\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n\tfunction throwit(e) {\n\t\tthrow e;\n\t}\n\n\tfunction noop() {}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function addWith(Promise) {\n\t\t/**\n\t\t * Returns a promise whose handlers will be called with `this` set to\n\t\t * the supplied receiver.  Subsequent promises derived from the\n\t\t * returned promise will also have their handlers called with receiver\n\t\t * as `this`. Calling `with` with undefined or no arguments will return\n\t\t * a promise whose handlers will again be called in the usual Promises/A+\n\t\t * way (no `this`) thus safely undoing any previous `with` in the\n\t\t * promise chain.\n\t\t *\n\t\t * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n\t\t * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n\t\t *\n\t\t * @param {object} receiver `this` value for all handlers attached to\n\t\t *  the returned promise.\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['with'] = Promise.prototype.withThis = function(receiver) {\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\t\t\tchild.receiver = receiver;\n\t\t\tthis._handler.chain(child, receiver);\n\t\t\treturn p;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function(define) { 'use strict';\ndefine(function(require) {\n\t/*jshint maxcomplexity:6*/\n\n\t// Sniff \"best\" async scheduling option\n\t// Prefer process.nextTick or MutationObserver, then check for\n\t// setTimeout, and finally vertx, since its the only env that doesn't\n\t// have setTimeout\n\n\tvar MutationObs;\n\tvar capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;\n\n\t// Default env\n\tvar setTimer = function(f, ms) { return setTimeout(f, ms); };\n\tvar clearTimer = function(t) { return clearTimeout(t); };\n\tvar asap = function (f) { return capturedSetTimeout(f, 0); };\n\n\t// Detect specific env\n\tif (isNode()) { // Node\n\t\tasap = function (f) { return process.nextTick(f); };\n\n\t} else if (MutationObs = hasMutationObserver()) { // Modern browser\n\t\tasap = initMutationObserver(MutationObs);\n\n\t} else if (!capturedSetTimeout) { // vert.x\n\t\tvar vertxRequire = require;\n\t\tvar vertx = vertxRequire('vertx');\n\t\tsetTimer = function (f, ms) { return vertx.setTimer(ms, f); };\n\t\tclearTimer = vertx.cancelTimer;\n\t\tasap = vertx.runOnLoop || vertx.runOnContext;\n\t}\n\n\treturn {\n\t\tsetTimer: setTimer,\n\t\tclearTimer: clearTimer,\n\t\tasap: asap\n\t};\n\n\tfunction isNode () {\n\t\treturn typeof process !== 'undefined' &&\n\t\t\tObject.prototype.toString.call(process) === '[object process]';\n\t}\n\n\tfunction hasMutationObserver () {\n\t    return (typeof MutationObserver !== 'undefined' && MutationObserver) ||\n\t\t\t(typeof WebKitMutationObserver !== 'undefined' && WebKitMutationObserver);\n\t}\n\n\tfunction initMutationObserver(MutationObserver) {\n\t\tvar scheduled;\n\t\tvar node = document.createTextNode('');\n\t\tvar o = new MutationObserver(run);\n\t\to.observe(node, { characterData: true });\n\n\t\tfunction run() {\n\t\t\tvar f = scheduled;\n\t\t\tscheduled = void 0;\n\t\t\tf();\n\t\t}\n\n\t\tvar i = 0;\n\t\treturn function (f) {\n\t\t\tscheduled = f;\n\t\t\tnode.data = (i ^= 1);\n\t\t};\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tformatError: formatError,\n\t\tformatObject: formatObject,\n\t\ttryStringify: tryStringify\n\t};\n\n\t/**\n\t * Format an error into a string.  If e is an Error and has a stack property,\n\t * it's returned.  Otherwise, e is formatted using formatObject, with a\n\t * warning added about e not being a proper Error.\n\t * @param {*} e\n\t * @returns {String} formatted string, suitable for output to developers\n\t */\n\tfunction formatError(e) {\n\t\tvar s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);\n\t\treturn e instanceof Error ? s : s + ' (WARNING: non-Error used)';\n\t}\n\n\t/**\n\t * Format an object, detecting \"plain\" objects and running them through\n\t * JSON.stringify if possible.\n\t * @param {Object} o\n\t * @returns {string}\n\t */\n\tfunction formatObject(o) {\n\t\tvar s = String(o);\n\t\tif(s === '[object Object]' && typeof JSON !== 'undefined') {\n\t\t\ts = tryStringify(o, s);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Try to return the result of JSON.stringify(x).  If that fails, return\n\t * defaultValue\n\t * @param {*} x\n\t * @param {*} defaultValue\n\t * @returns {String|*} JSON.stringify(x) or defaultValue\n\t */\n\tfunction tryStringify(x, defaultValue) {\n\t\ttry {\n\t\t\treturn JSON.stringify(x);\n\t\t} catch(e) {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function liftAll(liftOne, combine, dst, src) {\n\t\tif(typeof combine === 'undefined') {\n\t\t\tcombine = defaultCombine;\n\t\t}\n\n\t\treturn Object.keys(src).reduce(function(dst, key) {\n\t\t\tvar f = src[key];\n\t\t\treturn typeof f === 'function' ? combine(dst, liftOne(f), key) : dst;\n\t\t}, typeof dst === 'undefined' ? defaultDst(src) : dst);\n\t};\n\n\tfunction defaultCombine(o, f, k) {\n\t\to[k] = f;\n\t\treturn o;\n\t}\n\n\tfunction defaultDst(src) {\n\t\treturn typeof src === 'function' ? src.bind() : Object.create(src);\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function makePromise(environment) {\n\n\t\tvar tasks = environment.scheduler;\n\t\tvar emitRejection = initEmitRejection();\n\n\t\tvar objectCreate = Object.create ||\n\t\t\tfunction(proto) {\n\t\t\t\tfunction Child() {}\n\t\t\t\tChild.prototype = proto;\n\t\t\t\treturn new Child();\n\t\t\t};\n\n\t\t/**\n\t\t * Create a promise whose fate is determined by resolver\n\t\t * @constructor\n\t\t * @returns {Promise} promise\n\t\t * @name Promise\n\t\t */\n\t\tfunction Promise(resolver, handler) {\n\t\t\tthis._handler = resolver === Handler ? handler : init(resolver);\n\t\t}\n\n\t\t/**\n\t\t * Run the supplied resolver\n\t\t * @param resolver\n\t\t * @returns {Pending}\n\t\t */\n\t\tfunction init(resolver) {\n\t\t\tvar handler = new Pending();\n\n\t\t\ttry {\n\t\t\t\tresolver(promiseResolve, promiseReject, promiseNotify);\n\t\t\t} catch (e) {\n\t\t\t\tpromiseReject(e);\n\t\t\t}\n\n\t\t\treturn handler;\n\n\t\t\t/**\n\t\t\t * Transition from pre-resolution state to post-resolution state, notifying\n\t\t\t * all listeners of the ultimate fulfillment or rejection\n\t\t\t * @param {*} x resolution value\n\t\t\t */\n\t\t\tfunction promiseResolve (x) {\n\t\t\t\thandler.resolve(x);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Reject this promise with reason, which will be used verbatim\n\t\t\t * @param {Error|*} reason rejection reason, strongly suggested\n\t\t\t *   to be an Error type\n\t\t\t */\n\t\t\tfunction promiseReject (reason) {\n\t\t\t\thandler.reject(reason);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @deprecated\n\t\t\t * Issue a progress event, notifying all progress listeners\n\t\t\t * @param {*} x progress event payload to pass to all listeners\n\t\t\t */\n\t\t\tfunction promiseNotify (x) {\n\t\t\t\thandler.notify(x);\n\t\t\t}\n\t\t}\n\n\t\t// Creation\n\n\t\tPromise.resolve = resolve;\n\t\tPromise.reject = reject;\n\t\tPromise.never = never;\n\n\t\tPromise._defer = defer;\n\t\tPromise._handler = getHandler;\n\n\t\t/**\n\t\t * Returns a trusted promise. If x is already a trusted promise, it is\n\t\t * returned, otherwise returns a new trusted Promise which follows x.\n\t\t * @param  {*} x\n\t\t * @return {Promise} promise\n\t\t */\n\t\tfunction resolve(x) {\n\t\t\treturn isPromise(x) ? x\n\t\t\t\t: new Promise(Handler, new Async(getHandler(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a reject promise with x as its reason (x is used verbatim)\n\t\t * @param {*} x\n\t\t * @returns {Promise} rejected promise\n\t\t */\n\t\tfunction reject(x) {\n\t\t\treturn new Promise(Handler, new Async(new Rejected(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that remains pending forever\n\t\t * @returns {Promise} forever-pending promise.\n\t\t */\n\t\tfunction never() {\n\t\t\treturn foreverPendingPromise; // Should be frozen\n\t\t}\n\n\t\t/**\n\t\t * Creates an internal {promise, resolver} pair\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction defer() {\n\t\t\treturn new Promise(Handler, new Pending());\n\t\t}\n\n\t\t// Transformation and flow control\n\n\t\t/**\n\t\t * Transform this promise's fulfillment value, returning a new Promise\n\t\t * for the transformed result.  If the promise cannot be fulfilled, onRejected\n\t\t * is called with the reason.  onProgress *may* be called with updates toward\n\t\t * this promise's fulfillment.\n\t\t * @param {function=} onFulfilled fulfillment handler\n\t\t * @param {function=} onRejected rejection handler\n\t\t * @param {function=} onProgress @deprecated progress handler\n\t\t * @return {Promise} new promise\n\t\t */\n\t\tPromise.prototype.then = function(onFulfilled, onRejected, onProgress) {\n\t\t\tvar parent = this._handler;\n\t\t\tvar state = parent.join().state();\n\n\t\t\tif ((typeof onFulfilled !== 'function' && state > 0) ||\n\t\t\t\t(typeof onRejected !== 'function' && state < 0)) {\n\t\t\t\t// Short circuit: value will not change, simply share handler\n\t\t\t\treturn new this.constructor(Handler, parent);\n\t\t\t}\n\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\n\t\t\tparent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);\n\n\t\t\treturn p;\n\t\t};\n\n\t\t/**\n\t\t * If this promise cannot be fulfilled due to an error, call onRejected to\n\t\t * handle the error. Shortcut for .then(undefined, onRejected)\n\t\t * @param {function?} onRejected\n\t\t * @return {Promise}\n\t\t */\n\t\tPromise.prototype['catch'] = function(onRejected) {\n\t\t\treturn this.then(void 0, onRejected);\n\t\t};\n\n\t\t/**\n\t\t * Creates a new, pending promise of the same type as this promise\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype._beget = function() {\n\t\t\treturn begetFrom(this._handler, this.constructor);\n\t\t};\n\n\t\tfunction begetFrom(parent, Promise) {\n\t\t\tvar child = new Pending(parent.receiver, parent.join().context);\n\t\t\treturn new Promise(Handler, child);\n\t\t}\n\n\t\t// Array combinators\n\n\t\tPromise.all = all;\n\t\tPromise.race = race;\n\t\tPromise._traverse = traverse;\n\n\t\t/**\n\t\t * Return a promise that will fulfill when all promises in the\n\t\t * input array have fulfilled, or will reject when one of the\n\t\t * promises rejects.\n\t\t * @param {array} promises array of promises\n\t\t * @returns {Promise} promise for array of fulfillment values\n\t\t */\n\t\tfunction all(promises) {\n\t\t\treturn traverseWith(snd, null, promises);\n\t\t}\n\n\t\t/**\n\t\t * Array<Promise<X>> -> Promise<Array<f(X)>>\n\t\t * @private\n\t\t * @param {function} f function to apply to each promise's value\n\t\t * @param {Array} promises array of promises\n\t\t * @returns {Promise} promise for transformed values\n\t\t */\n\t\tfunction traverse(f, promises) {\n\t\t\treturn traverseWith(tryCatch2, f, promises);\n\t\t}\n\n\t\tfunction traverseWith(tryMap, f, promises) {\n\t\t\tvar handler = typeof f === 'function' ? mapAt : settleAt;\n\n\t\t\tvar resolver = new Pending();\n\t\t\tvar pending = promises.length >>> 0;\n\t\t\tvar results = new Array(pending);\n\n\t\t\tfor (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {\n\t\t\t\tx = promises[i];\n\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttraverseAt(promises, handler, i, x, resolver);\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t}\n\n\t\t\treturn new Promise(Handler, resolver);\n\n\t\t\tfunction mapAt(i, x, resolver) {\n\t\t\t\tif(!resolver.resolved) {\n\t\t\t\t\ttraverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction settleAt(i, x, resolver) {\n\t\t\t\tresults[i] = x;\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction traverseAt(promises, handler, i, x, resolver) {\n\t\t\tif (maybeThenable(x)) {\n\t\t\t\tvar h = getHandlerMaybeThenable(x);\n\t\t\t\tvar s = h.state();\n\n\t\t\t\tif (s === 0) {\n\t\t\t\t\th.fold(handler, i, void 0, resolver);\n\t\t\t\t} else if (s > 0) {\n\t\t\t\t\thandler(i, h.value, resolver);\n\t\t\t\t} else {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandler(i, x, resolver);\n\t\t\t}\n\t\t}\n\n\t\tPromise._visitRemaining = visitRemaining;\n\t\tfunction visitRemaining(promises, start, handler) {\n\t\t\tfor(var i=start; i<promises.length; ++i) {\n\t\t\t\tmarkAsHandled(getHandler(promises[i]), handler);\n\t\t\t}\n\t\t}\n\n\t\tfunction markAsHandled(h, handler) {\n\t\t\tif(h === handler) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar s = h.state();\n\t\t\tif(s === 0) {\n\t\t\t\th.visit(h, void 0, h._unreport);\n\t\t\t} else if(s < 0) {\n\t\t\t\th._unreport();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fulfill-reject competitive race. Return a promise that will settle\n\t\t * to the same state as the earliest input promise to settle.\n\t\t *\n\t\t * WARNING: The ES6 Promise spec requires that race()ing an empty array\n\t\t * must return a promise that is pending forever.  This implementation\n\t\t * returns a singleton forever-pending promise, the same singleton that is\n\t\t * returned by Promise.never(), thus can be checked with ===\n\t\t *\n\t\t * @param {array} promises array of promises to race\n\t\t * @returns {Promise} if input is non-empty, a promise that will settle\n\t\t * to the same outcome as the earliest input promise to settle. if empty\n\t\t * is empty, returns a promise that will never settle.\n\t\t */\n\t\tfunction race(promises) {\n\t\t\tif(typeof promises !== 'object' || promises === null) {\n\t\t\t\treturn reject(new TypeError('non-iterable passed to race()'));\n\t\t\t}\n\n\t\t\t// Sigh, race([]) is untestable unless we return *something*\n\t\t\t// that is recognizable without calling .then() on it.\n\t\t\treturn promises.length === 0 ? never()\n\t\t\t\t : promises.length === 1 ? resolve(promises[0])\n\t\t\t\t : runRace(promises);\n\t\t}\n\n\t\tfunction runRace(promises) {\n\t\t\tvar resolver = new Pending();\n\t\t\tvar i, x, h;\n\t\t\tfor(i=0; i<promises.length; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = getHandler(x);\n\t\t\t\tif(h.state() !== 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Promise(Handler, resolver);\n\t\t}\n\n\t\t// Promise internals\n\t\t// Below this, everything is @private\n\n\t\t/**\n\t\t * Get an appropriate handler for x, without checking for cycles\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandler(x) {\n\t\t\tif(isPromise(x)) {\n\t\t\t\treturn x._handler.join();\n\t\t\t}\n\t\t\treturn maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for thenable x.\n\t\t * NOTE: You must only call this if maybeThenable(x) == true\n\t\t * @param {object|function|Promise} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerMaybeThenable(x) {\n\t\t\treturn isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for potentially untrusted thenable x\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerUntrusted(x) {\n\t\t\ttry {\n\t\t\t\tvar untrustedThen = x.then;\n\t\t\t\treturn typeof untrustedThen === 'function'\n\t\t\t\t\t? new Thenable(untrustedThen, x)\n\t\t\t\t\t: new Fulfilled(x);\n\t\t\t} catch(e) {\n\t\t\t\treturn new Rejected(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Handler for a promise that is pending forever\n\t\t * @constructor\n\t\t */\n\t\tfunction Handler() {}\n\n\t\tHandler.prototype.when\n\t\t\t= Handler.prototype.become\n\t\t\t= Handler.prototype.notify // deprecated\n\t\t\t= Handler.prototype.fail\n\t\t\t= Handler.prototype._unreport\n\t\t\t= Handler.prototype._report\n\t\t\t= noop;\n\n\t\tHandler.prototype._state = 0;\n\n\t\tHandler.prototype.state = function() {\n\t\t\treturn this._state;\n\t\t};\n\n\t\t/**\n\t\t * Recursively collapse handler chain to find the handler\n\t\t * nearest to the fully resolved value.\n\t\t * @returns {object} handler nearest the fully resolved value\n\t\t */\n\t\tHandler.prototype.join = function() {\n\t\t\tvar h = this;\n\t\t\twhile(h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t}\n\t\t\treturn h;\n\t\t};\n\n\t\tHandler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {\n\t\t\tthis.when({\n\t\t\t\tresolver: to,\n\t\t\t\treceiver: receiver,\n\t\t\t\tfulfilled: fulfilled,\n\t\t\t\trejected: rejected,\n\t\t\t\tprogress: progress\n\t\t\t});\n\t\t};\n\n\t\tHandler.prototype.visit = function(receiver, fulfilled, rejected, progress) {\n\t\t\tthis.chain(failIfRejected, receiver, fulfilled, rejected, progress);\n\t\t};\n\n\t\tHandler.prototype.fold = function(f, z, c, to) {\n\t\t\tthis.when(new Fold(f, z, c, to));\n\t\t};\n\n\t\t/**\n\t\t * Handler that invokes fail() on any handler it becomes\n\t\t * @constructor\n\t\t */\n\t\tfunction FailIfRejected() {}\n\n\t\tinherit(Handler, FailIfRejected);\n\n\t\tFailIfRejected.prototype.become = function(h) {\n\t\t\th.fail();\n\t\t};\n\n\t\tvar failIfRejected = new FailIfRejected();\n\n\t\t/**\n\t\t * Handler that manages a queue of consumers waiting on a pending promise\n\t\t * @constructor\n\t\t */\n\t\tfunction Pending(receiver, inheritedContext) {\n\t\t\tPromise.createContext(this, inheritedContext);\n\n\t\t\tthis.consumers = void 0;\n\t\t\tthis.receiver = receiver;\n\t\t\tthis.handler = void 0;\n\t\t\tthis.resolved = false;\n\t\t}\n\n\t\tinherit(Handler, Pending);\n\n\t\tPending.prototype._state = 0;\n\n\t\tPending.prototype.resolve = function(x) {\n\t\t\tthis.become(getHandler(x));\n\t\t};\n\n\t\tPending.prototype.reject = function(x) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.become(new Rejected(x));\n\t\t};\n\n\t\tPending.prototype.join = function() {\n\t\t\tif (!this.resolved) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar h = this;\n\n\t\t\twhile (h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t\tif (h === this) {\n\t\t\t\t\treturn this.handler = cycle();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn h;\n\t\t};\n\n\t\tPending.prototype.run = function() {\n\t\t\tvar q = this.consumers;\n\t\t\tvar handler = this.handler;\n\t\t\tthis.handler = this.handler.join();\n\t\t\tthis.consumers = void 0;\n\n\t\t\tfor (var i = 0; i < q.length; ++i) {\n\t\t\t\thandler.when(q[i]);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.become = function(handler) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.resolved = true;\n\t\t\tthis.handler = handler;\n\t\t\tif(this.consumers !== void 0) {\n\t\t\t\ttasks.enqueue(this);\n\t\t\t}\n\n\t\t\tif(this.context !== void 0) {\n\t\t\t\thandler._report(this.context);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.when = function(continuation) {\n\t\t\tif(this.resolved) {\n\t\t\t\ttasks.enqueue(new ContinuationTask(continuation, this.handler));\n\t\t\t} else {\n\t\t\t\tif(this.consumers === void 0) {\n\t\t\t\t\tthis.consumers = [continuation];\n\t\t\t\t} else {\n\t\t\t\t\tthis.consumers.push(continuation);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tPending.prototype.notify = function(x) {\n\t\t\tif(!this.resolved) {\n\t\t\t\ttasks.enqueue(new ProgressTask(x, this));\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.fail = function(context) {\n\t\t\tvar c = typeof context === 'undefined' ? this.context : context;\n\t\t\tthis.resolved && this.handler.join().fail(c);\n\t\t};\n\n\t\tPending.prototype._report = function(context) {\n\t\t\tthis.resolved && this.handler.join()._report(context);\n\t\t};\n\n\t\tPending.prototype._unreport = function() {\n\t\t\tthis.resolved && this.handler.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Wrap another handler and force it into a future stack\n\t\t * @param {object} handler\n\t\t * @constructor\n\t\t */\n\t\tfunction Async(handler) {\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tinherit(Handler, Async);\n\n\t\tAsync.prototype.when = function(continuation) {\n\t\t\ttasks.enqueue(new ContinuationTask(continuation, this));\n\t\t};\n\n\t\tAsync.prototype._report = function(context) {\n\t\t\tthis.join()._report(context);\n\t\t};\n\n\t\tAsync.prototype._unreport = function() {\n\t\t\tthis.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Handler that wraps an untrusted thenable and assimilates it in a future stack\n\t\t * @param {function} then\n\t\t * @param {{then: function}} thenable\n\t\t * @constructor\n\t\t */\n\t\tfunction Thenable(then, thenable) {\n\t\t\tPending.call(this);\n\t\t\ttasks.enqueue(new AssimilateTask(then, thenable, this));\n\t\t}\n\n\t\tinherit(Pending, Thenable);\n\n\t\t/**\n\t\t * Handler for a fulfilled promise\n\t\t * @param {*} x fulfillment value\n\t\t * @constructor\n\t\t */\n\t\tfunction Fulfilled(x) {\n\t\t\tPromise.createContext(this);\n\t\t\tthis.value = x;\n\t\t}\n\n\t\tinherit(Handler, Fulfilled);\n\n\t\tFulfilled.prototype._state = 1;\n\n\t\tFulfilled.prototype.fold = function(f, z, c, to) {\n\t\t\trunContinuation3(f, z, this, c, to);\n\t\t};\n\n\t\tFulfilled.prototype.when = function(cont) {\n\t\t\trunContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tvar errorId = 0;\n\n\t\t/**\n\t\t * Handler for a rejected promise\n\t\t * @param {*} x rejection reason\n\t\t * @constructor\n\t\t */\n\t\tfunction Rejected(x) {\n\t\t\tPromise.createContext(this);\n\n\t\t\tthis.id = ++errorId;\n\t\t\tthis.value = x;\n\t\t\tthis.handled = false;\n\t\t\tthis.reported = false;\n\n\t\t\tthis._report();\n\t\t}\n\n\t\tinherit(Handler, Rejected);\n\n\t\tRejected.prototype._state = -1;\n\n\t\tRejected.prototype.fold = function(f, z, c, to) {\n\t\t\tto.become(this);\n\t\t};\n\n\t\tRejected.prototype.when = function(cont) {\n\t\t\tif(typeof cont.rejected === 'function') {\n\t\t\t\tthis._unreport();\n\t\t\t}\n\t\t\trunContinuation1(cont.rejected, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tRejected.prototype._report = function(context) {\n\t\t\ttasks.afterQueue(new ReportTask(this, context));\n\t\t};\n\n\t\tRejected.prototype._unreport = function() {\n\t\t\tif(this.handled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.handled = true;\n\t\t\ttasks.afterQueue(new UnreportTask(this));\n\t\t};\n\n\t\tRejected.prototype.fail = function(context) {\n\t\t\tthis.reported = true;\n\t\t\temitRejection('unhandledRejection', this);\n\t\t\tPromise.onFatalRejection(this, context === void 0 ? this.context : context);\n\t\t};\n\n\t\tfunction ReportTask(rejection, context) {\n\t\t\tthis.rejection = rejection;\n\t\t\tthis.context = context;\n\t\t}\n\n\t\tReportTask.prototype.run = function() {\n\t\t\tif(!this.rejection.handled && !this.rejection.reported) {\n\t\t\t\tthis.rejection.reported = true;\n\t\t\t\temitRejection('unhandledRejection', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejection(this.rejection, this.context);\n\t\t\t}\n\t\t};\n\n\t\tfunction UnreportTask(rejection) {\n\t\t\tthis.rejection = rejection;\n\t\t}\n\n\t\tUnreportTask.prototype.run = function() {\n\t\t\tif(this.rejection.reported) {\n\t\t\t\temitRejection('rejectionHandled', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejectionHandled(this.rejection);\n\t\t\t}\n\t\t};\n\n\t\t// Unhandled rejection hooks\n\t\t// By default, everything is a noop\n\n\t\tPromise.createContext\n\t\t\t= Promise.enterContext\n\t\t\t= Promise.exitContext\n\t\t\t= Promise.onPotentiallyUnhandledRejection\n\t\t\t= Promise.onPotentiallyUnhandledRejectionHandled\n\t\t\t= Promise.onFatalRejection\n\t\t\t= noop;\n\n\t\t// Errors and singletons\n\n\t\tvar foreverPendingHandler = new Handler();\n\t\tvar foreverPendingPromise = new Promise(Handler, foreverPendingHandler);\n\n\t\tfunction cycle() {\n\t\t\treturn new Rejected(new TypeError('Promise cycle'));\n\t\t}\n\n\t\t// Task runners\n\n\t\t/**\n\t\t * Run a single consumer\n\t\t * @constructor\n\t\t */\n\t\tfunction ContinuationTask(continuation, handler) {\n\t\t\tthis.continuation = continuation;\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tContinuationTask.prototype.run = function() {\n\t\t\tthis.handler.join().when(this.continuation);\n\t\t};\n\n\t\t/**\n\t\t * Run a queue of progress handlers\n\t\t * @constructor\n\t\t */\n\t\tfunction ProgressTask(value, handler) {\n\t\t\tthis.handler = handler;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tProgressTask.prototype.run = function() {\n\t\t\tvar q = this.handler.consumers;\n\t\t\tif(q === void 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var c, i = 0; i < q.length; ++i) {\n\t\t\t\tc = q[i];\n\t\t\t\trunNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Assimilate a thenable, sending it's value to resolver\n\t\t * @param {function} then\n\t\t * @param {object|function} thenable\n\t\t * @param {object} resolver\n\t\t * @constructor\n\t\t */\n\t\tfunction AssimilateTask(then, thenable, resolver) {\n\t\t\tthis._then = then;\n\t\t\tthis.thenable = thenable;\n\t\t\tthis.resolver = resolver;\n\t\t}\n\n\t\tAssimilateTask.prototype.run = function() {\n\t\t\tvar h = this.resolver;\n\t\t\ttryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);\n\n\t\t\tfunction _resolve(x) { h.resolve(x); }\n\t\t\tfunction _reject(x)  { h.reject(x); }\n\t\t\tfunction _notify(x)  { h.notify(x); }\n\t\t};\n\n\t\tfunction tryAssimilate(then, thenable, resolve, reject, notify) {\n\t\t\ttry {\n\t\t\t\tthen.call(thenable, resolve, reject, notify);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fold a handler value with z\n\t\t * @constructor\n\t\t */\n\t\tfunction Fold(f, z, c, to) {\n\t\t\tthis.f = f; this.z = z; this.c = c; this.to = to;\n\t\t\tthis.resolver = failIfRejected;\n\t\t\tthis.receiver = this;\n\t\t}\n\n\t\tFold.prototype.fulfilled = function(x) {\n\t\t\tthis.f.call(this.c, this.z, x, this.to);\n\t\t};\n\n\t\tFold.prototype.rejected = function(x) {\n\t\t\tthis.to.reject(x);\n\t\t};\n\n\t\tFold.prototype.progress = function(x) {\n\t\t\tthis.to.notify(x);\n\t\t};\n\n\t\t// Other helpers\n\n\t\t/**\n\t\t * @param {*} x\n\t\t * @returns {boolean} true iff x is a trusted Promise\n\t\t */\n\t\tfunction isPromise(x) {\n\t\t\treturn x instanceof Promise;\n\t\t}\n\n\t\t/**\n\t\t * Test just enough to rule out primitives, in order to take faster\n\t\t * paths in some code\n\t\t * @param {*} x\n\t\t * @returns {boolean} false iff x is guaranteed *not* to be a thenable\n\t\t */\n\t\tfunction maybeThenable(x) {\n\t\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t\t}\n\n\t\tfunction runContinuation1(f, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject(f, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction runContinuation3(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject3(f, x, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tfunction runNotify(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.notify(x);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReturn(f, x, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction tryCatch2(f, a, b) {\n\t\t\ttry {\n\t\t\t\treturn f(a, b);\n\t\t\t} catch(e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Return f.call(thisArg, x), or if it throws return a rejected promise for\n\t\t * the thrown exception\n\t\t */\n\t\tfunction tryCatchReject(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.become(getHandler(f.call(thisArg, x)));\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Same as above, but includes the extra argument parameter.\n\t\t */\n\t\tfunction tryCatchReject3(f, x, y, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tf.call(thisArg, x, y, next);\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Return f.call(thisArg, x), or if it throws, *return* the exception\n\t\t */\n\t\tfunction tryCatchReturn(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.notify(f.call(thisArg, x));\n\t\t\t} catch(e) {\n\t\t\t\tnext.notify(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction inherit(Parent, Child) {\n\t\t\tChild.prototype = objectCreate(Parent.prototype);\n\t\t\tChild.prototype.constructor = Child;\n\t\t}\n\n\t\tfunction snd(x, y) {\n\t\t\treturn y;\n\t\t}\n\n\t\tfunction noop() {}\n\n\t\tfunction hasCustomEvent() {\n\t\t\tif(typeof CustomEvent === 'function') {\n\t\t\t\ttry {\n\t\t\t\t\tvar ev = new CustomEvent('unhandledRejection');\n\t\t\t\t\treturn ev instanceof CustomEvent;\n\t\t\t\t} catch (ignoredException) {}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction hasInternetExplorerCustomEvent() {\n\t\t\tif(typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n\t\t\t\ttry {\n\t\t\t\t\t// Try to create one event to make sure it's supported\n\t\t\t\t\tvar ev = document.createEvent('CustomEvent');\n\t\t\t\t\tev.initCustomEvent('eventType', false, true, {});\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (ignoredException) {}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction initEmitRejection() {\n\t\t\t/*global process, self, CustomEvent*/\n\t\t\tif(typeof process !== 'undefined' && process !== null\n\t\t\t\t&& typeof process.emit === 'function') {\n\t\t\t\t// Returning falsy here means to call the default\n\t\t\t\t// onPotentiallyUnhandledRejection API.  This is safe even in\n\t\t\t\t// browserify since process.emit always returns falsy in browserify:\n\t\t\t\t// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46\n\t\t\t\treturn function(type, rejection) {\n\t\t\t\t\treturn type === 'unhandledRejection'\n\t\t\t\t\t\t? process.emit(type, rejection.value, rejection)\n\t\t\t\t\t\t: process.emit(type, rejection);\n\t\t\t\t};\n\t\t\t} else if(typeof self !== 'undefined' && hasCustomEvent()) {\n\t\t\t\treturn (function (self, CustomEvent) {\n\t\t\t\t\treturn function (type, rejection) {\n\t\t\t\t\t\tvar ev = new CustomEvent(type, {\n\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\treason: rejection.value,\n\t\t\t\t\t\t\t\tkey: rejection\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: true\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !self.dispatchEvent(ev);\n\t\t\t\t\t};\n\t\t\t\t}(self, CustomEvent));\n\t\t\t} else if(typeof self !== 'undefined' && hasInternetExplorerCustomEvent()) {\n\t\t\t\treturn (function(self, document) {\n\t\t\t\t\treturn function(type, rejection) {\n\t\t\t\t\t\tvar ev = document.createEvent('CustomEvent');\n\t\t\t\t\t\tev.initCustomEvent(type, false, true, {\n\t\t\t\t\t\t\treason: rejection.value,\n\t\t\t\t\t\t\tkey: rejection\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !self.dispatchEvent(ev);\n\t\t\t\t\t};\n\t\t\t\t}(self, document));\n\t\t\t}\n\n\t\t\treturn noop;\n\t\t}\n\n\t\treturn Promise;\n\t};\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tpending: toPendingState,\n\t\tfulfilled: toFulfilledState,\n\t\trejected: toRejectedState,\n\t\tinspect: inspect\n\t};\n\n\tfunction toPendingState() {\n\t\treturn { state: 'pending' };\n\t}\n\n\tfunction toRejectedState(e) {\n\t\treturn { state: 'rejected', reason: e };\n\t}\n\n\tfunction toFulfilledState(x) {\n\t\treturn { state: 'fulfilled', value: x };\n\t}\n\n\tfunction inspect(handler) {\n\t\tvar state = handler.state();\n\t\treturn state === 0 ? toPendingState()\n\t\t\t : state > 0   ? toFulfilledState(handler.value)\n\t\t\t               : toRejectedState(handler.value);\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2013 original author or authors */\n\n/**\n * Collection of helpers for interfacing with node-style asynchronous functions\n * using promises.\n *\n * @author Brian Cavalier\n * @contributor Renato Zannon\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar _liftAll = require('./lib/liftAll');\n\tvar setTimer = require('./lib/env').setTimer;\n\tvar slice = Array.prototype.slice;\n\n\tvar _apply = require('./lib/apply')(when.Promise, dispatch);\n\n\treturn {\n\t\tlift: lift,\n\t\tliftAll: liftAll,\n\t\tapply: apply,\n\t\tcall: call,\n\t\tcreateCallback: createCallback,\n\t\tbindCallback: bindCallback,\n\t\tliftCallback: liftCallback\n\t};\n\n\t/**\n\t * Takes a node-style async function and calls it immediately (with an optional\n\t * array of arguments or promises for arguments). It returns a promise whose\n\t * resolution depends on whether the async functions calls its callback with the\n\t * conventional error argument or not.\n\t *\n\t * With this it becomes possible to leverage existing APIs while still reaping\n\t * the benefits of promises.\n\t *\n\t * @example\n\t *    function onlySmallNumbers(n, callback) {\n\t *\t\tif(n < 10) {\n\t *\t\t\tcallback(null, n + 10);\n\t *\t\t} else {\n\t *\t\t\tcallback(new Error(\"Calculation failed\"));\n\t *\t\t}\n\t *\t}\n\t *\n\t *    var nodefn = require(\"when/node/function\");\n\t *\n\t *    // Logs '15'\n\t *    nodefn.apply(onlySmallNumbers, [5]).then(console.log, console.error);\n\t *\n\t *    // Logs 'Calculation failed'\n\t *    nodefn.apply(onlySmallNumbers, [15]).then(console.log, console.error);\n\t *\n\t * @param {function} f node-style function that will be called\n\t * @param {Array} [args] array of arguments to func\n\t * @returns {Promise} promise for the value func passes to its callback\n\t */\n\tfunction apply(f, args) {\n\t\treturn _apply(f, this, args || []);\n\t}\n\n\tfunction dispatch(f, thisArg, args, h) {\n\t\tvar cb = createCallback(h);\n\t\ttry {\n\t\t\tswitch(args.length) {\n\t\t\t\tcase 2: f.call(thisArg, args[0], args[1], cb); break;\n\t\t\t\tcase 1: f.call(thisArg, args[0], cb); break;\n\t\t\t\tcase 0: f.call(thisArg, cb); break;\n\t\t\t\tdefault:\n\t\t\t\t\targs.push(cb);\n\t\t\t\t\tf.apply(thisArg, args);\n\t\t\t}\n\t\t} catch(e) {\n\t\t\th.reject(e);\n\t\t}\n\t}\n\n\t/**\n\t * Has the same behavior that {@link apply} has, with the difference that the\n\t * arguments to the function are provided individually, while {@link apply} accepts\n\t * a single array.\n\t *\n\t * @example\n\t *    function sumSmallNumbers(x, y, callback) {\n\t *\t\tvar result = x + y;\n\t *\t\tif(result < 10) {\n\t *\t\t\tcallback(null, result);\n\t *\t\t} else {\n\t *\t\t\tcallback(new Error(\"Calculation failed\"));\n\t *\t\t}\n\t *\t}\n\t *\n\t *    // Logs '5'\n\t *    nodefn.call(sumSmallNumbers, 2, 3).then(console.log, console.error);\n\t *\n\t *    // Logs 'Calculation failed'\n\t *    nodefn.call(sumSmallNumbers, 5, 10).then(console.log, console.error);\n\t *\n\t * @param {function} f node-style function that will be called\n\t * @param {...*} [args] arguments that will be forwarded to the function\n\t * @returns {Promise} promise for the value func passes to its callback\n\t */\n\tfunction call(f /*, args... */) {\n\t\treturn _apply(f, this, slice.call(arguments, 1));\n\t}\n\n\t/**\n\t * Takes a node-style function and returns new function that wraps the\n\t * original and, instead of taking a callback, returns a promise. Also, it\n\t * knows how to handle promises given as arguments, waiting for their\n\t * resolution before executing.\n\t *\n\t * Upon execution, the orginal function is executed as well. If it passes\n\t * a truthy value as the first argument to the callback, it will be\n\t * interpreted as an error condition, and the promise will be rejected\n\t * with it. Otherwise, the call is considered a resolution, and the promise\n\t * is resolved with the callback's second argument.\n\t *\n\t * @example\n\t *    var fs = require(\"fs\"), nodefn = require(\"when/node/function\");\n\t *\n\t *    var promiseRead = nodefn.lift(fs.readFile);\n\t *\n\t *    // The promise is resolved with the contents of the file if everything\n\t *    // goes ok\n\t *    promiseRead('exists.txt').then(console.log, console.error);\n\t *\n\t *    // And will be rejected if something doesn't work out\n\t *    // (e.g. the files does not exist)\n\t *    promiseRead('doesnt_exist.txt').then(console.log, console.error);\n\t *\n\t *\n\t * @param {Function} f node-style function to be lifted\n\t * @param {...*} [args] arguments to be prepended for the new function @deprecated\n\t * @returns {Function} a promise-returning function\n\t */\n\tfunction lift(f /*, args... */) {\n\t\tvar args1 = arguments.length > 1 ? slice.call(arguments, 1) : [];\n\t\treturn function() {\n\t\t\t// TODO: Simplify once partialing has been removed\n\t\t\tvar l = args1.length;\n\t\t\tvar al = arguments.length;\n\t\t\tvar args = new Array(al + l);\n\t\t\tvar i;\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\targs[i] = args1[i];\n\t\t\t}\n\t\t\tfor(i=0; i<al; ++i) {\n\t\t\t\targs[i+l] = arguments[i];\n\t\t\t}\n\t\t\treturn _apply(f, this, args);\n\t\t};\n\t}\n\n\t/**\n\t * Lift all the functions/methods on src\n\t * @param {object|function} src source whose functions will be lifted\n\t * @param {function?} combine optional function for customizing the lifting\n\t *  process. It is passed dst, the lifted function, and the property name of\n\t *  the original function on src.\n\t * @param {(object|function)?} dst option destination host onto which to place lifted\n\t *  functions. If not provided, liftAll returns a new object.\n\t * @returns {*} If dst is provided, returns dst with lifted functions as\n\t *  properties.  If dst not provided, returns a new object with lifted functions.\n\t */\n\tfunction liftAll(src, combine, dst) {\n\t\treturn _liftAll(lift, combine, dst, src);\n\t}\n\n\t/**\n\t * Takes an object that responds to the resolver interface, and returns\n\t * a function that will resolve or reject it depending on how it is called.\n\t *\n\t * @example\n\t *\tfunction callbackTakingFunction(callback) {\n\t *\t\tif(somethingWrongHappened) {\n\t *\t\t\tcallback(error);\n\t *\t\t} else {\n\t *\t\t\tcallback(null, interestingValue);\n\t *\t\t}\n\t *\t}\n\t *\n\t *\tvar when = require('when'), nodefn = require('when/node/function');\n\t *\n\t *\tvar deferred = when.defer();\n\t *\tcallbackTakingFunction(nodefn.createCallback(deferred.resolver));\n\t *\n\t *\tdeferred.promise.then(function(interestingValue) {\n\t *\t\t// Use interestingValue\n\t *\t});\n\t *\n\t * @param {Resolver} resolver that will be 'attached' to the callback\n\t * @returns {Function} a node-style callback function\n\t */\n\tfunction createCallback(resolver) {\n\t\treturn function(err, value) {\n\t\t\tif(err) {\n\t\t\t\tresolver.reject(err);\n\t\t\t} else if(arguments.length > 2) {\n\t\t\t\tresolver.resolve(slice.call(arguments, 1));\n\t\t\t} else {\n\t\t\t\tresolver.resolve(value);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Attaches a node-style callback to a promise, ensuring the callback is\n\t * called for either fulfillment or rejection. Returns a promise with the same\n\t * state as the passed-in promise.\n\t *\n\t * @example\n\t *\tvar deferred = when.defer();\n\t *\n\t *\tfunction callback(err, value) {\n\t *\t\t// Handle err or use value\n\t *\t}\n\t *\n\t *\tbindCallback(deferred.promise, callback);\n\t *\n\t *\tdeferred.resolve('interesting value');\n\t *\n\t * @param {Promise} promise The promise to be attached to.\n\t * @param {Function} callback The node-style callback to attach.\n\t * @returns {Promise} A promise with the same state as the passed-in promise.\n\t */\n\tfunction bindCallback(promise, callback) {\n\t\tpromise = when(promise);\n\n\t\tif (callback) {\n\t\t\tpromise.then(success, wrapped);\n\t\t}\n\n\t\treturn promise;\n\n\t\tfunction success(value) {\n\t\t\twrapped(null, value);\n\t\t}\n\n\t\tfunction wrapped(err, value) {\n\t\t\tsetTimer(function () {\n\t\t\t\tcallback(err, value);\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Takes a node-style callback and returns new function that accepts a\n\t * promise, calling the original callback when the promise is either\n\t * fulfilled or rejected with the appropriate arguments.\n\t *\n\t * @example\n\t *\tvar deferred = when.defer();\n\t *\n\t *\tfunction callback(err, value) {\n\t *\t\t// Handle err or use value\n\t *\t}\n\t *\n\t *\tvar wrapped = liftCallback(callback);\n\t *\n\t *\t// `wrapped` can now be passed around at will\n\t *\twrapped(deferred.promise);\n\t *\n\t *\tdeferred.resolve('interesting value');\n\t *\n\t * @param {Function} callback The node-style callback to wrap.\n\t * @returns {Function} The lifted, promise-accepting function.\n\t */\n\tfunction liftCallback(callback) {\n\t\treturn function(promise) {\n\t\t\treturn bindCallback(promise, callback);\n\t\t};\n\t}\n});\n\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * parallel.js\n *\n * Run a set of task functions in parallel.  All tasks will\n * receive the same args\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar all = when.Promise.all;\n\tvar slice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in parallel\n\t * @param tasks {Array|Promise} array or promiseForArray of task functions\n\t * @param [args] {*} arguments to be passed to all tasks\n\t * @return {Promise} promise for array containing the\n\t * result of each task in the array position corresponding\n\t * to position of the task in the tasks array\n\t */\n\treturn function parallel(tasks /*, args... */) {\n\t\treturn all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.map(tasks, function(task) {\n\t\t\t\treturn task.apply(void 0, args);\n\t\t\t});\n\t\t});\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * pipeline.js\n *\n * Run a set of task functions in sequence, passing the result\n * of the previous as an argument to the next.  Like a shell\n * pipeline, e.g. `cat file.txt | grep 'foo' | sed -e 's/foo/bar/g'\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar all = when.Promise.all;\n\tvar slice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in a pipeline where the next\n\t * tasks receives the result of the previous.  The first task\n\t * will receive the initialArgs as its argument list.\n\t * @param tasks {Array|Promise} array or promise for array of task functions\n\t * @param [initialArgs...] {*} arguments to be passed to the first task\n\t * @return {Promise} promise for return value of the final task\n\t */\n\treturn function pipeline(tasks /* initialArgs... */) {\n\t\t// Self-optimizing function to run first task with multiple\n\t\t// args using apply, but subsequence tasks via direct invocation\n\t\tvar runTask = function(args, task) {\n\t\t\trunTask = function(arg, task) {\n\t\t\t\treturn task(arg);\n\t\t\t};\n\n\t\t\treturn task.apply(null, args);\n\t\t};\n\n\t\treturn all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.reduce(tasks, function(arg, task) {\n\t\t\t\treturn runTask(arg, task);\n\t\t\t}, args);\n\t\t});\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2012-2013 original author or authors */\n\n/**\n * poll.js\n *\n * Helper that polls until cancelled or for a condition to become true.\n *\n * @author Scott Andrews\n */\n\n(function (define) { 'use strict';\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar attempt = when['try'];\n\tvar cancelable = require('./cancelable');\n\n\t/**\n\t * Periodically execute the task function on the msec delay. The result of\n\t * the task may be verified by watching for a condition to become true. The\n\t * returned deferred is cancellable if the polling needs to be cancelled\n\t * externally before reaching a resolved state.\n\t *\n\t * The next vote is scheduled after the results of the current vote are\n\t * verified and rejected.\n\t *\n\t * Polling may be terminated by the verifier returning a truthy value,\n\t * invoking cancel() on the returned promise, or the task function returning\n\t * a rejected promise.\n\t *\n\t * Usage:\n\t *\n\t * var count = 0;\n\t * function doSomething() { return count++ }\n\t *\n\t * // poll until cancelled\n\t * var p = poll(doSomething, 1000);\n\t * ...\n\t * p.cancel();\n\t *\n\t * // poll until condition is met\n\t * poll(doSomething, 1000, function(result) { return result > 10 })\n\t *     .then(function(result) { assert result == 10 });\n\t *\n\t * // delay first vote\n\t * poll(doSomething, 1000, anyFunc, true);\n\t *\n\t * @param task {Function} function that is executed after every timeout\n\t * @param interval {number|Function} timeout in milliseconds\n\t * @param [verifier] {Function} function to evaluate the result of the vote.\n\t *     May return a {Promise} or a {Boolean}. Rejecting the promise or a\n\t *     falsey value will schedule the next vote.\n\t * @param [delayInitialTask] {boolean} if truthy, the first vote is scheduled\n\t *     instead of immediate\n\t *\n\t * @returns {Promise}\n\t */\n\treturn function poll(task, interval, verifier, delayInitialTask) {\n\t\tvar deferred, canceled, reject;\n\n\t\tcanceled = false;\n\t\tdeferred = cancelable(when.defer(), function () { canceled = true; });\n\t\treject = deferred.reject;\n\n\t\tverifier = verifier || function () { return false; };\n\n\t\tif (typeof interval !== 'function') {\n\t\t\tinterval = (function (interval) {\n\t\t\t\treturn function () { return when().delay(interval); };\n\t\t\t})(interval);\n\t\t}\n\n\t\tfunction certify(result) {\n\t\t\tdeferred.resolve(result);\n\t\t}\n\n\t\tfunction schedule(result) {\n\t\t\tattempt(interval).then(vote, reject);\n\t\t\tif (result !== void 0) {\n\t\t\t\tdeferred.notify(result);\n\t\t\t}\n\t\t}\n\n\t\tfunction vote() {\n\t\t\tif (canceled) { return; }\n\t\t\twhen(task(),\n\t\t\t\tfunction (result) {\n\t\t\t\t\twhen(verifier(result),\n\t\t\t\t\t\tfunction (verification) {\n\t\t\t\t\t\t\treturn verification ? certify(result) : schedule(result);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction () { schedule(result); }\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\treject\n\t\t\t);\n\t\t}\n\n\t\tif (delayInitialTask) {\n\t\t\tschedule();\n\t\t} else {\n\t\t\t// if task() is blocking, vote will also block\n\t\t\tvote();\n\t\t}\n\n\t\t// make the promise cancelable\n\t\tdeferred.promise = Object.create(deferred.promise);\n\t\tdeferred.promise.cancel = deferred.cancel;\n\n\t\treturn deferred.promise;\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * sequence.js\n *\n * Run a set of task functions in sequence.  All tasks will\n * receive the same args.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar all = when.Promise.all;\n\tvar slice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in sequence with no overlap\n\t * @param tasks {Array|Promise} array or promiseForArray of task functions\n\t * @param [args] {*} arguments to be passed to all tasks\n\t * @return {Promise} promise for an array containing\n\t * the result of each task in the array position corresponding\n\t * to position of the task in the tasks array\n\t */\n\treturn function sequence(tasks /*, args... */) {\n\t\tvar results = [];\n\n\t\treturn all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.reduce(tasks, function(results, task) {\n\t\t\t\treturn when(task.apply(void 0, args), addResult);\n\t\t\t}, results);\n\t\t});\n\n\t\tfunction addResult(result) {\n\t\t\tresults.push(result);\n\t\t\treturn results;\n\t\t}\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * timeout.js\n *\n * Helper that returns a promise that rejects after a specified timeout,\n * if not explicitly resolved or rejected before that.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\n    /**\n\t * @deprecated Use when(trigger).timeout(ms)\n     */\n    return function timeout(msec, trigger) {\n\t\treturn when(trigger).timeout(msec);\n    };\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/**\n * Promises/A+ and when() implementation\n * when is part of the cujoJS family of libraries (http://cujojs.com/)\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar timed = require('./lib/decorators/timed');\n\tvar array = require('./lib/decorators/array');\n\tvar flow = require('./lib/decorators/flow');\n\tvar fold = require('./lib/decorators/fold');\n\tvar inspect = require('./lib/decorators/inspect');\n\tvar generate = require('./lib/decorators/iterate');\n\tvar progress = require('./lib/decorators/progress');\n\tvar withThis = require('./lib/decorators/with');\n\tvar unhandledRejection = require('./lib/decorators/unhandledRejection');\n\tvar TimeoutError = require('./lib/TimeoutError');\n\n\tvar Promise = [array, flow, fold, generate, progress,\n\t\tinspect, withThis, timed, unhandledRejection]\n\t\t.reduce(function(Promise, feature) {\n\t\t\treturn feature(Promise);\n\t\t}, require('./lib/Promise'));\n\n\tvar apply = require('./lib/apply')(Promise);\n\n\t// Public API\n\n\twhen.promise     = promise;              // Create a pending promise\n\twhen.resolve     = Promise.resolve;      // Create a resolved promise\n\twhen.reject      = Promise.reject;       // Create a rejected promise\n\n\twhen.lift        = lift;                 // lift a function to return promises\n\twhen['try']      = attempt;              // call a function and return a promise\n\twhen.attempt     = attempt;              // alias for when.try\n\n\twhen.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\twhen.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n\twhen.join        = join;                 // Join 2 or more promises\n\n\twhen.all         = all;                  // Resolve a list of promises\n\twhen.settle      = settle;               // Settle a list of promises\n\n\twhen.any         = lift(Promise.any);    // One-winner race\n\twhen.some        = lift(Promise.some);   // Multi-winner race\n\twhen.race        = lift(Promise.race);   // First-to-settle race\n\n\twhen.map         = map;                  // Array.map() for promises\n\twhen.filter      = filter;               // Array.filter() for promises\n\twhen.reduce      = lift(Promise.reduce);       // Array.reduce() for promises\n\twhen.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises\n\n\twhen.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable\n\n\twhen.Promise     = Promise;              // Promise constructor\n\twhen.defer       = defer;                // Create a {promise, resolve, reject} tuple\n\n\t// Error types\n\n\twhen.TimeoutError = TimeoutError;\n\n\t/**\n\t * Get a trusted promise for x, or by transforming x with onFulfilled\n\t *\n\t * @param {*} x\n\t * @param {function?} onFulfilled callback to be called when x is\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n\t *   will be invoked immediately.\n\t * @param {function?} onRejected callback to be called when x is\n\t *   rejected.\n\t * @param {function?} onProgress callback to be called when progress updates\n\t *   are issued for x. @deprecated\n\t * @returns {Promise} a new promise that will fulfill with the return\n\t *   value of callback or errback or the completion value of promiseOrValue if\n\t *   callback and/or errback is not supplied.\n\t */\n\tfunction when(x, onFulfilled, onRejected, onProgress) {\n\t\tvar p = Promise.resolve(x);\n\t\tif (arguments.length < 2) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn p.then(onFulfilled, onRejected, onProgress);\n\t}\n\n\t/**\n\t * Creates a new promise whose fate is determined by resolver.\n\t * @param {function} resolver function(resolve, reject, notify)\n\t * @returns {Promise} promise whose fate is determine by resolver\n\t */\n\tfunction promise(resolver) {\n\t\treturn new Promise(resolver);\n\t}\n\n\t/**\n\t * Lift the supplied function, creating a version of f that returns\n\t * promises, and accepts promises as arguments.\n\t * @param {function} f\n\t * @returns {Function} version of f that returns promises\n\t */\n\tfunction lift(f) {\n\t\treturn function() {\n\t\t\tfor(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {\n\t\t\t\ta[i] = arguments[i];\n\t\t\t}\n\t\t\treturn apply(f, this, a);\n\t\t};\n\t}\n\n\t/**\n\t * Call f in a future turn, with the supplied args, and return a promise\n\t * for the result.\n\t * @param {function} f\n\t * @returns {Promise}\n\t */\n\tfunction attempt(f /*, args... */) {\n\t\t/*jshint validthis:true */\n\t\tfor(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {\n\t\t\ta[i] = arguments[i+1];\n\t\t}\n\t\treturn apply(f, this, a);\n\t}\n\n\t/**\n\t * Creates a {promise, resolver} pair, either or both of which\n\t * may be given out safely to consumers.\n\t * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n\t */\n\tfunction defer() {\n\t\treturn new Deferred();\n\t}\n\n\tfunction Deferred() {\n\t\tvar p = Promise._defer();\n\n\t\tfunction resolve(x) { p._handler.resolve(x); }\n\t\tfunction reject(x) { p._handler.reject(x); }\n\t\tfunction notify(x) { p._handler.notify(x); }\n\n\t\tthis.promise = p;\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t\tthis.notify = notify;\n\t\tthis.resolver = { resolve: resolve, reject: reject, notify: notify };\n\t}\n\n\t/**\n\t * Determines if x is promise-like, i.e. a thenable object\n\t * NOTE: Will return true for *any thenable object*, and isn't truly\n\t * safe, since it may attempt to access the `then` property of x (i.e.\n\t *  clever/malicious getters may do weird things)\n\t * @param {*} x anything\n\t * @returns {boolean} true if x is promise-like\n\t */\n\tfunction isPromiseLike(x) {\n\t\treturn x && typeof x.then === 'function';\n\t}\n\n\t/**\n\t * Return a promise that will resolve only once all the supplied arguments\n\t * have resolved. The resolution value of the returned promise will be an array\n\t * containing the resolution values of each of the arguments.\n\t * @param {...*} arguments may be a mix of promises and values\n\t * @returns {Promise}\n\t */\n\tfunction join(/* ...promises */) {\n\t\treturn Promise.all(arguments);\n\t}\n\n\t/**\n\t * Return a promise that will fulfill once all input promises have\n\t * fulfilled, or reject when any one input promise rejects.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise}\n\t */\n\tfunction all(promises) {\n\t\treturn when(promises, Promise.all);\n\t}\n\n\t/**\n\t * Return a promise that will always fulfill with an array containing\n\t * the outcome states of all input promises.  The returned promise\n\t * will only reject if `promises` itself is a rejected promise.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise} promise for array of settled state descriptors\n\t */\n\tfunction settle(promises) {\n\t\treturn when(promises, Promise.settle);\n\t}\n\n\t/**\n\t * Promise-aware array map function, similar to `Array.prototype.map()`,\n\t * but input array may contain promises or values.\n\t * @param {Array|Promise} promises array of anything, may contain promises and values\n\t * @param {function(x:*, index:Number):*} mapFunc map function which may\n\t *  return a promise or value\n\t * @returns {Promise} promise that will fulfill with an array of mapped values\n\t *  or reject if any input promise rejects.\n\t */\n\tfunction map(promises, mapFunc) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.map(promises, mapFunc);\n\t\t});\n\t}\n\n\t/**\n\t * Filter the provided array of promises using the provided predicate.  Input may\n\t * contain promises and values\n\t * @param {Array|Promise} promises array of promises and values\n\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t *  Must return truthy (or promise for truthy) for items to retain.\n\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t *  for which predicate returned truthy.\n\t */\n\tfunction filter(promises, predicate) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.filter(promises, predicate);\n\t\t});\n\t}\n\n\treturn when;\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n"],"sourceRoot":"https://raw.githubusercontent.com/cujojs/when/5c0a9ebaaf9bc859e76bd9584a9c9677e1e18f08"},"metadata":{},"sourceType":"script"}