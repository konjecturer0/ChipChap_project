{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/** @author Brian Cavalier */\n\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function (define) {\n  'use strict';\n\n  define(function (require) {\n    /*jshint maxcomplexity:6*/\n    // Sniff \"best\" async scheduling option\n    // Prefer process.nextTick or MutationObserver, then check for\n    // setTimeout, and finally vertx, since its the only env that doesn't\n    // have setTimeout\n    var MutationObs;\n    var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout; // Default env\n\n    var setTimer = function (f, ms) {\n      return setTimeout(f, ms);\n    };\n\n    var clearTimer = function (t) {\n      return clearTimeout(t);\n    };\n\n    var asap = function (f) {\n      return capturedSetTimeout(f, 0);\n    }; // Detect specific env\n\n\n    if (isNode()) {\n      // Node\n      asap = function (f) {\n        return process.nextTick(f);\n      };\n    } else if (MutationObs = hasMutationObserver()) {\n      // Modern browser\n      asap = initMutationObserver(MutationObs);\n    } else if (!capturedSetTimeout) {\n      // vert.x\n      var vertxRequire = require;\n      var vertx = vertxRequire('vertx');\n\n      setTimer = function (f, ms) {\n        return vertx.setTimer(ms, f);\n      };\n\n      clearTimer = vertx.cancelTimer;\n      asap = vertx.runOnLoop || vertx.runOnContext;\n    }\n\n    return {\n      setTimer: setTimer,\n      clearTimer: clearTimer,\n      asap: asap\n    };\n\n    function isNode() {\n      return typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]';\n    }\n\n    function hasMutationObserver() {\n      return typeof MutationObserver !== 'undefined' && MutationObserver || typeof WebKitMutationObserver !== 'undefined' && WebKitMutationObserver;\n    }\n\n    function initMutationObserver(MutationObserver) {\n      var scheduled;\n      var node = document.createTextNode('');\n      var o = new MutationObserver(run);\n      o.observe(node, {\n        characterData: true\n      });\n\n      function run() {\n        var f = scheduled;\n        scheduled = void 0;\n        f();\n      }\n\n      var i = 0;\n      return function (f) {\n        scheduled = f;\n        node.data = i ^= 1;\n      };\n    }\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n});","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChipChapProject/chipchap/node_modules/when/lib/env.js"],"names":["define","require","MutationObs","capturedSetTimeout","setTimeout","setTimer","f","ms","clearTimer","t","clearTimeout","asap","isNode","process","nextTick","hasMutationObserver","initMutationObserver","vertxRequire","vertx","cancelTimer","runOnLoop","runOnContext","Object","prototype","toString","call","MutationObserver","WebKitMutationObserver","scheduled","node","document","createTextNode","o","run","observe","characterData","i","data","amd","factory","module","exports"],"mappings":"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","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function(define) { 'use strict';\ndefine(function(require) {\n\t/*jshint maxcomplexity:6*/\n\n\t// Sniff \"best\" async scheduling option\n\t// Prefer process.nextTick or MutationObserver, then check for\n\t// setTimeout, and finally vertx, since its the only env that doesn't\n\t// have setTimeout\n\n\tvar MutationObs;\n\tvar capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;\n\n\t// Default env\n\tvar setTimer = function(f, ms) { return setTimeout(f, ms); };\n\tvar clearTimer = function(t) { return clearTimeout(t); };\n\tvar asap = function (f) { return capturedSetTimeout(f, 0); };\n\n\t// Detect specific env\n\tif (isNode()) { // Node\n\t\tasap = function (f) { return process.nextTick(f); };\n\n\t} else if (MutationObs = hasMutationObserver()) { // Modern browser\n\t\tasap = initMutationObserver(MutationObs);\n\n\t} else if (!capturedSetTimeout) { // vert.x\n\t\tvar vertxRequire = require;\n\t\tvar vertx = vertxRequire('vertx');\n\t\tsetTimer = function (f, ms) { return vertx.setTimer(ms, f); };\n\t\tclearTimer = vertx.cancelTimer;\n\t\tasap = vertx.runOnLoop || vertx.runOnContext;\n\t}\n\n\treturn {\n\t\tsetTimer: setTimer,\n\t\tclearTimer: clearTimer,\n\t\tasap: asap\n\t};\n\n\tfunction isNode () {\n\t\treturn typeof process !== 'undefined' &&\n\t\t\tObject.prototype.toString.call(process) === '[object process]';\n\t}\n\n\tfunction hasMutationObserver () {\n\t    return (typeof MutationObserver !== 'undefined' && MutationObserver) ||\n\t\t\t(typeof WebKitMutationObserver !== 'undefined' && WebKitMutationObserver);\n\t}\n\n\tfunction initMutationObserver(MutationObserver) {\n\t\tvar scheduled;\n\t\tvar node = document.createTextNode('');\n\t\tvar o = new MutationObserver(run);\n\t\to.observe(node, { characterData: true });\n\n\t\tfunction run() {\n\t\t\tvar f = scheduled;\n\t\t\tscheduled = void 0;\n\t\t\tf();\n\t\t}\n\n\t\tvar i = 0;\n\t\treturn function (f) {\n\t\t\tscheduled = f;\n\t\t\tnode.data = (i ^= 1);\n\t\t};\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n"]},"metadata":{},"sourceType":"script"}