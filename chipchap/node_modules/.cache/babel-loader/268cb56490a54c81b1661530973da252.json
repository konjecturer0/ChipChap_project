{"ast":null,"code":"var _jsxFileName = \"/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/src/components/MainChat/Chat.js\";\nimport React from 'react'; // Styles\n\nimport ChatLayout from '../../styles/MainChat/ChatLayout.tw'; // Components\n\nimport UserSelected from '../../components/MainChat/UserSelected';\nimport EnterMessage from './EnterMessage';\n\nconst SelfMessage = ({\n  message\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-row justify-end px-16 py-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-xl bg-blue-600 shadow-md rounded-lg rounded-br-none p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"font-normal text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }, message.text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-sm font-medium text-gray-400 mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, message.time))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: '2.5rem',\n      minWidth: '2.5rem'\n    },\n    className: \"rounded-full ml-3 self-end shadow-md overflow-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"h-10 w-10\",\n    src: require('../../assets/img/faces/user.jpg'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  })));\n};\n\nconst UserMessage = ({\n  message,\n  userid\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-row justify-start px-16 py-1 pt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-xl order-2 bg-white shadow-md rounded-lg rounded-bl-none p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"font-normal leading-snug text-gray-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, message.text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-sm font-medium text-gray-500 mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, message.time))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: '2.5rem',\n      minWidth: '2.5rem'\n    },\n    className: \"order-1 rounded-full mr-3 self-end shadow-md overflow-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"h-10 w-10\",\n    src: require(`../../assets/img/faces/user.jpg`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  })));\n};\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageHistory: [// {date: '2020-05-31', time: '14:23:05', text: 'Hey how are you doing', self: true},\n        // {date: '2020-05-31', time: '14:24:05', text: \"I'm fine u?\", self: false},\n        // {date: '2020-05-31', time: '14:25:05', text: 'Doing great', self: true},\n        // {date: '2020-05-31', time: '14:26:05', text: 'Tomorrow is the end of the world', self: true},\n        // {date: '2020-05-31', time: '14:27:05', text: \"Well... I'm going for lunch\", self: false},\n        // {date: '2020-05-31', time: '14:28:05', text: \"Bye then!\", self: true},\n      ],\n      // postMessage: [\n      //     {date: '2020-05-31', time: '14:28:05', text: \"Hey!\", to: 'id', from: 'id'},\n      // ]\n      message: ''\n    };\n\n    this.updateMessageHistory = ([msg, userid]) => {\n      console.log(\"UPDATING MESSAGE...\");\n      console.log(msg[0]);\n\n      if (this.props.myid) {\n        let userStore = [];\n\n        for (let i = 0; i < this.state.messageHistory.length; i++) {\n          if (Object.keys(this.state.messageHistory[i])[0] !== userid) {\n            userStore = [...userStore, this.state.messageHistory[i]];\n          } else {\n            userStore = [...userStore, {\n              [userid]: [...this.state.messageHistory[i][userid], msg[0]]\n            }];\n          }\n        }\n\n        this.setState({\n          messageHistory: userStore\n        });\n      }\n    };\n\n    this.onEnterMessage = e => {\n      if (this.state.message) {\n        if (e.keyCode === 13 || e === 'button_send') {\n          const msgtext = this.state.message;\n          const d = new Date();\n          let dateJsonFormat = d.toJSON();\n          let t = dateJsonFormat.split('T');\n          let date = t[0];\n          let time = t[1].split('.')[0];\n          let msg = {\n            date,\n            time,\n            text: msgtext,\n            self: true\n          };\n          let userStore = [];\n          let userid = this.props.user.id;\n\n          for (let i = 0; i < this.state.messageHistory.length; i++) {\n            if (Object.keys(this.state.messageHistory[i])[0] !== userid) {\n              userStore = [...userStore, this.state.messageHistory[i]];\n            } else {\n              userStore = [...userStore, {\n                [userid]: [...this.state.messageHistory[i][userid], msg]\n              }];\n            }\n          }\n\n          console.log(\"LOGGING HISTORY>>>>>>>>>>>>>>>>>>>>>>\");\n          console.log(userStore);\n          this.setState({\n            messageHistory: userStore\n          }, () => console.log(this.state.messageHistory));\n          this.enterField.current.value = '';\n          this.props.session.publish('com.chipchap.session.user.actions:message', [], {\n            msg: msgtext,\n            toid: this.props.user.id\n          });\n        }\n      }\n    };\n\n    this.onChangeMessage = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.onMsgStorage = () => {\n      return this.props.messageNotify.map(message => {\n        return /*#__PURE__*/React.createElement(UserMessage, {\n          userid: this.props.user.id,\n          message: message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 20\n          }\n        });\n      });\n    };\n\n    this.onMsgHistory = () => {\n      const index = this.state.messageHistory.findIndex(user => Object.keys(user)[0] === this.props.user.id); // console.log(\"INSIDE MESSAGE HISTORY\");\n      // console.log(this.state.messageHistory);\n      // console.log(index);\n      // if (index === -1) {\n      //     let touser = {};\n      //     touser[this.props.user.id] = []\n      //     this.setState({messageHistory: [...this.state.messageHistory, touser]});\n      // } else {\n\n      if (index !== -1) {\n        return this.state.messageHistory[index][this.props.user.id].map(message => {\n          if (message.self) {\n            return /*#__PURE__*/React.createElement(SelfMessage, {\n              message: message,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 28\n              }\n            });\n          } else if (!message.self) {\n            return /*#__PURE__*/React.createElement(UserMessage, {\n              userid: this.props.user.id,\n              message: message,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 28\n              }\n            });\n          }\n        });\n      } // }\n\n    };\n\n    this.mainLayout = React.createRef();\n    this.enterField = React.createRef();\n  }\n\n  componentDidMount() {\n    // WE WOULD FETCH HERE THE COMPLETE MESSAGE HISTORY\n    this.props.session.subscribe(`com.chipchap.session.user.actions:listen:${this.props.myid}`, this.updateMessageHistory).then(subscription => {\n      console.log(\"subscription to <<listen>> (2) successful\");\n    }, error => {\n      console.log(\"error with subscription to <<listen>> (2)\");\n      console.log(error);\n    });\n  }\n\n  componentDidUpdate() {\n    // Set message history based on user\n    this.updateScrolling(); // this.props.onMessageStoreClean(this.props.myid);\n  }\n\n  updateScrolling() {\n    try {\n      this.mainLayout.current.scrollTop = this.mainLayout.current.scrollHeight;\n    } catch (error) {}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserSelected, {\n      userid: this.props.user.id,\n      name: this.props.user.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ChatLayout, {\n      ref: this.mainLayout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, this.onMsgStorage(), this.onMsgHistory()), /*#__PURE__*/React.createElement(EnterMessage, {\n      onmessage: this.onChangeMessage,\n      onenter: this.onEnterMessage,\n      clean: this.enterField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/src/components/MainChat/Chat.js"],"names":["React","ChatLayout","UserSelected","EnterMessage","SelfMessage","message","text","time","minHeight","minWidth","require","UserMessage","userid","Chat","Component","constructor","props","state","messageHistory","updateMessageHistory","msg","console","log","myid","userStore","i","length","Object","keys","setState","onEnterMessage","e","keyCode","msgtext","d","Date","dateJsonFormat","toJSON","t","split","date","self","user","id","enterField","current","value","session","publish","toid","onChangeMessage","target","onMsgStorage","messageNotify","map","onMsgHistory","index","findIndex","mainLayout","createRef","componentDidMount","subscribe","then","subscription","error","componentDidUpdate","updateScrolling","scrollTop","scrollHeight","render","name"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// Styles\nimport ChatLayout from '../../styles/MainChat/ChatLayout.tw';\n\n// Components\nimport UserSelected from '../../components/MainChat/UserSelected';\nimport EnterMessage from './EnterMessage';\n\nconst SelfMessage = ({message}) => {\n    return (\n        <div className=\"flex flex-row justify-end px-16 py-1\">\n            <div className=\"max-w-xl bg-blue-600 shadow-md rounded-lg rounded-br-none p-5\">\n                <p className=\"font-normal text-white\">{message.text}</p>\n                <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm font-medium text-gray-400 mt-1\" >{message.time}</p>\n                </div>\n            </div>\n            <div style={{minHeight: '2.5rem', minWidth: '2.5rem'}} className=\"rounded-full ml-3 self-end shadow-md overflow-hidden\">\n                    <img className=\"h-10 w-10\" src={require('../../assets/img/faces/user.jpg')} />\n            </div>\n        </div>\n    );\n}\n\nconst UserMessage = ({message, userid}) => {\n    return (\n        <div className=\"flex flex-row justify-start px-16 py-1 pt-4\">\n            <div className=\"max-w-xl order-2 bg-white shadow-md rounded-lg rounded-bl-none p-5\">\n                <p className=\"font-normal leading-snug text-gray-800\">{message.text}</p>\n                <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm font-medium text-gray-500 mt-1\" >{message.time}</p>\n                </div>\n            </div>\n            <div style={{minHeight: '2.5rem', minWidth: '2.5rem'}} className=\"order-1 rounded-full mr-3 self-end shadow-md overflow-hidden\">\n                    <img className=\"h-10 w-10\" src={require(`../../assets/img/faces/user.jpg`)} />\n            </div>\n        </div>\n    );\n}\n\nclass Chat extends React.Component {\n\n    state = {\n        messageHistory: [\n            // {date: '2020-05-31', time: '14:23:05', text: 'Hey how are you doing', self: true},\n            // {date: '2020-05-31', time: '14:24:05', text: \"I'm fine u?\", self: false},\n            // {date: '2020-05-31', time: '14:25:05', text: 'Doing great', self: true},\n            // {date: '2020-05-31', time: '14:26:05', text: 'Tomorrow is the end of the world', self: true},\n            // {date: '2020-05-31', time: '14:27:05', text: \"Well... I'm going for lunch\", self: false},\n            // {date: '2020-05-31', time: '14:28:05', text: \"Bye then!\", self: true},\n        ],\n        // postMessage: [\n        //     {date: '2020-05-31', time: '14:28:05', text: \"Hey!\", to: 'id', from: 'id'},\n        // ]\n        message: ''\n    };\n    \n    constructor(props) {\n        super(props);\n        this.mainLayout = React.createRef();\n        this.enterField = React.createRef();\n    }\n\n    componentDidMount() {\n        // WE WOULD FETCH HERE THE COMPLETE MESSAGE HISTORY\n\n        this.props.session.subscribe(`com.chipchap.session.user.actions:listen:${this.props.myid}`, this.updateMessageHistory).then(\n            (subscription) => {\n                console.log(\"subscription to <<listen>> (2) successful\");\n            },\n            (error) => {\n                console.log(\"error with subscription to <<listen>> (2)\");\n                console.log(error);\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        // Set message history based on user\n        this.updateScrolling();\n        // this.props.onMessageStoreClean(this.props.myid);\n    }\n\n    updateScrolling() {\n        try {\n            this.mainLayout.current.scrollTop = this.mainLayout.current.scrollHeight;\n        } catch(error) {\n\n        }\n    }\n\n    updateMessageHistory = ([msg, userid]) => {\n        console.log(\"UPDATING MESSAGE...\");\n        console.log(msg[0]);\n        if (this.props.myid) {\n            let userStore = [];\n            for (let i=0; i<this.state.messageHistory.length;i++) {\n                if (Object.keys(this.state.messageHistory[i])[0] !== userid) {\n                    userStore = [...userStore, this.state.messageHistory[i]];\n                } else {\n                    userStore = [...userStore, {[userid]:[...this.state.messageHistory[i][userid], msg[0]]}]\n                }\n            }\n            this.setState({messageHistory: userStore});\n        }   \n    }\n\n    onEnterMessage = (e) => {\n        if (this.state.message) {\n            if (e.keyCode === 13 || e === 'button_send') {\n                const msgtext = this.state.message;\n                const d = new Date();\n                let dateJsonFormat = d.toJSON();\n                let t = dateJsonFormat.split('T');\n                let date = t[0];\n                let time = t[1].split('.')[0] \n                let msg = {date, time, text: msgtext, self:true};\n\n                \n                let userStore = [];\n                let userid = this.props.user.id;\n                for (let i=0; i<this.state.messageHistory.length;i++) {\n                    if (Object.keys(this.state.messageHistory[i])[0] !== userid) {\n                        userStore = [...userStore, this.state.messageHistory[i]];\n                    } else {\n                        userStore = [...userStore, {[userid]:[...this.state.messageHistory[i][userid], msg]}]\n                    }\n                }\n                console.log(\"LOGGING HISTORY>>>>>>>>>>>>>>>>>>>>>>\");\n                console.log(userStore);\n                this.setState({messageHistory: userStore}, () => console.log(this.state.messageHistory));\n                this.enterField.current.value = '';\n                this.props.session.publish('com.chipchap.session.user.actions:message', [], {msg:msgtext, toid: this.props.user.id});\n            }\n        }\n    }\n\n    onChangeMessage = (e) => {\n        this.setState({message: e.target.value});\n    }\n\n    onMsgStorage = () => {\n        return this.props.messageNotify.map((message) => {\n            return <UserMessage userid={this.props.user.id} message={message} />\n        })\n    }\n\n    onMsgHistory = () => {\n        const index = this.state.messageHistory.findIndex(user => Object.keys(user)[0] === this.props.user.id);\n        // console.log(\"INSIDE MESSAGE HISTORY\");\n        // console.log(this.state.messageHistory);\n        // console.log(index);\n        // if (index === -1) {\n        //     let touser = {};\n        //     touser[this.props.user.id] = []\n        //     this.setState({messageHistory: [...this.state.messageHistory, touser]});\n        // } else {\n        if (index !== -1) {\n            return this.state.messageHistory[index][this.props.user.id].map((message) => {\n                if (message.self) {\n                    return <SelfMessage message={message} />\n                } else if (!message.self) {\n                    return <UserMessage userid={this.props.user.id} message={message} />\n                }\n            })\n        }\n        // }\n    }\n\n    render() {\n        return ( <>\n            <UserSelected userid={this.props.user.id} name={this.props.user.name} />\n            <ChatLayout ref={this.mainLayout}>\n                {this.onMsgStorage()}\n                {this.onMsgHistory()}\n            </ChatLayout>\n            <EnterMessage onmessage={this.onChangeMessage} onenter={this.onEnterMessage} clean={this.enterField} />\n        </>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}