{"ast":null,"code":"'use strict';\n\nvar bl = require('bl');\n\nvar util = require('util');\n\nfunction IncompleteBufferError(message) {\n  Error.call(this); // super constructor\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor); // super helper method to include stack trace in error object\n  }\n\n  this.name = this.constructor.name;\n  this.message = message || 'unable to decode';\n}\n\nutil.inherits(IncompleteBufferError, Error);\n\nmodule.exports = function buildDecode(decodingTypes) {\n  return decode;\n\n  function getSize(first) {\n    switch (first) {\n      case 0xc4:\n        return 2;\n\n      case 0xc5:\n        return 3;\n\n      case 0xc6:\n        return 5;\n\n      case 0xc7:\n        return 3;\n\n      case 0xc8:\n        return 4;\n\n      case 0xc9:\n        return 6;\n\n      case 0xca:\n        return 5;\n\n      case 0xcb:\n        return 9;\n\n      case 0xcc:\n        return 2;\n\n      case 0xcd:\n        return 3;\n\n      case 0xce:\n        return 5;\n\n      case 0xcf:\n        return 9;\n\n      case 0xd0:\n        return 2;\n\n      case 0xd1:\n        return 3;\n\n      case 0xd2:\n        return 5;\n\n      case 0xd3:\n        return 9;\n\n      case 0xd4:\n        return 3;\n\n      case 0xd5:\n        return 4;\n\n      case 0xd6:\n        return 6;\n\n      case 0xd7:\n        return 10;\n\n      case 0xd8:\n        return 18;\n\n      case 0xd9:\n        return 2;\n\n      case 0xda:\n        return 3;\n\n      case 0xdb:\n        return 5;\n\n      case 0xde:\n        return 3;\n\n      default:\n        return -1;\n    }\n  }\n\n  function hasMinBufferSize(first, length) {\n    var size = getSize(first);\n\n    if (size !== -1 && length < size) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  function isValidDataSize(dataLength, bufLength, headerLength) {\n    return bufLength >= headerLength + dataLength;\n  }\n\n  function buildDecodeResult(value, bytesConsumed) {\n    return {\n      value: value,\n      bytesConsumed: bytesConsumed\n    };\n  }\n\n  function decode(buf) {\n    if (!(buf instanceof bl)) {\n      buf = bl().append(buf);\n    }\n\n    var result = tryDecode(buf);\n\n    if (result) {\n      buf.consume(result.bytesConsumed);\n      return result.value;\n    } else {\n      throw new IncompleteBufferError();\n    }\n  }\n\n  function tryDecode(buf, offset) {\n    offset = offset === undefined ? 0 : offset;\n    var bufLength = buf.length - offset;\n\n    if (bufLength <= 0) {\n      return null;\n    }\n\n    var first = buf.readUInt8(offset);\n    var length;\n    var result = 0;\n    var type;\n    var bytePos;\n\n    if (!hasMinBufferSize(first, bufLength)) {\n      return null;\n    }\n\n    switch (first) {\n      case 0xc0:\n        return buildDecodeResult(null, 1);\n\n      case 0xc2:\n        return buildDecodeResult(false, 1);\n\n      case 0xc3:\n        return buildDecodeResult(true, 1);\n\n      case 0xcc:\n        // 1-byte unsigned int\n        result = buf.readUInt8(offset + 1);\n        return buildDecodeResult(result, 2);\n\n      case 0xcd:\n        // 2-bytes BE unsigned int\n        result = buf.readUInt16BE(offset + 1);\n        return buildDecodeResult(result, 3);\n\n      case 0xce:\n        // 4-bytes BE unsigned int\n        result = buf.readUInt32BE(offset + 1);\n        return buildDecodeResult(result, 5);\n\n      case 0xcf:\n        // 8-bytes BE unsigned int\n        // Read long byte by byte, big-endian\n        for (bytePos = 7; bytePos >= 0; bytePos--) {\n          result += buf.readUInt8(offset + bytePos + 1) * Math.pow(2, 8 * (7 - bytePos));\n        }\n\n        return buildDecodeResult(result, 9);\n\n      case 0xd0:\n        // 1-byte signed int\n        result = buf.readInt8(offset + 1);\n        return buildDecodeResult(result, 2);\n\n      case 0xd1:\n        // 2-bytes signed int\n        result = buf.readInt16BE(offset + 1);\n        return buildDecodeResult(result, 3);\n\n      case 0xd2:\n        // 4-bytes signed int\n        result = buf.readInt32BE(offset + 1);\n        return buildDecodeResult(result, 5);\n\n      case 0xd3:\n        result = readInt64BE(buf.slice(offset + 1, offset + 9), 0);\n        return buildDecodeResult(result, 9);\n\n      case 0xca:\n        // 4-bytes float\n        result = buf.readFloatBE(offset + 1);\n        return buildDecodeResult(result, 5);\n\n      case 0xcb:\n        // 8-bytes double\n        result = buf.readDoubleBE(offset + 1);\n        return buildDecodeResult(result, 9);\n\n      case 0xd9:\n        // strings up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 2)) {\n          return null;\n        }\n\n        result = buf.toString('utf8', offset + 2, offset + 2 + length);\n        return buildDecodeResult(result, 2 + length);\n\n      case 0xda:\n        // strings up to 2^16 - 2 bytes\n        length = buf.readUInt16BE(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null;\n        }\n\n        result = buf.toString('utf8', offset + 3, offset + 3 + length);\n        return buildDecodeResult(result, 3 + length);\n\n      case 0xdb:\n        // strings up to 2^32 - 4 bytes\n        length = buf.readUInt32BE(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 5)) {\n          return null;\n        }\n\n        result = buf.toString('utf8', offset + 5, offset + 5 + length);\n        return buildDecodeResult(result, 5 + length);\n\n      case 0xc4:\n        // buffers up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 2)) {\n          return null;\n        }\n\n        result = buf.slice(offset + 2, offset + 2 + length);\n        return buildDecodeResult(result, 2 + length);\n\n      case 0xc5:\n        // buffers up to 2^16 - 1 bytes\n        length = buf.readUInt16BE(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null;\n        }\n\n        result = buf.slice(offset + 3, offset + 3 + length);\n        return buildDecodeResult(result, 3 + length);\n\n      case 0xc6:\n        // buffers up to 2^32 - 1 bytes\n        length = buf.readUInt32BE(offset + 1);\n\n        if (!isValidDataSize(length, bufLength, 5)) {\n          return null;\n        }\n\n        result = buf.slice(offset + 5, offset + 5 + length);\n        return buildDecodeResult(result, 5 + length);\n\n      case 0xdc:\n        // array up to 2^16 elements - 2 bytes\n        if (bufLength < 3) {\n          return null;\n        }\n\n        length = buf.readUInt16BE(offset + 1);\n        return decodeArray(buf, offset, length, 3);\n\n      case 0xdd:\n        // array up to 2^32 elements - 4 bytes\n        if (bufLength < 5) {\n          return null;\n        }\n\n        length = buf.readUInt32BE(offset + 1);\n        return decodeArray(buf, offset, length, 5);\n\n      case 0xde:\n        // maps up to 2^16 elements - 2 bytes\n        length = buf.readUInt16BE(offset + 1);\n        return decodeMap(buf, offset, length, 3);\n\n      case 0xdf:\n        length = buf.readUInt32BE(offset + 1);\n        return decodeMap(buf, offset, length, 5);\n\n      case 0xd4:\n        return decodeFixExt(buf, offset, 1);\n\n      case 0xd5:\n        return decodeFixExt(buf, offset, 2);\n\n      case 0xd6:\n        return decodeFixExt(buf, offset, 4);\n\n      case 0xd7:\n        return decodeFixExt(buf, offset, 8);\n\n      case 0xd8:\n        return decodeFixExt(buf, offset, 16);\n\n      case 0xc7:\n        // ext up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1);\n        type = buf.readUInt8(offset + 2);\n\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null;\n        }\n\n        return decodeExt(buf, offset, type, length, 3);\n\n      case 0xc8:\n        // ext up to 2^16 - 1 bytes\n        length = buf.readUInt16BE(offset + 1);\n        type = buf.readUInt8(offset + 3);\n\n        if (!isValidDataSize(length, bufLength, 4)) {\n          return null;\n        }\n\n        return decodeExt(buf, offset, type, length, 4);\n\n      case 0xc9:\n        // ext up to 2^32 - 1 bytes\n        length = buf.readUInt32BE(offset + 1);\n        type = buf.readUInt8(offset + 5);\n\n        if (!isValidDataSize(length, bufLength, 6)) {\n          return null;\n        }\n\n        return decodeExt(buf, offset, type, length, 6);\n    }\n\n    if ((first & 0xf0) === 0x90) {\n      // we have an array with less than 15 elements\n      length = first & 0x0f;\n      return decodeArray(buf, offset, length, 1);\n    } else if ((first & 0xf0) === 0x80) {\n      // we have a map with less than 15 elements\n      length = first & 0x0f;\n      return decodeMap(buf, offset, length, 1);\n    } else if ((first & 0xe0) === 0xa0) {\n      // fixstr up to 31 bytes\n      length = first & 0x1f;\n\n      if (isValidDataSize(length, bufLength, 1)) {\n        result = buf.toString('utf8', offset + 1, offset + length + 1);\n        return buildDecodeResult(result, length + 1);\n      } else {\n        return null;\n      }\n    } else if (first >= 0xe0) {\n      // 5 bits negative ints\n      result = first - 0x100;\n      return buildDecodeResult(result, 1);\n    } else if (first < 0x80) {\n      // 7-bits positive ints\n      return buildDecodeResult(first, 1);\n    } else {\n      throw new Error('not implemented yet');\n    }\n  }\n\n  function readInt64BE(buf, offset) {\n    var negate = (buf[offset] & 0x80) == 0x80; // eslint-disable-line\n\n    if (negate) {\n      var carry = 1;\n\n      for (var i = offset + 7; i >= offset; i--) {\n        var v = (buf[i] ^ 0xff) + carry;\n        buf[i] = v & 0xff;\n        carry = v >> 8;\n      }\n    }\n\n    var hi = buf.readUInt32BE(offset + 0);\n    var lo = buf.readUInt32BE(offset + 4);\n    return (hi * 4294967296 + lo) * (negate ? -1 : +1);\n  }\n\n  function decodeArray(buf, offset, length, headerLength) {\n    var result = [];\n    var i;\n    var totalBytesConsumed = 0;\n    offset += headerLength;\n\n    for (i = 0; i < length; i++) {\n      var decodeResult = tryDecode(buf, offset);\n\n      if (decodeResult) {\n        result.push(decodeResult.value);\n        offset += decodeResult.bytesConsumed;\n        totalBytesConsumed += decodeResult.bytesConsumed;\n      } else {\n        return null;\n      }\n    }\n\n    return buildDecodeResult(result, headerLength + totalBytesConsumed);\n  }\n\n  function decodeMap(buf, offset, length, headerLength) {\n    var result = {};\n    var key;\n    var i;\n    var totalBytesConsumed = 0;\n    offset += headerLength;\n\n    for (i = 0; i < length; i++) {\n      var keyResult = tryDecode(buf, offset);\n\n      if (keyResult) {\n        offset += keyResult.bytesConsumed;\n        var valueResult = tryDecode(buf, offset);\n\n        if (valueResult) {\n          key = keyResult.value;\n          result[key] = valueResult.value;\n          offset += valueResult.bytesConsumed;\n          totalBytesConsumed += keyResult.bytesConsumed + valueResult.bytesConsumed;\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    return buildDecodeResult(result, headerLength + totalBytesConsumed);\n  }\n\n  function decodeFixExt(buf, offset, size) {\n    var type = buf.readInt8(offset + 1); // Signed\n\n    return decodeExt(buf, offset, type, size, 2);\n  }\n\n  function decodeTimestamp(buf, size, headerSize) {\n    var seconds;\n    var nanoseconds = 0;\n\n    switch (size) {\n      case 4:\n        // timestamp 32 stores the number of seconds that have elapsed since 1970-01-01 00:00:00 UTC in an 32-bit unsigned integer\n        seconds = buf.readUInt32BE(0);\n        break;\n\n      case 8:\n        // Timestamp 64 stores the number of seconds and nanoseconds that have elapsed\n        // since 1970-01-01 00:00:00 UTC in 32-bit unsigned integers, split 30/34 bits\n        var upper = buf.readUInt32BE(0);\n        var lower = buf.readUInt32BE(4);\n        nanoseconds = upper / 4;\n        seconds = (upper & 0x03) * Math.pow(2, 32) + lower; // If we use bitwise operators, we get truncated to 32bits\n\n        break;\n\n      case 12:\n        throw new Error('timestamp 96 is not yet implemented');\n    }\n\n    var millis = seconds * 1000 + Math.round(nanoseconds / 1E6);\n    return buildDecodeResult(new Date(millis), size + headerSize);\n  }\n\n  function decodeExt(buf, offset, type, size, headerSize) {\n    var i, toDecode;\n    offset += headerSize; // Pre-defined\n\n    if (type < 0) {\n      // Reserved for future extensions\n      switch (type) {\n        case -1:\n          // Tiemstamp https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\n          toDecode = buf.slice(offset, offset + size);\n          return decodeTimestamp(toDecode, size, headerSize);\n      }\n    }\n\n    for (i = 0; i < decodingTypes.length; i++) {\n      if (type === decodingTypes[i].type) {\n        toDecode = buf.slice(offset, offset + size);\n        var value = decodingTypes[i].decode(toDecode);\n        return buildDecodeResult(value, headerSize + size);\n      }\n    }\n\n    throw new Error('unable to find ext type ' + type);\n  }\n};\n\nmodule.exports.IncompleteBufferError = IncompleteBufferError;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/msgpack5/lib/decoder.js"],"names":["bl","require","util","IncompleteBufferError","message","Error","call","captureStackTrace","constructor","name","inherits","module","exports","buildDecode","decodingTypes","decode","getSize","first","hasMinBufferSize","length","size","isValidDataSize","dataLength","bufLength","headerLength","buildDecodeResult","value","bytesConsumed","buf","append","result","tryDecode","consume","offset","undefined","readUInt8","type","bytePos","readUInt16BE","readUInt32BE","Math","pow","readInt8","readInt16BE","readInt32BE","readInt64BE","slice","readFloatBE","readDoubleBE","toString","decodeArray","decodeMap","decodeFixExt","decodeExt","negate","carry","i","v","hi","lo","totalBytesConsumed","decodeResult","push","key","keyResult","valueResult","decodeTimestamp","headerSize","seconds","nanoseconds","upper","lower","millis","round","Date","toDecode"],"mappings":"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","sourcesContent":["'use strict'\n\nvar bl = require('bl')\nvar util = require('util')\n\nfunction IncompleteBufferError (message) {\n  Error.call(this) // super constructor\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor) // super helper method to include stack trace in error object\n  }\n  this.name = this.constructor.name\n  this.message = message || 'unable to decode'\n}\n\nutil.inherits(IncompleteBufferError, Error)\n\nmodule.exports = function buildDecode (decodingTypes) {\n  return decode\n\n  function getSize (first) {\n    switch (first) {\n      case 0xc4:\n        return 2\n      case 0xc5:\n        return 3\n      case 0xc6:\n        return 5\n      case 0xc7:\n        return 3\n      case 0xc8:\n        return 4\n      case 0xc9:\n        return 6\n      case 0xca:\n        return 5\n      case 0xcb:\n        return 9\n      case 0xcc:\n        return 2\n      case 0xcd:\n        return 3\n      case 0xce:\n        return 5\n      case 0xcf:\n        return 9\n      case 0xd0:\n        return 2\n      case 0xd1:\n        return 3\n      case 0xd2:\n        return 5\n      case 0xd3:\n        return 9\n      case 0xd4:\n        return 3\n      case 0xd5:\n        return 4\n      case 0xd6:\n        return 6\n      case 0xd7:\n        return 10\n      case 0xd8:\n        return 18\n      case 0xd9:\n        return 2\n      case 0xda:\n        return 3\n      case 0xdb:\n        return 5\n      case 0xde:\n        return 3\n      default:\n        return -1\n    }\n  }\n\n  function hasMinBufferSize (first, length) {\n    var size = getSize(first)\n\n    if (size !== -1 && length < size) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  function isValidDataSize (dataLength, bufLength, headerLength) {\n    return bufLength >= headerLength + dataLength\n  }\n\n  function buildDecodeResult (value, bytesConsumed) {\n    return {\n      value: value,\n      bytesConsumed: bytesConsumed\n    }\n  }\n\n  function decode (buf) {\n    if (!(buf instanceof bl)) {\n      buf = bl().append(buf)\n    }\n\n    var result = tryDecode(buf)\n    if (result) {\n      buf.consume(result.bytesConsumed)\n      return result.value\n    } else {\n      throw new IncompleteBufferError()\n    }\n  }\n\n  function tryDecode (buf, offset) {\n    offset = offset === undefined ? 0 : offset\n    var bufLength = buf.length - offset\n    if (bufLength <= 0) {\n      return null\n    }\n\n    var first = buf.readUInt8(offset)\n    var length\n    var result = 0\n    var type\n    var bytePos\n\n    if (!hasMinBufferSize(first, bufLength)) {\n      return null\n    }\n\n    switch (first) {\n      case 0xc0:\n        return buildDecodeResult(null, 1)\n      case 0xc2:\n        return buildDecodeResult(false, 1)\n      case 0xc3:\n        return buildDecodeResult(true, 1)\n      case 0xcc:\n        // 1-byte unsigned int\n        result = buf.readUInt8(offset + 1)\n        return buildDecodeResult(result, 2)\n      case 0xcd:\n        // 2-bytes BE unsigned int\n        result = buf.readUInt16BE(offset + 1)\n        return buildDecodeResult(result, 3)\n      case 0xce:\n        // 4-bytes BE unsigned int\n        result = buf.readUInt32BE(offset + 1)\n        return buildDecodeResult(result, 5)\n      case 0xcf:\n        // 8-bytes BE unsigned int\n        // Read long byte by byte, big-endian\n        for (bytePos = 7; bytePos >= 0; bytePos--) {\n          result += (buf.readUInt8(offset + bytePos + 1) * Math.pow(2, (8 * (7 - bytePos))))\n        }\n        return buildDecodeResult(result, 9)\n      case 0xd0:\n        // 1-byte signed int\n        result = buf.readInt8(offset + 1)\n        return buildDecodeResult(result, 2)\n      case 0xd1:\n        // 2-bytes signed int\n        result = buf.readInt16BE(offset + 1)\n        return buildDecodeResult(result, 3)\n      case 0xd2:\n        // 4-bytes signed int\n        result = buf.readInt32BE(offset + 1)\n        return buildDecodeResult(result, 5)\n      case 0xd3:\n        result = readInt64BE(buf.slice(offset + 1, offset + 9), 0)\n        return buildDecodeResult(result, 9)\n      case 0xca:\n        // 4-bytes float\n        result = buf.readFloatBE(offset + 1)\n        return buildDecodeResult(result, 5)\n      case 0xcb:\n        // 8-bytes double\n        result = buf.readDoubleBE(offset + 1)\n        return buildDecodeResult(result, 9)\n      case 0xd9:\n        // strings up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1)\n        if (!isValidDataSize(length, bufLength, 2)) {\n          return null\n        }\n        result = buf.toString('utf8', offset + 2, offset + 2 + length)\n        return buildDecodeResult(result, 2 + length)\n      case 0xda:\n        // strings up to 2^16 - 2 bytes\n        length = buf.readUInt16BE(offset + 1)\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null\n        }\n        result = buf.toString('utf8', offset + 3, offset + 3 + length)\n        return buildDecodeResult(result, 3 + length)\n      case 0xdb:\n        // strings up to 2^32 - 4 bytes\n        length = buf.readUInt32BE(offset + 1)\n        if (!isValidDataSize(length, bufLength, 5)) {\n          return null\n        }\n        result = buf.toString('utf8', offset + 5, offset + 5 + length)\n        return buildDecodeResult(result, 5 + length)\n      case 0xc4:\n        // buffers up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1)\n        if (!isValidDataSize(length, bufLength, 2)) {\n          return null\n        }\n        result = buf.slice(offset + 2, offset + 2 + length)\n        return buildDecodeResult(result, 2 + length)\n      case 0xc5:\n        // buffers up to 2^16 - 1 bytes\n        length = buf.readUInt16BE(offset + 1)\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null\n        }\n        result = buf.slice(offset + 3, offset + 3 + length)\n        return buildDecodeResult(result, 3 + length)\n      case 0xc6:\n        // buffers up to 2^32 - 1 bytes\n        length = buf.readUInt32BE(offset + 1)\n        if (!isValidDataSize(length, bufLength, 5)) {\n          return null\n        }\n        result = buf.slice(offset + 5, offset + 5 + length)\n        return buildDecodeResult(result, 5 + length)\n      case 0xdc:\n        // array up to 2^16 elements - 2 bytes\n        if (bufLength < 3) {\n          return null\n        }\n\n        length = buf.readUInt16BE(offset + 1)\n        return decodeArray(buf, offset, length, 3)\n      case 0xdd:\n        // array up to 2^32 elements - 4 bytes\n        if (bufLength < 5) {\n          return null\n        }\n\n        length = buf.readUInt32BE(offset + 1)\n        return decodeArray(buf, offset, length, 5)\n      case 0xde:\n        // maps up to 2^16 elements - 2 bytes\n        length = buf.readUInt16BE(offset + 1)\n        return decodeMap(buf, offset, length, 3)\n      case 0xdf:\n        length = buf.readUInt32BE(offset + 1)\n        return decodeMap(buf, offset, length, 5)\n      case 0xd4:\n        return decodeFixExt(buf, offset, 1)\n      case 0xd5:\n        return decodeFixExt(buf, offset, 2)\n      case 0xd6:\n        return decodeFixExt(buf, offset, 4)\n      case 0xd7:\n        return decodeFixExt(buf, offset, 8)\n      case 0xd8:\n        return decodeFixExt(buf, offset, 16)\n      case 0xc7:\n        // ext up to 2^8 - 1 bytes\n        length = buf.readUInt8(offset + 1)\n        type = buf.readUInt8(offset + 2)\n        if (!isValidDataSize(length, bufLength, 3)) {\n          return null\n        }\n        return decodeExt(buf, offset, type, length, 3)\n      case 0xc8:\n        // ext up to 2^16 - 1 bytes\n        length = buf.readUInt16BE(offset + 1)\n        type = buf.readUInt8(offset + 3)\n        if (!isValidDataSize(length, bufLength, 4)) {\n          return null\n        }\n        return decodeExt(buf, offset, type, length, 4)\n      case 0xc9:\n        // ext up to 2^32 - 1 bytes\n        length = buf.readUInt32BE(offset + 1)\n        type = buf.readUInt8(offset + 5)\n        if (!isValidDataSize(length, bufLength, 6)) {\n          return null\n        }\n        return decodeExt(buf, offset, type, length, 6)\n    }\n\n    if ((first & 0xf0) === 0x90) {\n      // we have an array with less than 15 elements\n      length = first & 0x0f\n      return decodeArray(buf, offset, length, 1)\n    } else if ((first & 0xf0) === 0x80) {\n      // we have a map with less than 15 elements\n      length = first & 0x0f\n      return decodeMap(buf, offset, length, 1)\n    } else if ((first & 0xe0) === 0xa0) {\n      // fixstr up to 31 bytes\n      length = first & 0x1f\n      if (isValidDataSize(length, bufLength, 1)) {\n        result = buf.toString('utf8', offset + 1, offset + length + 1)\n        return buildDecodeResult(result, length + 1)\n      } else {\n        return null\n      }\n    } else if (first >= 0xe0) {\n      // 5 bits negative ints\n      result = first - 0x100\n      return buildDecodeResult(result, 1)\n    } else if (first < 0x80) {\n      // 7-bits positive ints\n      return buildDecodeResult(first, 1)\n    } else {\n      throw new Error('not implemented yet')\n    }\n  }\n\n  function readInt64BE (buf, offset) {\n    var negate = (buf[offset] & 0x80) == 0x80 // eslint-disable-line\n\n    if (negate) {\n      var carry = 1\n      for (var i = offset + 7; i >= offset; i--) {\n        var v = (buf[i] ^ 0xff) + carry\n        buf[i] = v & 0xff\n        carry = v >> 8\n      }\n    }\n\n    var hi = buf.readUInt32BE(offset + 0)\n    var lo = buf.readUInt32BE(offset + 4)\n    return (hi * 4294967296 + lo) * (negate ? -1 : +1)\n  }\n\n  function decodeArray (buf, offset, length, headerLength) {\n    var result = []\n    var i\n    var totalBytesConsumed = 0\n\n    offset += headerLength\n    for (i = 0; i < length; i++) {\n      var decodeResult = tryDecode(buf, offset)\n      if (decodeResult) {\n        result.push(decodeResult.value)\n        offset += decodeResult.bytesConsumed\n        totalBytesConsumed += decodeResult.bytesConsumed\n      } else {\n        return null\n      }\n    }\n    return buildDecodeResult(result, headerLength + totalBytesConsumed)\n  }\n\n  function decodeMap (buf, offset, length, headerLength) {\n    var result = {}\n    var key\n    var i\n    var totalBytesConsumed = 0\n\n    offset += headerLength\n    for (i = 0; i < length; i++) {\n      var keyResult = tryDecode(buf, offset)\n      if (keyResult) {\n        offset += keyResult.bytesConsumed\n        var valueResult = tryDecode(buf, offset)\n        if (valueResult) {\n          key = keyResult.value\n          result[key] = valueResult.value\n          offset += valueResult.bytesConsumed\n          totalBytesConsumed += (keyResult.bytesConsumed + valueResult.bytesConsumed)\n        } else {\n          return null\n        }\n      } else {\n        return null\n      }\n    }\n    return buildDecodeResult(result, headerLength + totalBytesConsumed)\n  }\n\n  function decodeFixExt (buf, offset, size) {\n    var type = buf.readInt8(offset + 1) // Signed\n    return decodeExt(buf, offset, type, size, 2)\n  }\n\n  function decodeTimestamp (buf, size, headerSize) {\n    var seconds\n    var nanoseconds = 0\n\n    switch (size) {\n      case 4:\n        // timestamp 32 stores the number of seconds that have elapsed since 1970-01-01 00:00:00 UTC in an 32-bit unsigned integer\n        seconds = buf.readUInt32BE(0)\n        break\n\n      case 8:\n        // Timestamp 64 stores the number of seconds and nanoseconds that have elapsed\n        // since 1970-01-01 00:00:00 UTC in 32-bit unsigned integers, split 30/34 bits\n        var upper = buf.readUInt32BE(0)\n        var lower = buf.readUInt32BE(4)\n        nanoseconds = upper / 4\n        seconds = ((upper & 0x03) * Math.pow(2, 32)) + lower // If we use bitwise operators, we get truncated to 32bits\n        break\n\n      case 12:\n        throw new Error('timestamp 96 is not yet implemented')\n    }\n\n    var millis = (seconds * 1000) + Math.round(nanoseconds / 1E6)\n    return buildDecodeResult(new Date(millis), size + headerSize)\n  }\n\n  function decodeExt (buf, offset, type, size, headerSize) {\n    var i,\n      toDecode\n\n    offset += headerSize\n\n    // Pre-defined\n    if (type < 0) { // Reserved for future extensions\n      switch (type) {\n        case -1: // Tiemstamp https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\n          toDecode = buf.slice(offset, offset + size)\n          return decodeTimestamp(toDecode, size, headerSize)\n      }\n    }\n\n    for (i = 0; i < decodingTypes.length; i++) {\n      if (type === decodingTypes[i].type) {\n        toDecode = buf.slice(offset, offset + size)\n        var value = decodingTypes[i].decode(toDecode)\n        return buildDecodeResult(value, headerSize + size)\n      }\n    }\n\n    throw new Error('unable to find ext type ' + type)\n  }\n}\n\nmodule.exports.IncompleteBufferError = IncompleteBufferError\n"]},"metadata":{},"sourceType":"script"}