{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/** @author Brian Cavalier */\n\n/** @author John Hann */\n(function (define) {\n  'use strict';\n\n  define(function (require) {\n    var error = require('./error');\n\n    var unhandledRejectionsMsg = '[promises] Unhandled rejections: ';\n    var allHandledMsg = '[promises] All previously unhandled rejections have now been handled';\n\n    function ConsoleReporter() {\n      this._previouslyReported = false;\n    }\n\n    ConsoleReporter.prototype = initDefaultLogging();\n\n    ConsoleReporter.prototype.log = function (traces) {\n      if (traces.length === 0) {\n        if (this._previouslyReported) {\n          this._previouslyReported = false;\n          this.msg(allHandledMsg);\n        }\n\n        return;\n      }\n\n      this._previouslyReported = true;\n      this.groupStart(unhandledRejectionsMsg + traces.length);\n\n      try {\n        this._log(traces);\n      } finally {\n        this.groupEnd();\n      }\n    };\n\n    ConsoleReporter.prototype._log = function (traces) {\n      for (var i = 0; i < traces.length; ++i) {\n        this.warn(error.format(traces[i]));\n      }\n    };\n\n    function initDefaultLogging() {\n      /*jshint maxcomplexity:7*/\n      var log, warn, groupStart, groupEnd;\n\n      if (typeof console === 'undefined') {\n        log = warn = consoleNotAvailable;\n      } else {\n        // Alias console to prevent things like uglify's drop_console option from\n        // removing console.log/error. Unhandled rejections fall into the same\n        // category as uncaught exceptions, and build tools shouldn't silence them.\n        var localConsole = console;\n\n        if (typeof localConsole.error === 'function' && typeof localConsole.dir === 'function') {\n          warn = function (s) {\n            localConsole.error(s);\n          };\n\n          log = function (s) {\n            localConsole.log(s);\n          };\n\n          if (typeof localConsole.groupCollapsed === 'function') {\n            groupStart = function (s) {\n              localConsole.groupCollapsed(s);\n            };\n\n            groupEnd = function () {\n              localConsole.groupEnd();\n            };\n          }\n        } else {\n          // IE8 has console.log and JSON, so we can make a\n          // reasonably useful warn() from those.\n          // Credit to webpro (https://github.com/webpro) for this idea\n          // typeof localConsole.log will return 'object' in IE8, so can't test it with === 'function'\n          // Since this is more of a corner case for IE8, I'm ok to check it with !== 'undefined' to reduce complexity\n          if (typeof localConsole.log !== 'undefined' && typeof JSON !== 'undefined') {\n            log = warn = function (x) {\n              if (typeof x !== 'string') {\n                try {\n                  x = JSON.stringify(x);\n                } catch (e) {}\n              }\n\n              localConsole.log(x);\n            };\n          } else {\n            log = warn = consoleNotAvailable;\n          }\n        }\n      }\n\n      return {\n        msg: log,\n        warn: warn,\n        groupStart: groupStart || warn,\n        groupEnd: groupEnd || consoleNotAvailable\n      };\n    }\n\n    function consoleNotAvailable() {}\n\n    return ConsoleReporter;\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n});","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChipChapProject/chipchap/node_modules/when/monitor/ConsoleReporter.js"],"names":["define","require","error","unhandledRejectionsMsg","allHandledMsg","ConsoleReporter","_previouslyReported","prototype","initDefaultLogging","log","traces","length","msg","groupStart","_log","groupEnd","i","warn","format","console","consoleNotAvailable","localConsole","dir","s","groupCollapsed","JSON","x","stringify","e","amd","factory","module","exports"],"mappings":"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","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar error = require('./error');\n\tvar unhandledRejectionsMsg = '[promises] Unhandled rejections: ';\n\tvar allHandledMsg = '[promises] All previously unhandled rejections have now been handled';\n\n\tfunction ConsoleReporter() {\n\t\tthis._previouslyReported = false;\n\t}\n\n\tConsoleReporter.prototype = initDefaultLogging();\n\n\tConsoleReporter.prototype.log = function(traces) {\n\t\tif(traces.length === 0) {\n\t\t\tif(this._previouslyReported) {\n\t\t\t\tthis._previouslyReported = false;\n\t\t\t\tthis.msg(allHandledMsg);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tthis._previouslyReported = true;\n\t\tthis.groupStart(unhandledRejectionsMsg + traces.length);\n\t\ttry {\n\t\t\tthis._log(traces);\n\t\t} finally {\n\t\t\tthis.groupEnd();\n\t\t}\n\t};\n\n\tConsoleReporter.prototype._log = function(traces) {\n\t\tfor(var i=0; i<traces.length; ++i) {\n\t\t\tthis.warn(error.format(traces[i]));\n\t\t}\n\t};\n\n\tfunction initDefaultLogging() {\n\t\t/*jshint maxcomplexity:7*/\n\t\tvar log, warn, groupStart, groupEnd;\n\n\t\tif(typeof console === 'undefined') {\n\t\t\tlog = warn = consoleNotAvailable;\n\t\t} else {\n\t\t\t// Alias console to prevent things like uglify's drop_console option from\n\t\t\t// removing console.log/error. Unhandled rejections fall into the same\n\t\t\t// category as uncaught exceptions, and build tools shouldn't silence them.\n\t\t\tvar localConsole = console;\n\t\t\tif(typeof localConsole.error === 'function'\n\t\t\t\t&& typeof localConsole.dir === 'function') {\n\t\t\t\twarn = function(s) {\n\t\t\t\t\tlocalConsole.error(s);\n\t\t\t\t};\n\n\t\t\t\tlog = function(s) {\n\t\t\t\t\tlocalConsole.log(s);\n\t\t\t\t};\n\n\t\t\t\tif(typeof localConsole.groupCollapsed === 'function') {\n\t\t\t\t\tgroupStart = function(s) {\n\t\t\t\t\t\tlocalConsole.groupCollapsed(s);\n\t\t\t\t\t};\n\t\t\t\t\tgroupEnd = function() {\n\t\t\t\t\t\tlocalConsole.groupEnd();\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// IE8 has console.log and JSON, so we can make a\n\t\t\t\t// reasonably useful warn() from those.\n\t\t\t\t// Credit to webpro (https://github.com/webpro) for this idea\n\t\t\t\t// typeof localConsole.log will return 'object' in IE8, so can't test it with === 'function'\n\t\t\t\t// Since this is more of a corner case for IE8, I'm ok to check it with !== 'undefined' to reduce complexity\n\t\t\t\tif (typeof localConsole.log !== 'undefined' && typeof JSON !== 'undefined') {\n\t\t\t\t\tlog = warn = function(x) {\n\t\t\t\t\t\tif (typeof x !== 'string') {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tx = JSON.stringify(x);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlocalConsole.log(x);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tlog = warn = consoleNotAvailable;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tmsg: log,\n\t\t\twarn: warn,\n\t\t\tgroupStart: groupStart || warn,\n\t\t\tgroupEnd: groupEnd || consoleNotAvailable\n\t\t};\n\t}\n\n\tfunction consoleNotAvailable() {}\n\n\treturn ConsoleReporter;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n"]},"metadata":{},"sourceType":"script"}