{"ast":null,"code":"(function (console) {\n  /*********************************************************************************************\n   * Make sure console exists because IE blows up if it's not open and you attempt to access it\n   * Create some dummy functions if we need to, so we don't have to if/else everything\n   *********************************************************************************************/\n  console || (console = window.console = {\n    // all this \"a, b, c, d, e\" garbage is to make the IDEs happy, since they can't do variable argument lists\n\n    /**\n     * @param a\n     * @param [b]\n     * @param [c]\n     * @param [d]\n     * @param [e]\n     */\n    log: function (a, b, c, d, e) {},\n\n    /**\n     * @param a\n     * @param [b]\n     * @param [c]\n     * @param [d]\n     * @param [e]\n     */\n    info: function (a, b, c, d, e) {},\n\n    /**\n     * @param a\n     * @param [b]\n     * @param [c]\n     * @param [d]\n     * @param [e]\n     */\n    warn: function (a, b, c, d, e) {},\n\n    /**\n     * @param a\n     * @param [b]\n     * @param [c]\n     * @param [d]\n     * @param [e]\n     */\n    error: function (a, b, c, d, e) {},\n    assert: function (test, message) {}\n  }); // IE 9 won't allow us to call console.log.apply (WTF IE!) It also reports typeof(console.log) as 'object' (UNH!)\n  // but together, those two errors can be useful in allowing us to fix stuff so it works right\n\n  if (typeof console.log === 'object') {\n    // Array.forEach doesn't work in IE 8 so don't try that :(\n    console.log = Function.prototype.call.bind(console.log, console);\n    console.info = Function.prototype.call.bind(console.info, console);\n    console.warn = Function.prototype.call.bind(console.warn, console);\n    console.error = Function.prototype.call.bind(console.error, console);\n    console.debug = Function.prototype.call.bind(console.info, console);\n  }\n  /**\n   * Support group and groupEnd functions\n   */\n\n\n  'group' in console || (console.group = function (msg) {\n    console.info(\"\\n--- \" + msg + \" ---\\n\");\n  });\n  'groupEnd' in console || (console.groupEnd = function () {\n    console.log(\"\\n\");\n  });\n  'assert' in console || (console.assert = function (test, message) {\n    if (!test) {\n      try {\n        // attempt to preserve the stack\n        throw new Error(\"assertion failed: \" + message);\n      } catch (error) {\n        setTimeout(function () {\n          throw error;\n        }, 0);\n      }\n    }\n  });\n  /**\n   * Support time and timeEnd functions\n   */\n\n  'time' in console || function () {\n    var trackedTimes = {};\n\n    console.time = function (msg) {\n      trackedTimes[msg] = new Date().getTime();\n    };\n\n    console.timeEnd = function (msg) {\n      var end = new Date().getTime(),\n          time = msg in trackedTimes ? end - trackedTimes[msg] : 0;\n      console.info(msg + ': ' + time + 'ms');\n    };\n  }();\n})(typeof console !== 'undefined' ? console : undefined);","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/autobahn/lib/polyfill/console.js"],"names":["console","window","log","a","b","c","d","e","info","warn","error","assert","test","message","Function","prototype","call","bind","debug","group","msg","groupEnd","Error","setTimeout","trackedTimes","time","Date","getTime","timeEnd","end","undefined"],"mappings":"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","sourcesContent":["\n(function(console) {\n   /*********************************************************************************************\n    * Make sure console exists because IE blows up if it's not open and you attempt to access it\n    * Create some dummy functions if we need to, so we don't have to if/else everything\n    *********************************************************************************************/\n   console||(console = window.console = {\n      // all this \"a, b, c, d, e\" garbage is to make the IDEs happy, since they can't do variable argument lists\n      /**\n       * @param a\n       * @param [b]\n       * @param [c]\n       * @param [d]\n       * @param [e]\n       */\n      log: function(a, b, c, d, e) {},\n      /**\n       * @param a\n       * @param [b]\n       * @param [c]\n       * @param [d]\n       * @param [e]\n       */\n      info: function(a, b, c, d, e) {},\n      /**\n       * @param a\n       * @param [b]\n       * @param [c]\n       * @param [d]\n       * @param [e]\n       */\n      warn: function(a, b, c, d, e) {},\n      /**\n       * @param a\n       * @param [b]\n       * @param [c]\n       * @param [d]\n       * @param [e]\n       */\n      error: function(a, b, c, d, e) {},\n\n      assert: function(test, message) {}\n   });\n\n   // IE 9 won't allow us to call console.log.apply (WTF IE!) It also reports typeof(console.log) as 'object' (UNH!)\n   // but together, those two errors can be useful in allowing us to fix stuff so it works right\n   if( typeof(console.log) === 'object' ) {\n      // Array.forEach doesn't work in IE 8 so don't try that :(\n      console.log = Function.prototype.call.bind(console.log, console);\n      console.info = Function.prototype.call.bind(console.info, console);\n      console.warn = Function.prototype.call.bind(console.warn, console);\n      console.error = Function.prototype.call.bind(console.error, console);\n      console.debug = Function.prototype.call.bind(console.info, console);\n   }\n\n   /**\n    * Support group and groupEnd functions\n    */\n   ('group' in console) ||\n   (console.group = function(msg) {\n      console.info(\"\\n--- \"+msg+\" ---\\n\");\n   });\n   ('groupEnd' in console) ||\n   (console.groupEnd = function() {\n      console.log(\"\\n\");\n   });\n   ('assert' in console) ||\n   (console.assert = function(test, message) {\n            if (!test) {\n        try {\n          // attempt to preserve the stack\n          throw new Error(\"assertion failed: \" + message);\n        } catch(error) {\n          setTimeout(function(){\n            throw error;\n          }, 0);\n        }\n      }\n       });\n\n   /**\n    * Support time and timeEnd functions\n    */\n   ('time' in console) ||\n   (function() {\n      var trackedTimes = {};\n      console.time = function(msg) {\n         trackedTimes[msg] = new Date().getTime();\n      };\n      console.timeEnd = function(msg) {\n         var end = new Date().getTime(), time = (msg in trackedTimes)? end - trackedTimes[msg] : 0;\n         console.info(msg+': '+time+'ms')\n      };\n   }());\n\n})(typeof console !== 'undefined' ? console : undefined);"]},"metadata":{},"sourceType":"script"}