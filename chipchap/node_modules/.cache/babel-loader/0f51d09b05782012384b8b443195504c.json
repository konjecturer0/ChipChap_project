{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\nvar util = require('../util.js');\n\nvar log = require('../log.js');\n\nvar serializer = require('../serializer.js');\n\nfunction Factory(options) {\n  var self = this;\n  util.assert(options.url !== undefined, \"options.url missing\");\n  util.assert(typeof options.url === \"string\", \"options.url must be a string\");\n\n  if (!options.serializers) {\n    options.serializers = [new serializer.JSONSerializer()];\n\n    if (serializer.MsgpackSerializer) {\n      options.serializers.push(new serializer.MsgpackSerializer());\n    }\n  } else {\n    util.assert(Array.isArray(options.serializers), \"options.serializers must be an array\");\n  }\n\n  if (!options.protocols) {\n    options.protocols = [];\n    options.serializers.forEach(function (ser) {\n      options.protocols.push(\"wamp.2.\" + ser.SERIALIZER_ID);\n    });\n  } else {\n    util.assert(Array.isArray(options.protocols), \"options.protocols must be an array\");\n  }\n\n  if (options.autoping_interval) {\n    util.assert(options.autoping_interval > 0, \"options.autoping_interval must be greater than 0\");\n    options.autoping_interval = options.autoping_interval * 1000;\n  } else {\n    options.autoping_interval = 10000;\n  }\n\n  if (options.autoping_timeout) {\n    util.assert(options.autoping_timeout > 0, \"options.autoping_timeout must be greater than 0\");\n    options.autoping_timeout = options.autoping_timeout * 1000;\n  } else {\n    options.autoping_timeout = 5000;\n  }\n\n  if (options.autoping_size) {\n    util.assert(options.autoping_size >= 4 && options.autoping_size <= 125, \"options.autoping_size must be between 4 and 125\");\n  } else {\n    options.autoping_size = 4;\n  }\n\n  self._options = options;\n}\n\nFactory.prototype.type = \"websocket\";\n\nFactory.prototype.create = function () {\n  var self = this; // the WAMP transport we create\n\n  var transport = {}; // these will get defined further below\n\n  transport.protocol = undefined;\n  transport.serializer = undefined;\n  transport.send = undefined;\n  transport.close = undefined; // these will get overridden by the WAMP session using this transport\n\n  transport.onmessage = function () {};\n\n  transport.onopen = function () {};\n\n  transport.onclose = function () {};\n\n  transport.info = {\n    type: 'websocket',\n    url: self._options.url,\n    protocol: null\n  };\n\n  if (\"WebSocket\" in global) {\n    (function () {\n      var websocket;\n\n      if (self._options.protocols) {\n        websocket = new global.WebSocket(self._options.url, self._options.protocols);\n      } else {\n        websocket = new global.WebSocket(self._options.url);\n      }\n\n      websocket.binaryType = 'arraybuffer';\n\n      websocket.onmessage = function (evt) {\n        log.debug(\"WebSocket transport receive\", evt.data);\n        var msg = transport.serializer.unserialize(evt.data);\n        transport.onmessage(msg);\n      };\n\n      websocket.onopen = function () {\n        var serializer_part = websocket.protocol.split('.')[2];\n\n        for (var index in self._options.serializers) {\n          var serializer = self._options.serializers[index];\n\n          if (serializer.SERIALIZER_ID == serializer_part) {\n            transport.serializer = serializer;\n            break;\n          }\n        }\n\n        transport.info.protocol = websocket.protocol;\n        transport.onopen();\n      };\n\n      websocket.onclose = function (evt) {\n        var details = {\n          code: evt.code,\n          reason: evt.message,\n          wasClean: evt.wasClean\n        };\n        transport.onclose(details);\n      }; // do NOT do the following, since that will make\n      // transport.onclose() fire twice (browsers already fire\n      // websocket.onclose() for errors also)\n      //websocket.onerror = websocket.onclose;\n\n\n      transport.send = function (msg) {\n        var payload = transport.serializer.serialize(msg);\n        log.debug(\"WebSocket transport send\", payload);\n        websocket.send(payload);\n      };\n\n      transport.close = function (code, reason) {\n        websocket.close(code, reason);\n      };\n    })();\n  } else {\n    (function () {\n      var WebSocket = require('ws'); // https://github.com/websockets/ws\n\n\n      var randomBytes = require('tweetnacl').randomBytes;\n\n      var websocket;\n      var options = {\n        agent: self._options.agent,\n        headers: self._options.headers\n      };\n      var protocols;\n\n      if (self._options.protocols) {\n        protocols = self._options.protocols;\n\n        if (Array.isArray(protocols)) {\n          protocols = protocols.join(',');\n        }\n\n        options.protocol = protocols;\n      }\n\n      if (self._options.url.startsWith('wss://') && self._options.tlsConfiguration) {\n        if (self._options.tlsConfiguration.ca && self._options.tlsConfiguration.cert && self._options.tlsConfiguration.key) {\n          // Using TLS\n          // Only using the known working flags in the options.\n          // https://nodejs.org/api/https.html#https_https_request_options_callback\n          log.debug('Using TLS Client Authentication.');\n          options.ca = self._options.tlsConfiguration.ca;\n          options.cert = self._options.tlsConfiguration.cert;\n          options.key = self._options.tlsConfiguration.key;\n          options.rejectUnauthorized = false;\n        } else {\n          log.debug(\"Not using TLS Client Authentication. tlsConfiguration should include \" + \"'ca' 'cert' and 'key' parameters.\");\n        }\n      } else {\n        log.debug('Not using TLS Client Authentication.');\n      }\n\n      websocket = new WebSocket(self._options.url, protocols, options);\n\n      transport.send = function (msg) {\n        var payload = transport.serializer.serialize(msg);\n        websocket.send(payload, {\n          binary: transport.serializer.BINARY\n        });\n      };\n\n      transport.close = function (code, reason) {\n        websocket.close();\n      };\n\n      var auto_ping_interval;\n      var last_read_time;\n\n      function update_last_read_time() {\n        last_read_time = new Date();\n      }\n\n      function get_time_since_last_read() {\n        return new Date() - last_read_time;\n      }\n\n      websocket.on('open', function () {\n        update_last_read_time();\n        var serializer_part = websocket.protocol.split('.')[2];\n\n        for (var index in self._options.serializers) {\n          var serializer = self._options.serializers[index];\n\n          if (serializer.SERIALIZER_ID == serializer_part) {\n            transport.serializer = serializer;\n            break;\n          }\n        }\n\n        transport.info.protocol = websocket.protocol; // https://github.com/websockets/ws#how-to-detect-and-close-broken-connections\n\n        websocket.isAlive = true;\n        auto_ping_interval = setInterval(function ping() {\n          if (websocket.isAlive === false) {\n            clearInterval(auto_ping_interval);\n            return websocket.terminate();\n          } // Do not send a ping because we received a message a moment ago\n\n\n          if (get_time_since_last_read() < self._options.autoping_interval) {\n            return;\n          }\n\n          websocket.isAlive = false;\n          websocket.ping(randomBytes(self._options.autoping_size));\n        }, self._options.autoping_interval);\n        transport.onopen();\n      });\n      websocket.on('pong', function () {\n        update_last_read_time();\n        this.isAlive = true;\n      });\n      websocket.on('message', function (data, flags) {\n        update_last_read_time();\n        var msg = transport.serializer.unserialize(data);\n        transport.onmessage(msg);\n      }); // FIXME: improve mapping to WS API for the following\n      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Close_codes\n      //\n\n      websocket.on('close', function (code, message) {\n        if (auto_ping_interval != null) clearInterval(auto_ping_interval);\n        var details = {\n          code: code,\n          reason: message,\n          wasClean: code === 1000\n        };\n        transport.onclose(details);\n      });\n      websocket.on('error', function (error) {\n        if (auto_ping_interval != null) clearInterval(auto_ping_interval);\n        var details = {\n          code: 1006,\n          reason: '',\n          wasClean: false\n        };\n        transport.onclose(details);\n      });\n    })();\n  }\n\n  return transport;\n};\n\nexports.Factory = Factory;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChipChapProject/chipchap/node_modules/autobahn/lib/transport/websocket.js"],"names":["util","require","log","serializer","Factory","options","self","assert","url","undefined","serializers","JSONSerializer","MsgpackSerializer","push","Array","isArray","protocols","forEach","ser","SERIALIZER_ID","autoping_interval","autoping_timeout","autoping_size","_options","prototype","type","create","transport","protocol","send","close","onmessage","onopen","onclose","info","global","websocket","WebSocket","binaryType","evt","debug","data","msg","unserialize","serializer_part","split","index","details","code","reason","message","wasClean","payload","serialize","randomBytes","agent","headers","join","startsWith","tlsConfiguration","ca","cert","key","rejectUnauthorized","binary","BINARY","auto_ping_interval","last_read_time","update_last_read_time","Date","get_time_since_last_read","on","isAlive","setInterval","ping","clearInterval","terminate","flags","error","exports"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar util = require('../util.js');\nvar log = require('../log.js');\nvar serializer = require('../serializer.js');\n\n\nfunction Factory (options) {\n   var self = this;\n\n   util.assert(options.url !== undefined, \"options.url missing\");\n   util.assert(typeof options.url === \"string\", \"options.url must be a string\");\n\n   if (!options.serializers) {\n      options.serializers = [new serializer.JSONSerializer()];\n      if (serializer.MsgpackSerializer) {\n         options.serializers.push(new serializer.MsgpackSerializer());\n      }\n   } else {\n      util.assert(Array.isArray(options.serializers), \"options.serializers must be an array\");\n   }\n\n   if (!options.protocols) {\n      options.protocols = [];\n      options.serializers.forEach(function (ser) {\n         options.protocols.push(\"wamp.2.\" + ser.SERIALIZER_ID);\n      });\n   } else {\n      util.assert(Array.isArray(options.protocols), \"options.protocols must be an array\");\n   }\n\n   if (options.autoping_interval) {\n     util.assert(options.autoping_interval > 0, \"options.autoping_interval must be greater than 0\");\n     options.autoping_interval = options.autoping_interval * 1000\n   } else {\n     options.autoping_interval = 10000;\n   }\n\n   if (options.autoping_timeout) {\n     util.assert(options.autoping_timeout > 0, \"options.autoping_timeout must be greater than 0\");\n     options.autoping_timeout = options.autoping_timeout * 1000\n   } else {\n     options.autoping_timeout = 5000;\n   }\n\n   if (options.autoping_size) {\n     util.assert(options.autoping_size >= 4 && options.autoping_size <= 125,\n         \"options.autoping_size must be between 4 and 125\");\n   } else {\n     options.autoping_size = 4;\n   }\n\n   self._options = options;\n}\n\n\nFactory.prototype.type = \"websocket\";\n\n\nFactory.prototype.create = function () {\n\n   var self = this;\n\n   // the WAMP transport we create\n   var transport = {};\n\n   // these will get defined further below\n   transport.protocol = undefined;\n   transport.serializer = undefined;\n   transport.send = undefined;\n   transport.close = undefined;\n\n   // these will get overridden by the WAMP session using this transport\n   transport.onmessage = function () {};\n   transport.onopen = function () {};\n   transport.onclose = function () {};\n\n   transport.info = {\n      type: 'websocket',\n      url: self._options.url,\n      protocol: null\n   };\n\n   if (\"WebSocket\" in global) {\n      (function () {\n\n         var websocket;\n\n         if (self._options.protocols) {\n            websocket = new global.WebSocket(self._options.url, self._options.protocols);\n         } else {\n            websocket = new global.WebSocket(self._options.url);\n         }\n         websocket.binaryType = 'arraybuffer';\n\n         websocket.onmessage = function (evt) {\n            log.debug(\"WebSocket transport receive\", evt.data);\n\n            var msg = transport.serializer.unserialize(evt.data);\n            transport.onmessage(msg);\n         }\n\n         websocket.onopen = function () {\n            var serializer_part = websocket.protocol.split('.')[2];\n            for (var index in self._options.serializers) {\n               var serializer = self._options.serializers[index];\n               if (serializer.SERIALIZER_ID == serializer_part) {\n                  transport.serializer = serializer;\n                  break;\n               }\n            }\n\n            transport.info.protocol = websocket.protocol;\n            transport.onopen();\n         }\n\n         websocket.onclose = function (evt) {\n            var details = {\n               code: evt.code,\n               reason: evt.message,\n               wasClean: evt.wasClean\n            }\n            transport.onclose(details);\n         }\n\n         // do NOT do the following, since that will make\n         // transport.onclose() fire twice (browsers already fire\n         // websocket.onclose() for errors also)\n         //websocket.onerror = websocket.onclose;\n\n         transport.send = function (msg) {\n            var payload = transport.serializer.serialize(msg);\n            log.debug(\"WebSocket transport send\", payload);\n            websocket.send(payload);\n         }\n\n         transport.close = function (code, reason) {\n            websocket.close(code, reason);\n         };\n\n      })();\n   } else {\n      (function () {\n\n         var WebSocket = require('ws'); // https://github.com/websockets/ws\n         var randomBytes = require('tweetnacl').randomBytes;\n         var websocket;\n\n         var options = {\n            agent : self._options.agent,\n            headers : self._options.headers\n         };\n\n         var protocols;\n         if (self._options.protocols) {\n            protocols = self._options.protocols;\n            if (Array.isArray(protocols)) {\n               protocols = protocols.join(',');\n            }\n            options.protocol = protocols;\n         }\n\n         if (self._options.url.startsWith('wss://') &&\n             self._options.tlsConfiguration) {\n\n            if (self._options.tlsConfiguration.ca &&\n                self._options.tlsConfiguration.cert &&\n                self._options.tlsConfiguration.key) {\n\n               // Using TLS\n               // Only using the known working flags in the options.\n               // https://nodejs.org/api/https.html#https_https_request_options_callback\n\n               log.debug('Using TLS Client Authentication.');\n\n               options.ca = self._options.tlsConfiguration.ca;\n               options.cert = self._options.tlsConfiguration.cert;\n               options.key = self._options.tlsConfiguration.key;\n               options.rejectUnauthorized = false;\n            } else {\n               log.debug(\"Not using TLS Client Authentication. tlsConfiguration should include \" +\n                   \"'ca' 'cert' and 'key' parameters.\");\n            }\n         } else {\n            log.debug('Not using TLS Client Authentication.');\n         }\n\n         websocket = new WebSocket(self._options.url, protocols, options);\n\n         transport.send = function (msg) {\n            var payload = transport.serializer.serialize(msg);\n            websocket.send(payload, {binary: transport.serializer.BINARY});\n         };\n\n         transport.close = function (code, reason) {\n            websocket.close();\n         };\n\n         var auto_ping_interval;\n         var last_read_time;\n\n         function update_last_read_time() {\n            last_read_time = new Date();\n         }\n\n         function get_time_since_last_read() {\n            return new Date() - last_read_time;\n         }\n\n         websocket.on('open', function () {\n            update_last_read_time();\n            var serializer_part = websocket.protocol.split('.')[2];\n            for (var index in self._options.serializers) {\n               var serializer = self._options.serializers[index];\n               if (serializer.SERIALIZER_ID == serializer_part) {\n                  transport.serializer = serializer;\n                  break;\n               }\n            }\n\n            transport.info.protocol = websocket.protocol;\n\n            // https://github.com/websockets/ws#how-to-detect-and-close-broken-connections\n            websocket.isAlive = true;\n            auto_ping_interval = setInterval(function ping() {\n               if (websocket.isAlive === false) {\n                  clearInterval(auto_ping_interval);\n                  return websocket.terminate();\n               }\n\n               // Do not send a ping because we received a message a moment ago\n               if (get_time_since_last_read() < self._options.autoping_interval) {\n                  return;\n               }\n               websocket.isAlive = false;\n               websocket.ping(randomBytes(self._options.autoping_size));\n            }, self._options.autoping_interval);\n\n            transport.onopen();\n         });\n\n         websocket.on('pong', function () {\n            update_last_read_time();\n            this.isAlive = true;\n         });\n\n         websocket.on('message', function (data, flags) {\n            update_last_read_time();\n            var msg = transport.serializer.unserialize(data);\n            transport.onmessage(msg);\n         });\n\n         // FIXME: improve mapping to WS API for the following\n         // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Close_codes\n         //\n         websocket.on('close', function (code, message) {\n            if (auto_ping_interval != null) clearInterval(auto_ping_interval);\n            var details = {\n               code: code,\n               reason: message,\n               wasClean: code === 1000\n            }\n            transport.onclose(details);\n         });\n\n         websocket.on('error', function (error) {\n            if (auto_ping_interval != null) clearInterval(auto_ping_interval);\n            var details = {\n               code: 1006,\n               reason: '',\n               wasClean: false\n            }\n            transport.onclose(details);\n         });\n\n      })();\n   }\n\n   return transport;\n};\n\n\nexports.Factory = Factory;\n"]},"metadata":{},"sourceType":"script"}