{"ast":null,"code":"'use strict';\n\nvar Transform = require('readable-stream').Transform;\n\nvar inherits = require('inherits');\n\nvar bl = require('bl');\n\nfunction Base(opts) {\n  opts = opts || {};\n  opts.objectMode = true;\n  opts.highWaterMark = 16;\n  Transform.call(this, opts);\n  this._msgpack = opts.msgpack;\n}\n\ninherits(Base, Transform);\n\nfunction Encoder(opts) {\n  if (!(this instanceof Encoder)) {\n    opts = opts || {};\n    opts.msgpack = this;\n    return new Encoder(opts);\n  }\n\n  Base.call(this, opts);\n  this._wrap = 'wrap' in opts && opts.wrap;\n}\n\ninherits(Encoder, Base);\n\nEncoder.prototype._transform = function (obj, enc, done) {\n  var buf = null;\n\n  try {\n    buf = this._msgpack.encode(this._wrap ? obj.value : obj).slice(0);\n  } catch (err) {\n    this.emit('error', err);\n    return done();\n  }\n\n  this.push(buf);\n  done();\n};\n\nfunction Decoder(opts) {\n  if (!(this instanceof Decoder)) {\n    opts = opts || {};\n    opts.msgpack = this;\n    return new Decoder(opts);\n  }\n\n  Base.call(this, opts);\n  this._chunks = bl();\n  this._wrap = 'wrap' in opts && opts.wrap;\n}\n\ninherits(Decoder, Base);\n\nDecoder.prototype._transform = function (buf, enc, done) {\n  if (buf) {\n    this._chunks.append(buf);\n  }\n\n  try {\n    var result = this._msgpack.decode(this._chunks);\n\n    if (this._wrap) {\n      result = {\n        value: result\n      };\n    }\n\n    this.push(result);\n  } catch (err) {\n    if (err instanceof this._msgpack.IncompleteBufferError) {\n      done();\n    } else {\n      this.emit('error', err);\n    }\n\n    return;\n  }\n\n  if (this._chunks.length > 0) {\n    this._transform(null, enc, done);\n  } else {\n    done();\n  }\n};\n\nmodule.exports.decoder = Decoder;\nmodule.exports.encoder = Encoder;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/msgpack5/lib/streams.js"],"names":["Transform","require","inherits","bl","Base","opts","objectMode","highWaterMark","call","_msgpack","msgpack","Encoder","_wrap","wrap","prototype","_transform","obj","enc","done","buf","encode","value","slice","err","emit","push","Decoder","_chunks","append","result","decode","IncompleteBufferError","length","module","exports","decoder","encoder"],"mappings":"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","sourcesContent":["'use strict'\n\nvar Transform = require('readable-stream').Transform\nvar inherits = require('inherits')\nvar bl = require('bl')\n\nfunction Base (opts) {\n  opts = opts || {}\n\n  opts.objectMode = true\n  opts.highWaterMark = 16\n\n  Transform.call(this, opts)\n\n  this._msgpack = opts.msgpack\n}\n\ninherits(Base, Transform)\n\nfunction Encoder (opts) {\n  if (!(this instanceof Encoder)) {\n    opts = opts || {}\n    opts.msgpack = this\n    return new Encoder(opts)\n  }\n\n  Base.call(this, opts)\n  this._wrap = ('wrap' in opts) && opts.wrap\n}\n\ninherits(Encoder, Base)\n\nEncoder.prototype._transform = function (obj, enc, done) {\n  var buf = null\n\n  try {\n    buf = this._msgpack.encode(this._wrap ? obj.value : obj).slice(0)\n  } catch (err) {\n    this.emit('error', err)\n    return done()\n  }\n\n  this.push(buf)\n  done()\n}\n\nfunction Decoder (opts) {\n  if (!(this instanceof Decoder)) {\n    opts = opts || {}\n    opts.msgpack = this\n    return new Decoder(opts)\n  }\n\n  Base.call(this, opts)\n\n  this._chunks = bl()\n  this._wrap = ('wrap' in opts) && opts.wrap\n}\n\ninherits(Decoder, Base)\n\nDecoder.prototype._transform = function (buf, enc, done) {\n  if (buf) {\n    this._chunks.append(buf)\n  }\n\n  try {\n    var result = this._msgpack.decode(this._chunks)\n    if (this._wrap) {\n      result = {value: result}\n    }\n    this.push(result)\n  } catch (err) {\n    if (err instanceof this._msgpack.IncompleteBufferError) {\n      done()\n    } else {\n      this.emit('error', err)\n    }\n    return\n  }\n\n  if (this._chunks.length > 0) {\n    this._transform(null, enc, done)\n  } else {\n    done()\n  }\n}\n\nmodule.exports.decoder = Decoder\nmodule.exports.encoder = Encoder\n"]},"metadata":{},"sourceType":"script"}