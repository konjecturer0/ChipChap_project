{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/** @author Brian Cavalier */\n\n/** @author John Hann */\n(function (define) {\n  'use strict';\n\n  define(function () {\n    var parse, captureStack, format;\n\n    if (Error.captureStackTrace) {\n      // Use Error.captureStackTrace if available\n      parse = function (e) {\n        return e && e.stack && e.stack.split('\\n');\n      };\n\n      format = formatAsString;\n      captureStack = Error.captureStackTrace;\n    } else {\n      // Otherwise, do minimal feature detection to determine\n      // how to capture and format reasonable stacks.\n      parse = function (e) {\n        var stack = e && e.stack && e.stack.split('\\n');\n\n        if (stack && e.message) {\n          stack.unshift(e.message);\n        }\n\n        return stack;\n      };\n\n      (function () {\n        var e = new Error();\n\n        if (typeof e.stack !== 'string') {\n          format = formatAsString;\n          captureStack = captureSpiderMonkeyStack;\n        } else {\n          format = formatAsErrorWithStack;\n          captureStack = useStackDirectly;\n        }\n      })();\n    }\n\n    function captureSpiderMonkeyStack(host) {\n      try {\n        throw new Error();\n      } catch (err) {\n        host.stack = err.stack;\n      }\n    }\n\n    function useStackDirectly(host) {\n      host.stack = new Error().stack;\n    }\n\n    function formatAsString(longTrace) {\n      return join(longTrace);\n    }\n\n    function formatAsErrorWithStack(longTrace) {\n      var e = new Error();\n      e.stack = formatAsString(longTrace);\n      return e;\n    } // About 5-10x faster than String.prototype.join o_O\n\n\n    function join(a) {\n      var sep = false;\n      var s = '';\n\n      for (var i = 0; i < a.length; ++i) {\n        if (sep) {\n          s += '\\n' + a[i];\n        } else {\n          s += a[i];\n          sep = true;\n        }\n      }\n\n      return s;\n    }\n\n    return {\n      parse: parse,\n      format: format,\n      captureStack: captureStack\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory();\n});","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/when/monitor/error.js"],"names":["define","parse","captureStack","format","Error","captureStackTrace","e","stack","split","formatAsString","message","unshift","captureSpiderMonkeyStack","formatAsErrorWithStack","useStackDirectly","host","err","longTrace","join","a","sep","s","i","length","amd","factory","module","exports"],"mappings":"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","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\tvar parse, captureStack, format;\n\n\tif(Error.captureStackTrace) {\n\t\t// Use Error.captureStackTrace if available\n\t\tparse = function(e) {\n\t\t\treturn e && e.stack && e.stack.split('\\n');\n\t\t};\n\n\t\tformat = formatAsString;\n\t\tcaptureStack = Error.captureStackTrace;\n\n\t} else {\n\t\t// Otherwise, do minimal feature detection to determine\n\t\t// how to capture and format reasonable stacks.\n\t\tparse = function(e) {\n\t\t\tvar stack = e && e.stack && e.stack.split('\\n');\n\t\t\tif(stack && e.message) {\n\t\t\t\tstack.unshift(e.message);\n\t\t\t}\n\t\t\treturn stack;\n\t\t};\n\n\t\t(function() {\n\t\t\tvar e = new Error();\n\t\t\tif(typeof e.stack !== 'string') {\n\t\t\t\tformat = formatAsString;\n\t\t\t\tcaptureStack = captureSpiderMonkeyStack;\n\t\t\t} else {\n\t\t\t\tformat = formatAsErrorWithStack;\n\t\t\t\tcaptureStack = useStackDirectly;\n\t\t\t}\n\t\t}());\n\t}\n\n\tfunction captureSpiderMonkeyStack(host) {\n\t\ttry {\n\t\t\tthrow new Error();\n\t\t} catch(err) {\n\t\t\thost.stack = err.stack;\n\t\t}\n\t}\n\n\tfunction useStackDirectly(host) {\n\t\thost.stack = new Error().stack;\n\t}\n\n\tfunction formatAsString(longTrace) {\n\t\treturn join(longTrace);\n\t}\n\n\tfunction formatAsErrorWithStack(longTrace) {\n\t\tvar e = new Error();\n\t\te.stack = formatAsString(longTrace);\n\t\treturn e;\n\t}\n\n\t// About 5-10x faster than String.prototype.join o_O\n\tfunction join(a) {\n\t\tvar sep = false;\n\t\tvar s = '';\n\t\tfor(var i=0; i< a.length; ++i) {\n\t\t\tif(sep) {\n\t\t\t\ts += '\\n' + a[i];\n\t\t\t} else {\n\t\t\t\ts+= a[i];\n\t\t\t\tsep = true;\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\treturn {\n\t\tparse: parse,\n\t\tformat: format,\n\t\tcaptureStack: captureStack\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n"]},"metadata":{},"sourceType":"script"}