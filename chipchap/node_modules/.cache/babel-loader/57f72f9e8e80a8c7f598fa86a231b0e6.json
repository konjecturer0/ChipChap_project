{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n// Polyfills for <= IE9\nrequire('./polyfill.js');\n\nvar pjson = require('../package.json');\n\nvar when = require('when'); //var fn = require(\"when/function\");\n\n\nvar msgpack = require('msgpack5');\n\nvar cbor = require('cbor');\n\nvar nacl = require('tweetnacl');\n\nif ('AUTOBAHN_DEBUG' in global && AUTOBAHN_DEBUG) {\n  // https://github.com/cujojs/when/blob/master/docs/api.md#whenmonitor\n  require('when/monitor/console');\n\n  if ('console' in global) {\n    console.log(\"AutobahnJS debug enabled\");\n  }\n}\n\nvar util = require('./util.js');\n\nvar log = require('./log.js');\n\nvar session = require('./session.js');\n\nvar connection = require('./connection.js');\n\nvar configure = require('./configure.js');\n\nvar serializer = require('./serializer.js');\n\nvar persona = require('./auth/persona.js');\n\nvar cra = require('./auth/cra.js');\n\nvar cryptosign = require('./auth/cryptosign.js');\n\nexports.version = pjson.version;\nexports.transports = configure.transports;\nexports.Connection = connection.Connection;\nexports.Session = session.Session;\nexports.Invocation = session.Invocation;\nexports.Event = session.Event;\nexports.Result = session.Result;\nexports.Error = session.Error;\nexports.Subscription = session.Subscription;\nexports.Registration = session.Registration;\nexports.Publication = session.Publication;\nexports.serializer = serializer;\nexports.auth_persona = persona.auth;\nexports.auth_cra = cra;\nexports.auth_cryptosign = cryptosign;\nexports.when = when;\nexports.msgpack = msgpack;\nexports.cbor = cbor;\nexports.nacl = nacl;\nexports.util = util;\nexports.log = log;","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/autobahn/lib/autobahn.js"],"names":["require","pjson","when","msgpack","cbor","nacl","global","AUTOBAHN_DEBUG","console","log","util","session","connection","configure","serializer","persona","cra","cryptosign","exports","version","transports","Connection","Session","Invocation","Event","Result","Error","Subscription","Registration","Publication","auth_persona","auth","auth_cra","auth_cryptosign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAA,OAAO,CAAC,eAAD,CAAP;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,iBAAD,CAAnB;;AAEA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB,C,CACA;;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAI,oBAAoBM,MAApB,IAA8BC,cAAlC,EAAkD;AAC/C;AACAP,EAAAA,OAAO,CAAC,sBAAD,CAAP;;AACA,MAAI,aAAaM,MAAjB,EAAyB;AACtBE,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACF;AACH;;AAED,IAAIC,IAAI,GAAGV,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIS,GAAG,GAAGT,OAAO,CAAC,UAAD,CAAjB;;AACA,IAAIW,OAAO,GAAGX,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIY,UAAU,GAAGZ,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIa,SAAS,GAAGb,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIc,UAAU,GAAGd,OAAO,CAAC,iBAAD,CAAxB;;AAEA,IAAIe,OAAO,GAAGf,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIgB,GAAG,GAAGhB,OAAO,CAAC,eAAD,CAAjB;;AACA,IAAIiB,UAAU,GAAGjB,OAAO,CAAC,sBAAD,CAAxB;;AAEAkB,OAAO,CAACC,OAAR,GAAkBlB,KAAK,CAACkB,OAAxB;AAEAD,OAAO,CAACE,UAAR,GAAqBP,SAAS,CAACO,UAA/B;AAEAF,OAAO,CAACG,UAAR,GAAqBT,UAAU,CAACS,UAAhC;AAEAH,OAAO,CAACI,OAAR,GAAkBX,OAAO,CAACW,OAA1B;AACAJ,OAAO,CAACK,UAAR,GAAqBZ,OAAO,CAACY,UAA7B;AACAL,OAAO,CAACM,KAAR,GAAgBb,OAAO,CAACa,KAAxB;AACAN,OAAO,CAACO,MAAR,GAAiBd,OAAO,CAACc,MAAzB;AACAP,OAAO,CAACQ,KAAR,GAAgBf,OAAO,CAACe,KAAxB;AACAR,OAAO,CAACS,YAAR,GAAuBhB,OAAO,CAACgB,YAA/B;AACAT,OAAO,CAACU,YAAR,GAAuBjB,OAAO,CAACiB,YAA/B;AACAV,OAAO,CAACW,WAAR,GAAsBlB,OAAO,CAACkB,WAA9B;AAEAX,OAAO,CAACJ,UAAR,GAAqBA,UAArB;AAEAI,OAAO,CAACY,YAAR,GAAuBf,OAAO,CAACgB,IAA/B;AACAb,OAAO,CAACc,QAAR,GAAmBhB,GAAnB;AACAE,OAAO,CAACe,eAAR,GAA0BhB,UAA1B;AAEAC,OAAO,CAAChB,IAAR,GAAeA,IAAf;AACAgB,OAAO,CAACf,OAAR,GAAkBA,OAAlB;AACAe,OAAO,CAACd,IAAR,GAAeA,IAAf;AACAc,OAAO,CAACb,IAAR,GAAeA,IAAf;AAEAa,OAAO,CAACR,IAAR,GAAeA,IAAf;AACAQ,OAAO,CAACT,GAAR,GAAcA,GAAd","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n//\n//  AutobahnJS - http://autobahn.ws, http://wamp.ws\n//\n//  A JavaScript library for WAMP (\"The Web Application Messaging Protocol\").\n//\n//  Copyright (c) Crossbar.io Technologies GmbH and contributors\n//\n//  Licensed under the MIT License.\n//  http://www.opensource.org/licenses/mit-license.php\n//\n///////////////////////////////////////////////////////////////////////////////\n\n// Polyfills for <= IE9\nrequire('./polyfill.js');\n\nvar pjson = require('../package.json');\n\nvar when = require('when');\n//var fn = require(\"when/function\");\n\nvar msgpack = require('msgpack5');\nvar cbor = require('cbor');\nvar nacl = require('tweetnacl');\n\nif ('AUTOBAHN_DEBUG' in global && AUTOBAHN_DEBUG) {\n   // https://github.com/cujojs/when/blob/master/docs/api.md#whenmonitor\n   require('when/monitor/console');\n   if ('console' in global) {\n      console.log(\"AutobahnJS debug enabled\");\n   }\n}\n\nvar util = require('./util.js');\nvar log = require('./log.js');\nvar session = require('./session.js');\nvar connection = require('./connection.js');\nvar configure = require('./configure.js');\nvar serializer = require('./serializer.js');\n\nvar persona = require('./auth/persona.js');\nvar cra = require('./auth/cra.js');\nvar cryptosign = require('./auth/cryptosign.js');\n\nexports.version = pjson.version;\n\nexports.transports = configure.transports;\n\nexports.Connection = connection.Connection;\n\nexports.Session = session.Session;\nexports.Invocation = session.Invocation;\nexports.Event = session.Event;\nexports.Result = session.Result;\nexports.Error = session.Error;\nexports.Subscription = session.Subscription;\nexports.Registration = session.Registration;\nexports.Publication = session.Publication;\n\nexports.serializer = serializer;\n\nexports.auth_persona = persona.auth;\nexports.auth_cra = cra;\nexports.auth_cryptosign = cryptosign;\n\nexports.when = when;\nexports.msgpack = msgpack;\nexports.cbor = cbor;\nexports.nacl = nacl;\n\nexports.util = util;\nexports.log = log;\n"]},"metadata":{},"sourceType":"script"}