{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/** @author Brian Cavalier */\n\n/** @author John Hann */\n(function (define) {\n  'use strict';\n\n  define(function () {\n    makeApply.tryCatchResolve = tryCatchResolve;\n    return makeApply;\n\n    function makeApply(Promise, call) {\n      if (arguments.length < 2) {\n        call = tryCatchResolve;\n      }\n\n      return apply;\n\n      function apply(f, thisArg, args) {\n        var p = Promise._defer();\n\n        var l = args.length;\n        var params = new Array(l);\n        callAndResolve({\n          f: f,\n          thisArg: thisArg,\n          args: args,\n          params: params,\n          i: l - 1,\n          call: call\n        }, p._handler);\n        return p;\n      }\n\n      function callAndResolve(c, h) {\n        if (c.i < 0) {\n          return call(c.f, c.thisArg, c.params, h);\n        }\n\n        var handler = Promise._handler(c.args[c.i]);\n\n        handler.fold(callAndResolveNext, c, void 0, h);\n      }\n\n      function callAndResolveNext(c, x, h) {\n        c.params[c.i] = x;\n        c.i -= 1;\n        callAndResolve(c, h);\n      }\n    }\n\n    function tryCatchResolve(f, thisArg, args, resolver) {\n      try {\n        resolver.resolve(f.apply(thisArg, args));\n      } catch (e) {\n        resolver.reject(e);\n      }\n    }\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory();\n});","map":{"version":3,"sources":["/home/vladic4t/Desktop/mydev/ChiChapProject/chipchap/node_modules/when/lib/apply.js"],"names":["define","makeApply","tryCatchResolve","Promise","call","arguments","length","apply","f","thisArg","args","p","_defer","l","params","Array","callAndResolve","i","_handler","c","h","handler","fold","callAndResolveNext","x","resolver","resolve","e","reject","amd","factory","module","exports"],"mappings":"AAAA;;AACA;;AACA;AAEC,WAASA,MAAT,EAAiB;AAAE;;AACpBA,EAAAA,MAAM,CAAC,YAAW;AAEjBC,IAAAA,SAAS,CAACC,eAAV,GAA4BA,eAA5B;AAEA,WAAOD,SAAP;;AAEA,aAASA,SAAT,CAAmBE,OAAnB,EAA4BC,IAA5B,EAAkC;AACjC,UAAGC,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAyB;AACxBF,QAAAA,IAAI,GAAGF,eAAP;AACA;;AAED,aAAOK,KAAP;;AAEA,eAASA,KAAT,CAAeC,CAAf,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;AAChC,YAAIC,CAAC,GAAGR,OAAO,CAACS,MAAR,EAAR;;AACA,YAAIC,CAAC,GAAGH,IAAI,CAACJ,MAAb;AACA,YAAIQ,MAAM,GAAG,IAAIC,KAAJ,CAAUF,CAAV,CAAb;AACAG,QAAAA,cAAc,CAAC;AAAER,UAAAA,CAAC,EAACA,CAAJ;AAAOC,UAAAA,OAAO,EAACA,OAAf;AAAwBC,UAAAA,IAAI,EAACA,IAA7B;AAAmCI,UAAAA,MAAM,EAACA,MAA1C;AAAkDG,UAAAA,CAAC,EAACJ,CAAC,GAAC,CAAtD;AAAyDT,UAAAA,IAAI,EAACA;AAA9D,SAAD,EAAuEO,CAAC,CAACO,QAAzE,CAAd;AAEA,eAAOP,CAAP;AACA;;AAED,eAASK,cAAT,CAAwBG,CAAxB,EAA2BC,CAA3B,EAA8B;AAC7B,YAAGD,CAAC,CAACF,CAAF,GAAM,CAAT,EAAY;AACX,iBAAOb,IAAI,CAACe,CAAC,CAACX,CAAH,EAAMW,CAAC,CAACV,OAAR,EAAiBU,CAAC,CAACL,MAAnB,EAA2BM,CAA3B,CAAX;AACA;;AAED,YAAIC,OAAO,GAAGlB,OAAO,CAACe,QAAR,CAAiBC,CAAC,CAACT,IAAF,CAAOS,CAAC,CAACF,CAAT,CAAjB,CAAd;;AACAI,QAAAA,OAAO,CAACC,IAAR,CAAaC,kBAAb,EAAiCJ,CAAjC,EAAoC,KAAK,CAAzC,EAA4CC,CAA5C;AACA;;AAED,eAASG,kBAAT,CAA4BJ,CAA5B,EAA+BK,CAA/B,EAAkCJ,CAAlC,EAAqC;AACpCD,QAAAA,CAAC,CAACL,MAAF,CAASK,CAAC,CAACF,CAAX,IAAgBO,CAAhB;AACAL,QAAAA,CAAC,CAACF,CAAF,IAAO,CAAP;AACAD,QAAAA,cAAc,CAACG,CAAD,EAAIC,CAAJ,CAAd;AACA;AACD;;AAED,aAASlB,eAAT,CAAyBM,CAAzB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2Ce,QAA3C,EAAqD;AACpD,UAAI;AACHA,QAAAA,QAAQ,CAACC,OAAT,CAAiBlB,CAAC,CAACD,KAAF,CAAQE,OAAR,EAAiBC,IAAjB,CAAjB;AACA,OAFD,CAEE,OAAMiB,CAAN,EAAS;AACVF,QAAAA,QAAQ,CAACG,MAAT,CAAgBD,CAAhB;AACA;AACD;AAED,GA9CK,CAAN;AA+CC,CAhDA,EAgDC,OAAO3B,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC6B,GAAvC,GAA6C7B,MAA7C,GAAsD,UAAS8B,OAAT,EAAkB;AAAEC,EAAAA,MAAM,CAACC,OAAP,GAAiBF,OAAO,EAAxB;AAA6B,CAhDxG,CAAD","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\tmakeApply.tryCatchResolve = tryCatchResolve;\n\n\treturn makeApply;\n\n\tfunction makeApply(Promise, call) {\n\t\tif(arguments.length < 2) {\n\t\t\tcall = tryCatchResolve;\n\t\t}\n\n\t\treturn apply;\n\n\t\tfunction apply(f, thisArg, args) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar l = args.length;\n\t\t\tvar params = new Array(l);\n\t\t\tcallAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);\n\n\t\t\treturn p;\n\t\t}\n\n\t\tfunction callAndResolve(c, h) {\n\t\t\tif(c.i < 0) {\n\t\t\t\treturn call(c.f, c.thisArg, c.params, h);\n\t\t\t}\n\n\t\t\tvar handler = Promise._handler(c.args[c.i]);\n\t\t\thandler.fold(callAndResolveNext, c, void 0, h);\n\t\t}\n\n\t\tfunction callAndResolveNext(c, x, h) {\n\t\t\tc.params[c.i] = x;\n\t\t\tc.i -= 1;\n\t\t\tcallAndResolve(c, h);\n\t\t}\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tresolver.resolve(f.apply(thisArg, args));\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n"]},"metadata":{},"sourceType":"script"}